# Cartrita AI OS - Hierarchical Multi-Agent System (2025)
# Complete Monorepo with Advanced AI Orchestration



services:
  # ============================================
  # DATABASE SERVICES
  # ============================================
  postgres:
    image: pgvector/pgvector:pg17-bookworm
    container_name: cartrita-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-robbie}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-cartrita_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-database.sql:/docker-entrypoint-initdb.d/init-database.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U robbie -d cartrita_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - cartrita-network
    # command: postgres -c config_file=/etc/postgresql/postgresql.conf

  redis:
    image: redis:7.4-alpine
    container_name: cartrita-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - cartrita-network

  # ============================================
  # AI ORCHESTRATOR (Python/FastAPI)
  # ============================================
  ai-orchestrator:
    build:
      context: .
      dockerfile: ./services/ai-orchestrator/Dockerfile
    container_name: cartrita-ai-orchestrator
    restart: unless-stopped
    ports:
      - "${AI_ORCHESTRATOR_PORT:-8000}:8000"
    environment:
      - PYTHON_ENV=${PYTHON_ENV:-production}
      - PYTHONPATH=/app
      - EXTERNAL_CODACY_API_TOKEN=${EXTERNAL_CODACY_API_TOKEN}
      - AI_OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_OPENAI_EMBEDDINGS_API_KEY=${OPENAI_EMBEDDINGS_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT}
      - LANGCHAIN_ENDPOINT=${LANGCHAIN_ENDPOINT}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - SERPAPI_API_KEY=${SERPAPI_API_KEY}
      - WOLFRAM_ALPHA_API_KEY=${WOLFRAM_ALPHA_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-cartrita}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-cartrita_db}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - COMPUTER_USE_ENABLED=${COMPUTER_USE_ENABLED:-true}
      - COMPUTER_USE_SAFETY_MODE=${COMPUTER_USE_SAFETY_MODE:-strict}
      - SECURITY_SECRET_KEY=${SECRET_KEY}
      - SECURITY_JWT_SECRET=${JWT_SECRET}
      - SECURITY_API_KEY_SECRET=${API_KEY_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OTEL_SERVICE_NAME=cartrita-ai-orchestrator
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./services/ai-orchestrator:/app
      - ./.env:/app/.env
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cartrita-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-orchestrator.rule=Host(`api.cartrita.local`)"
      - "traefik.http.routers.ai-orchestrator.entrypoints=websecure"
      - "traefik.http.routers.ai-orchestrator.tls.certresolver=letsencrypt"
      - "traefik.http.services.ai-orchestrator.loadbalancer.server.port=8000"

  # ============================================
  # API GATEWAY (Node.js/Fastify)
  # ============================================
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: cartrita-api-gateway
    restart: unless-stopped
    ports:
      - "${API_GATEWAY_PORT:-3001}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - API_GATEWAY_PORT=3000
      - AI_ORCHESTRATOR_URL=http://ai-orchestrator:8000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-cartrita}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-cartrita_db}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY_SECRET=${API_KEY_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OTEL_SERVICE_NAME=cartrita-api-gateway
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-orchestrator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cartrita-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.cartrita.local`)"
      - "traefik.http.routers.api-gateway.entrypoints=websecure"
      - "traefik.http.routers.api-gateway.tls.certresolver=letsencrypt"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=3000"

  # ============================================
  # FRONTEND (React 19 + Next.js)
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cartrita-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3003}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:3001}
      - NEXT_PUBLIC_AI_ORCHESTRATOR_URL=${NEXT_PUBLIC_AI_ORCHESTRATOR_URL:-http://localhost:8000}
      - NEXT_PUBLIC_APP_NAME=${APP_NAME:-Cartrita AI OS}
      - NEXT_PUBLIC_VERSION=${VERSION:-2.0.0}
      - OTEL_SERVICE_NAME=cartrita-frontend
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cartrita-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.cartrita.local`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  # ============================================
  # MONITORING & OBSERVABILITY
  # ============================================
  jaeger:
    image: jaegertracing/all-in-one:1.58
    container_name: cartrita-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger_data:/tmp
    networks:
      - cartrita-network

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: cartrita-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cartrita-network

  grafana:
    image: grafana/grafana:11.0.0
    container_name: cartrita-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - cartrita-network

  # ============================================
  # DEVELOPMENT TOOLS
  # ============================================
  pgadmin:
    image: dpage/pgadmin4:8.7
    container_name: cartrita-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@cartrita.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - cartrita-network
    profiles:
      - dev

  redis-insight:
    image: redis/redisinsight:2.50
    container_name: cartrita-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - cartrita-network
    profiles:
      - dev

networks:
  cartrita-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  jaeger_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_insight_data:
    driver: local
