{
  "url": "https://python.langchain.com/api_reference/community/callbacks/langchain_community.callbacks.wandb_callback.WandbCallbackHandler.html#langchain_community.callbacks.wandb_callback.WandbCallbackHandler",
  "title": "WandbCallbackHandler#",
  "sections": [
    {
      "type": "li",
      "content": "LangChain Python API Reference"
    },
    {
      "type": "li",
      "content": "langchain-community: 0.3.29"
    },
    {
      "type": "li",
      "content": "WandbCallbackHandler"
    },
    {
      "type": "p",
      "content": "Callback Handler that logs to Weights and Biases."
    },
    {
      "type": "li",
      "content": "job_type(str) – The type of job."
    },
    {
      "type": "p",
      "content": "job_type(str) – The type of job."
    },
    {
      "type": "li",
      "content": "project(str) – The project to log to."
    },
    {
      "type": "p",
      "content": "project(str) – The project to log to."
    },
    {
      "type": "li",
      "content": "entity(str) – The entity to log to."
    },
    {
      "type": "p",
      "content": "entity(str) – The entity to log to."
    },
    {
      "type": "li",
      "content": "tags(list) – The tags to log."
    },
    {
      "type": "p",
      "content": "tags(list) – The tags to log."
    },
    {
      "type": "li",
      "content": "group(str) – The group to log to."
    },
    {
      "type": "p",
      "content": "group(str) – The group to log to."
    },
    {
      "type": "li",
      "content": "name(str) – The name of the run."
    },
    {
      "type": "p",
      "content": "name(str) – The name of the run."
    },
    {
      "type": "li",
      "content": "notes(str) – The notes to log."
    },
    {
      "type": "p",
      "content": "notes(str) – The notes to log."
    },
    {
      "type": "li",
      "content": "visualize(bool) – Whether to visualize the run."
    },
    {
      "type": "p",
      "content": "visualize(bool) – Whether to visualize the run."
    },
    {
      "type": "li",
      "content": "complexity_metrics(bool) – Whether to log complexity metrics."
    },
    {
      "type": "p",
      "content": "complexity_metrics(bool) – Whether to log complexity metrics."
    },
    {
      "type": "li",
      "content": "stream_logs(bool) – Whether to stream callback actions to W&B"
    },
    {
      "type": "p",
      "content": "stream_logs(bool) – Whether to stream callback actions to W&B"
    },
    {
      "type": "p",
      "content": "This handler will utilize the associated callback method called and formats\nthe input of each callback function with metadata regarding the state of LLM run,\nand adds the response to the list of records for both the {method}_records and\naction. It then logs the response using the run.log() method to Weights and Biases."
    },
    {
      "type": "p",
      "content": "Initialize callback handler."
    },
    {
      "type": "p",
      "content": "always_verbose"
    },
    {
      "type": "p",
      "content": "Whether to call verbose callbacks even if verbose is False."
    },
    {
      "type": "p",
      "content": "ignore_agent"
    },
    {
      "type": "p",
      "content": "Whether to ignore agent callbacks."
    },
    {
      "type": "p",
      "content": "ignore_chain"
    },
    {
      "type": "p",
      "content": "Whether to ignore chain callbacks."
    },
    {
      "type": "p",
      "content": "ignore_chat_model"
    },
    {
      "type": "p",
      "content": "Whether to ignore chat model callbacks."
    },
    {
      "type": "p",
      "content": "ignore_custom_event"
    },
    {
      "type": "p",
      "content": "Ignore custom event."
    },
    {
      "type": "p",
      "content": "Whether to ignore LLM callbacks."
    },
    {
      "type": "p",
      "content": "ignore_retriever"
    },
    {
      "type": "p",
      "content": "Whether to ignore retriever callbacks."
    },
    {
      "type": "p",
      "content": "ignore_retry"
    },
    {
      "type": "p",
      "content": "Whether to ignore retry callbacks."
    },
    {
      "type": "p",
      "content": "raise_error"
    },
    {
      "type": "p",
      "content": "Whether to raise an error if an exception occurs."
    },
    {
      "type": "p",
      "content": "Whether to run the callback inline."
    },
    {
      "type": "p",
      "content": "__init__([job_type, project, entity, tags, ...])"
    },
    {
      "type": "p",
      "content": "Initialize callback handler."
    },
    {
      "type": "p",
      "content": "flush_tracker([langchain_asset, reset, ...])"
    },
    {
      "type": "p",
      "content": "Flush the tracker and reset the session."
    },
    {
      "type": "p",
      "content": "get_custom_callback_meta()"
    },
    {
      "type": "p",
      "content": "on_agent_action(action, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run on agent action."
    },
    {
      "type": "p",
      "content": "on_agent_finish(finish, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when agent ends running."
    },
    {
      "type": "p",
      "content": "on_chain_end(outputs, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when chain ends running."
    },
    {
      "type": "p",
      "content": "on_chain_error(error, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when chain errors."
    },
    {
      "type": "p",
      "content": "on_chain_start(serialized, inputs, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when chain starts running."
    },
    {
      "type": "p",
      "content": "on_chat_model_start(serialized, messages, *, ...)"
    },
    {
      "type": "p",
      "content": "Run when a chat model starts running."
    },
    {
      "type": "p",
      "content": "on_custom_event(name, data, *, run_id[, ...])"
    },
    {
      "type": "p",
      "content": "Override to define a handler for a custom event."
    },
    {
      "type": "p",
      "content": "on_llm_end(response, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when LLM ends running."
    },
    {
      "type": "p",
      "content": "on_llm_error(error, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when LLM errors."
    },
    {
      "type": "p",
      "content": "on_llm_new_token(token, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when LLM generates a new token."
    },
    {
      "type": "p",
      "content": "on_llm_start(serialized, prompts, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when LLM starts."
    },
    {
      "type": "p",
      "content": "on_retriever_end(documents, *, run_id[, ...])"
    },
    {
      "type": "p",
      "content": "Run when Retriever ends running."
    },
    {
      "type": "p",
      "content": "on_retriever_error(error, *, run_id[, ...])"
    },
    {
      "type": "p",
      "content": "Run when Retriever errors."
    },
    {
      "type": "p",
      "content": "on_retriever_start(serialized, query, *, run_id)"
    },
    {
      "type": "p",
      "content": "Run when the Retriever starts running."
    },
    {
      "type": "p",
      "content": "on_retry(retry_state, *, run_id[, parent_run_id])"
    },
    {
      "type": "p",
      "content": "Run on a retry event."
    },
    {
      "type": "p",
      "content": "on_text(text, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when agent is ending."
    },
    {
      "type": "p",
      "content": "on_tool_end(output, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when tool ends running."
    },
    {
      "type": "p",
      "content": "on_tool_error(error, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when tool errors."
    },
    {
      "type": "p",
      "content": "on_tool_start(serialized, input_str, **kwargs)"
    },
    {
      "type": "p",
      "content": "Run when tool starts running."
    },
    {
      "type": "p",
      "content": "reset_callback_meta()"
    },
    {
      "type": "p",
      "content": "Reset the callback metadata."
    },
    {
      "type": "p",
      "content": "Initialize callback handler."
    },
    {
      "type": "li",
      "content": "job_type(str|None)"
    },
    {
      "type": "p",
      "content": "job_type(str|None)"
    },
    {
      "type": "li",
      "content": "project(str|None)"
    },
    {
      "type": "p",
      "content": "project(str|None)"
    },
    {
      "type": "li",
      "content": "entity(str|None)"
    },
    {
      "type": "p",
      "content": "entity(str|None)"
    },
    {
      "type": "li",
      "content": "tags(Sequence|None)"
    },
    {
      "type": "p",
      "content": "tags(Sequence|None)"
    },
    {
      "type": "li",
      "content": "group(str|None)"
    },
    {
      "type": "p",
      "content": "group(str|None)"
    },
    {
      "type": "li",
      "content": "name(str|None)"
    },
    {
      "type": "p",
      "content": "name(str|None)"
    },
    {
      "type": "li",
      "content": "notes(str|None)"
    },
    {
      "type": "p",
      "content": "notes(str|None)"
    },
    {
      "type": "li",
      "content": "visualize(bool)"
    },
    {
      "type": "p",
      "content": "visualize(bool)"
    },
    {
      "type": "li",
      "content": "complexity_metrics(bool)"
    },
    {
      "type": "p",
      "content": "complexity_metrics(bool)"
    },
    {
      "type": "li",
      "content": "stream_logs(bool)"
    },
    {
      "type": "p",
      "content": "stream_logs(bool)"
    },
    {
      "type": "p",
      "content": "Flush the tracker and reset the session."
    },
    {
      "type": "li",
      "content": "langchain_asset(Any) – The langchain asset to save."
    },
    {
      "type": "p",
      "content": "langchain_asset(Any) – The langchain asset to save."
    },
    {
      "type": "li",
      "content": "reset(bool) – Whether to reset the session."
    },
    {
      "type": "p",
      "content": "reset(bool) – Whether to reset the session."
    },
    {
      "type": "li",
      "content": "finish(bool) – Whether to finish the run."
    },
    {
      "type": "p",
      "content": "finish(bool) – Whether to finish the run."
    },
    {
      "type": "li",
      "content": "job_type(str|None) – The job type."
    },
    {
      "type": "p",
      "content": "job_type(str|None) – The job type."
    },
    {
      "type": "li",
      "content": "project(str|None) – The project."
    },
    {
      "type": "p",
      "content": "project(str|None) – The project."
    },
    {
      "type": "li",
      "content": "entity(str|None) – The entity."
    },
    {
      "type": "p",
      "content": "entity(str|None) – The entity."
    },
    {
      "type": "li",
      "content": "tags(Sequence|None) – The tags."
    },
    {
      "type": "p",
      "content": "tags(Sequence|None) – The tags."
    },
    {
      "type": "li",
      "content": "group(str|None) – The group."
    },
    {
      "type": "p",
      "content": "group(str|None) – The group."
    },
    {
      "type": "li",
      "content": "name(str|None) – The name."
    },
    {
      "type": "p",
      "content": "name(str|None) – The name."
    },
    {
      "type": "li",
      "content": "notes(str|None) – The notes."
    },
    {
      "type": "p",
      "content": "notes(str|None) – The notes."
    },
    {
      "type": "li",
      "content": "visualize(bool|None) – Whether to visualize."
    },
    {
      "type": "p",
      "content": "visualize(bool|None) – Whether to visualize."
    },
    {
      "type": "li",
      "content": "complexity_metrics(bool|None) – Whether to compute complexity metrics."
    },
    {
      "type": "p",
      "content": "complexity_metrics(bool|None) – Whether to compute complexity metrics."
    },
    {
      "type": "li",
      "content": "Returns– None"
    },
    {
      "type": "p",
      "content": "Returns– None"
    },
    {
      "type": "p",
      "content": "Dict[str,Any]"
    },
    {
      "type": "p",
      "content": "Run on agent action."
    },
    {
      "type": "li",
      "content": "action(AgentAction)"
    },
    {
      "type": "p",
      "content": "action(AgentAction)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when agent ends running."
    },
    {
      "type": "li",
      "content": "finish(AgentFinish)"
    },
    {
      "type": "p",
      "content": "finish(AgentFinish)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when chain ends running."
    },
    {
      "type": "li",
      "content": "outputs(Dict[str,Any])"
    },
    {
      "type": "p",
      "content": "outputs(Dict[str,Any])"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when chain errors."
    },
    {
      "type": "li",
      "content": "error(BaseException)"
    },
    {
      "type": "p",
      "content": "error(BaseException)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when chain starts running."
    },
    {
      "type": "li",
      "content": "serialized(Dict[str,Any])"
    },
    {
      "type": "p",
      "content": "serialized(Dict[str,Any])"
    },
    {
      "type": "li",
      "content": "inputs(Dict[str,Any])"
    },
    {
      "type": "p",
      "content": "inputs(Dict[str,Any])"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when a chat model starts running."
    },
    {
      "type": "p",
      "content": "This method is called for chat models. If you’re implementing a handler for\na non-chat model, you should useon_llm_startinstead."
    },
    {
      "type": "li",
      "content": "serialized(dict[str,Any]) – The serialized chat model."
    },
    {
      "type": "p",
      "content": "serialized(dict[str,Any]) – The serialized chat model."
    },
    {
      "type": "li",
      "content": "messages(list[list[BaseMessage]]) – The messages."
    },
    {
      "type": "p",
      "content": "messages(list[list[BaseMessage]]) – The messages."
    },
    {
      "type": "li",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "p",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "li",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "p",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "li",
      "content": "tags(Optional[list[str]]) – The tags."
    },
    {
      "type": "p",
      "content": "tags(Optional[list[str]]) – The tags."
    },
    {
      "type": "li",
      "content": "metadata(Optional[dict[str,Any]]) – The metadata."
    },
    {
      "type": "p",
      "content": "metadata(Optional[dict[str,Any]]) – The metadata."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "Override to define a handler for a custom event."
    },
    {
      "type": "li",
      "content": "name(str) – The name of the custom event."
    },
    {
      "type": "p",
      "content": "name(str) – The name of the custom event."
    },
    {
      "type": "li",
      "content": "data(Any) – The data for the custom event. Format will match\nthe format specified by the user."
    },
    {
      "type": "p",
      "content": "data(Any) – The data for the custom event. Format will match\nthe format specified by the user."
    },
    {
      "type": "li",
      "content": "run_id(UUID) – The ID of the run."
    },
    {
      "type": "p",
      "content": "run_id(UUID) – The ID of the run."
    },
    {
      "type": "li",
      "content": "tags(Optional[list[str]]) – The tags associated with the custom event\n(includes inherited tags)."
    },
    {
      "type": "p",
      "content": "tags(Optional[list[str]]) – The tags associated with the custom event\n(includes inherited tags)."
    },
    {
      "type": "li",
      "content": "metadata(Optional[dict[str,Any]]) – The metadata associated with the custom event\n(includes inherited metadata)."
    },
    {
      "type": "p",
      "content": "metadata(Optional[dict[str,Any]]) – The metadata associated with the custom event\n(includes inherited metadata)."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Added in version 0.2.15."
    },
    {
      "type": "p",
      "content": "Run when LLM ends running."
    },
    {
      "type": "li",
      "content": "response(LLMResult)"
    },
    {
      "type": "p",
      "content": "response(LLMResult)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when LLM errors."
    },
    {
      "type": "li",
      "content": "error(BaseException)"
    },
    {
      "type": "p",
      "content": "error(BaseException)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when LLM generates a new token."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when LLM starts."
    },
    {
      "type": "li",
      "content": "serialized(Dict[str,Any])"
    },
    {
      "type": "p",
      "content": "serialized(Dict[str,Any])"
    },
    {
      "type": "li",
      "content": "prompts(List[str])"
    },
    {
      "type": "p",
      "content": "prompts(List[str])"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when Retriever ends running."
    },
    {
      "type": "li",
      "content": "documents(Sequence[Document]) – The documents retrieved."
    },
    {
      "type": "p",
      "content": "documents(Sequence[Document]) – The documents retrieved."
    },
    {
      "type": "li",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "p",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "li",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "p",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "Run when Retriever errors."
    },
    {
      "type": "li",
      "content": "error(BaseException) – The error that occurred."
    },
    {
      "type": "p",
      "content": "error(BaseException) – The error that occurred."
    },
    {
      "type": "li",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "p",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "li",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "p",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "Run when the Retriever starts running."
    },
    {
      "type": "li",
      "content": "serialized(dict[str,Any]) – The serialized Retriever."
    },
    {
      "type": "p",
      "content": "serialized(dict[str,Any]) – The serialized Retriever."
    },
    {
      "type": "li",
      "content": "query(str) – The query."
    },
    {
      "type": "p",
      "content": "query(str) – The query."
    },
    {
      "type": "li",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "p",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "li",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "p",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "li",
      "content": "tags(Optional[list[str]]) – The tags."
    },
    {
      "type": "p",
      "content": "tags(Optional[list[str]]) – The tags."
    },
    {
      "type": "li",
      "content": "metadata(Optional[dict[str,Any]]) – The metadata."
    },
    {
      "type": "p",
      "content": "metadata(Optional[dict[str,Any]]) – The metadata."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "Run on a retry event."
    },
    {
      "type": "li",
      "content": "retry_state(RetryCallState) – The retry state."
    },
    {
      "type": "p",
      "content": "retry_state(RetryCallState) – The retry state."
    },
    {
      "type": "li",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "p",
      "content": "run_id(UUID) – The run ID. This is the ID of the current run."
    },
    {
      "type": "li",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "p",
      "content": "parent_run_id(UUID) – The parent run ID. This is the ID of the parent run."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "Run when agent is ending."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when tool ends running."
    },
    {
      "type": "li",
      "content": "output(Any)"
    },
    {
      "type": "p",
      "content": "output(Any)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when tool errors."
    },
    {
      "type": "li",
      "content": "error(BaseException)"
    },
    {
      "type": "p",
      "content": "error(BaseException)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Run when tool starts running."
    },
    {
      "type": "li",
      "content": "serialized(Dict[str,Any])"
    },
    {
      "type": "p",
      "content": "serialized(Dict[str,Any])"
    },
    {
      "type": "li",
      "content": "input_str(str)"
    },
    {
      "type": "p",
      "content": "input_str(str)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Reset the callback metadata."
    },
    {
      "type": "p",
      "content": "Examples using WandbCallbackHandler"
    },
    {
      "type": "li",
      "content": "Weights & Biases"
    },
    {
      "type": "p",
      "content": "Weights & Biases"
    },
    {
      "type": "li",
      "content": "WandbCallbackHandler__init__()flush_tracker()get_custom_callback_meta()on_agent_action()on_agent_finish()on_chain_end()on_chain_error()on_chain_start()on_chat_model_start()on_custom_event()on_llm_end()on_llm_error()on_llm_new_token()on_llm_start()on_retriever_end()on_retriever_error()on_retriever_start()on_retry()on_text()on_tool_end()on_tool_error()on_tool_start()reset_callback_meta()"
    },
    {
      "type": "li",
      "content": "flush_tracker()"
    },
    {
      "type": "li",
      "content": "get_custom_callback_meta()"
    },
    {
      "type": "li",
      "content": "on_agent_action()"
    },
    {
      "type": "li",
      "content": "on_agent_finish()"
    },
    {
      "type": "li",
      "content": "on_chain_end()"
    },
    {
      "type": "li",
      "content": "on_chain_error()"
    },
    {
      "type": "li",
      "content": "on_chain_start()"
    },
    {
      "type": "li",
      "content": "on_chat_model_start()"
    },
    {
      "type": "li",
      "content": "on_custom_event()"
    },
    {
      "type": "li",
      "content": "on_llm_end()"
    },
    {
      "type": "li",
      "content": "on_llm_error()"
    },
    {
      "type": "li",
      "content": "on_llm_new_token()"
    },
    {
      "type": "li",
      "content": "on_llm_start()"
    },
    {
      "type": "li",
      "content": "on_retriever_end()"
    },
    {
      "type": "li",
      "content": "on_retriever_error()"
    },
    {
      "type": "li",
      "content": "on_retriever_start()"
    },
    {
      "type": "li",
      "content": "on_tool_end()"
    },
    {
      "type": "li",
      "content": "on_tool_error()"
    },
    {
      "type": "li",
      "content": "on_tool_start()"
    },
    {
      "type": "li",
      "content": "reset_callback_meta()"
    }
  ],
  "code_examples": [
    "callbacks",
    "always_verbose",
    "ignore_agent",
    "ignore_chain",
    "ignore_chat_model",
    "ignore_custom_event",
    "ignore_llm",
    "ignore_retriever",
    "ignore_retry",
    "raise_error",
    "run_inline",
    "__init__",
    "flush_tracker",
    "get_custom_callback_meta",
    "on_agent_action",
    "on_agent_finish",
    "on_chain_end",
    "on_chain_error",
    "on_chain_start",
    "on_chat_model_start",
    "on_custom_event",
    "on_llm_end",
    "on_llm_error",
    "on_llm_new_token",
    "on_llm_start",
    "on_retriever_end",
    "on_retriever_error",
    "on_retriever_start",
    "on_retry",
    "on_text",
    "on_tool_end",
    "on_tool_error",
    "on_tool_start",
    "reset_callback_meta",
    "on_llm_start",
    "WandbCallbackHandler",
    "__init__()",
    "flush_tracker()",
    "get_custom_callback_meta()",
    "on_agent_action()",
    "on_agent_finish()",
    "on_chain_end()",
    "on_chain_error()",
    "on_chain_start()",
    "on_chat_model_start()",
    "on_custom_event()",
    "on_llm_end()",
    "on_llm_error()",
    "on_llm_new_token()",
    "on_llm_start()",
    "on_retriever_end()",
    "on_retriever_error()",
    "on_retriever_start()",
    "on_retry()",
    "on_text()",
    "on_tool_end()",
    "on_tool_error()",
    "on_tool_start()",
    "reset_callback_meta()"
  ],
  "api_signatures": [
    "classlangchain_community.callbacks.wandb_callback.WandbCallbackHandler(job_type:str|None=None,project:str|None='langchain_callback_demo',entity:str|None=None,tags:Sequence|None=None,group:str|None=None,name:str|None=None,notes:str|None=None,visualize:bool=False,complexity_metrics:bool=False,stream_logs:bool=False,)[source]#",
    "langchain_community.callbacks.wandb_callback.",
    "WandbCallbackHandler",
    "(",
    "job_type:str|None=None",
    "project:str|None='langchain_callback_demo'",
    "entity:str|None=None",
    "tags:Sequence|None=None",
    "group:str|None=None",
    "name:str|None=None",
    "notes:str|None=None",
    "visualize:bool=False",
    "complexity_metrics:bool=False",
    "stream_logs:bool=False",
    ")",
    "__init__(job_type:str|None=None,project:str|None='langchain_callback_demo',entity:str|None=None,tags:Sequence|None=None,group:str|None=None,name:str|None=None,notes:str|None=None,visualize:bool=False,complexity_metrics:bool=False,stream_logs:bool=False,)→None[source]#",
    "__init__",
    "(",
    "job_type:str|None=None",
    "project:str|None='langchain_callback_demo'",
    "entity:str|None=None",
    "tags:Sequence|None=None",
    "group:str|None=None",
    "name:str|None=None",
    "notes:str|None=None",
    "visualize:bool=False",
    "complexity_metrics:bool=False",
    "stream_logs:bool=False",
    ")",
    "→None",
    "→",
    "None",
    "flush_tracker(langchain_asset:Any=None,reset:bool=True,finish:bool=False,job_type:str|None=None,project:str|None=None,entity:str|None=None,tags:Sequence|None=None,group:str|None=None,name:str|None=None,notes:str|None=None,visualize:bool|None=None,complexity_metrics:bool|None=None,)→None[source]#",
    "flush_tracker",
    "(",
    "langchain_asset:Any=None",
    "reset:bool=True",
    "finish:bool=False",
    "job_type:str|None=None",
    "project:str|None=None",
    "entity:str|None=None",
    "tags:Sequence|None=None",
    "group:str|None=None",
    "name:str|None=None",
    "notes:str|None=None",
    "visualize:bool|None=None",
    "complexity_metrics:bool|None=None",
    ")",
    "→None",
    "→",
    "None",
    "get_custom_callback_meta()→Dict[str,Any]#",
    "get_custom_callback_meta",
    "(",
    ")",
    "→Dict[str,Any]",
    "→",
    "Dict[str,Any]",
    "on_agent_action(action:AgentAction,**kwargs:Any,)→Any[source]#",
    "on_agent_action",
    "(",
    "action:AgentAction",
    "**kwargs:Any",
    ")",
    "→Any",
    "→",
    "Any",
    "on_agent_finish(finish:AgentFinish,**kwargs:Any,)→None[source]#",
    "on_agent_finish",
    "(",
    "finish:AgentFinish",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_chain_end(outputs:Dict[str,Any],**kwargs:Any,)→None[source]#",
    "on_chain_end",
    "(",
    "outputs:Dict[str,Any]",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_chain_error(error:BaseException,**kwargs:Any,)→None[source]#",
    "on_chain_error",
    "(",
    "error:BaseException",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_chain_start(serialized:Dict[str,Any],inputs:Dict[str,Any],**kwargs:Any,)→None[source]#",
    "on_chain_start",
    "(",
    "serialized:Dict[str,Any]",
    "inputs:Dict[str,Any]",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_chat_model_start(serialized:dict[str,Any],messages:list[list[BaseMessage]],*,run_id:UUID,parent_run_id:UUID|None=None,tags:list[str]|None=None,metadata:dict[str,Any]|None=None,**kwargs:Any,)→Any#",
    "on_chat_model_start",
    "(",
    "serialized:dict[str,Any]",
    "messages:list[list[BaseMessage]]",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    ")",
    "→Any",
    "→",
    "Any",
    "on_custom_event(name:str,data:Any,*,run_id:UUID,tags:list[str]|None=None,metadata:dict[str,Any]|None=None,**kwargs:Any,)→Any#",
    "on_custom_event",
    "(",
    "name:str",
    "data:Any",
    "*",
    "run_id:UUID",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    ")",
    "→Any",
    "→",
    "Any",
    "on_llm_end(response:LLMResult,**kwargs:Any,)→None[source]#",
    "on_llm_end",
    "(",
    "response:LLMResult",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_llm_error(error:BaseException,**kwargs:Any,)→None[source]#",
    "on_llm_error",
    "(",
    "error:BaseException",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_llm_new_token(token:str,**kwargs:Any,)→None[source]#",
    "on_llm_new_token",
    "(",
    "token:str",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_llm_start(serialized:Dict[str,Any],prompts:List[str],**kwargs:Any,)→None[source]#",
    "on_llm_start",
    "(",
    "serialized:Dict[str,Any]",
    "prompts:List[str]",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_retriever_end(documents:Sequence[Document],*,run_id:UUID,parent_run_id:UUID|None=None,**kwargs:Any,)→Any#",
    "on_retriever_end",
    "(",
    "documents:Sequence[Document]",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "**kwargs:Any",
    ")",
    "→Any",
    "→",
    "Any",
    "on_retriever_error(error:BaseException,*,run_id:UUID,parent_run_id:UUID|None=None,**kwargs:Any,)→Any#",
    "on_retriever_error",
    "(",
    "error:BaseException",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "**kwargs:Any",
    ")",
    "→Any",
    "→",
    "Any",
    "on_retriever_start(serialized:dict[str,Any],query:str,*,run_id:UUID,parent_run_id:UUID|None=None,tags:list[str]|None=None,metadata:dict[str,Any]|None=None,**kwargs:Any,)→Any#",
    "on_retriever_start",
    "(",
    "serialized:dict[str,Any]",
    "query:str",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    ")",
    "→Any",
    "→",
    "Any",
    "on_retry(retry_state:RetryCallState,*,run_id:UUID,parent_run_id:UUID|None=None,**kwargs:Any,)→Any#",
    "on_retry",
    "(",
    "retry_state:RetryCallState",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "**kwargs:Any",
    ")",
    "→Any",
    "→",
    "Any",
    "on_text(text:str,**kwargs:Any,)→None[source]#",
    "on_text",
    "(",
    "text:str",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_tool_end(output:Any,**kwargs:Any,)→None[source]#",
    "on_tool_end",
    "(",
    "output:Any",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_tool_error(error:BaseException,**kwargs:Any,)→None[source]#",
    "on_tool_error",
    "(",
    "error:BaseException",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "on_tool_start(serialized:Dict[str,Any],input_str:str,**kwargs:Any,)→None[source]#",
    "on_tool_start",
    "(",
    "serialized:Dict[str,Any]",
    "input_str:str",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "reset_callback_meta()→None#",
    "reset_callback_meta",
    "(",
    ")",
    "→None",
    "→",
    "None"
  ],
  "parameters": [
    "job_type:str|None=None",
    "project:str|None='langchain_callback_demo'",
    "entity:str|None=None",
    "tags:Sequence|None=None",
    "group:str|None=None",
    "name:str|None=None",
    "notes:str|None=None",
    "visualize:bool=False",
    "complexity_metrics:bool=False",
    "stream_logs:bool=False",
    "job_type:str|None=None",
    "project:str|None='langchain_callback_demo'",
    "entity:str|None=None",
    "tags:Sequence|None=None",
    "group:str|None=None",
    "name:str|None=None",
    "notes:str|None=None",
    "visualize:bool=False",
    "complexity_metrics:bool=False",
    "stream_logs:bool=False",
    "langchain_asset:Any=None",
    "reset:bool=True",
    "finish:bool=False",
    "job_type:str|None=None",
    "project:str|None=None",
    "entity:str|None=None",
    "tags:Sequence|None=None",
    "group:str|None=None",
    "name:str|None=None",
    "notes:str|None=None",
    "visualize:bool|None=None",
    "complexity_metrics:bool|None=None",
    "action:AgentAction",
    "**kwargs:Any",
    "finish:AgentFinish",
    "**kwargs:Any",
    "outputs:Dict[str,Any]",
    "**kwargs:Any",
    "error:BaseException",
    "**kwargs:Any",
    "serialized:Dict[str,Any]",
    "inputs:Dict[str,Any]",
    "**kwargs:Any",
    "serialized:dict[str,Any]",
    "messages:list[list[BaseMessage]]",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    "name:str",
    "data:Any",
    "*",
    "run_id:UUID",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    "response:LLMResult",
    "**kwargs:Any",
    "error:BaseException",
    "**kwargs:Any",
    "token:str",
    "**kwargs:Any",
    "serialized:Dict[str,Any]",
    "prompts:List[str]",
    "**kwargs:Any",
    "documents:Sequence[Document]",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "**kwargs:Any",
    "error:BaseException",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "**kwargs:Any",
    "serialized:dict[str,Any]",
    "query:str",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    "retry_state:RetryCallState",
    "*",
    "run_id:UUID",
    "parent_run_id:UUID|None=None",
    "**kwargs:Any",
    "text:str",
    "**kwargs:Any",
    "output:Any",
    "**kwargs:Any",
    "error:BaseException",
    "**kwargs:Any",
    "serialized:Dict[str,Any]",
    "input_str:str",
    "**kwargs:Any"
  ]
}