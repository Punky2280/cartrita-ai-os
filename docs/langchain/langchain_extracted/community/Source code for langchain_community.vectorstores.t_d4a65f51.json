{
  "url": "https://python.langchain.com/api_reference/_modules/langchain_community/vectorstores/thirdai_neuraldb.html#NeuralDBVectorStore.insert",
  "title": "Source code for langchain_community.vectorstores.thirdai_neuraldb",
  "sections": [
    {
      "type": "li",
      "content": "Module code"
    },
    {
      "type": "li",
      "content": "langchain_community.vectorstores.thirdai_neuraldb"
    }
  ],
  "code_examples": [
    "importimportlibimportosimporttempfilefrompathlibimportPathfromtypingimportTYPE_CHECKING,Any,Dict,Iterable,List,Optional,Tuple,Unionfromlangchain_core.documentsimportDocumentfromlangchain_core.embeddingsimportEmbeddingsfromlangchain_core.vectorstoresimportVectorStorefrompydanticimportConfigDictfromtyping_extensionsimportSelfifTYPE_CHECKING:fromthirdaiimportneural_dbasndb[docs]classNeuralDBVectorStore(VectorStore):\"\"\"Vectorstore that uses ThirdAI's NeuralDB.To use, you should have the ``thirdai[neural_db]`` python package installed.Example:.. code-block:: pythonfrom langchain_community.vectorstores import NeuralDBVectorStorefrom thirdai import neural_db as ndbdb = ndb.NeuralDB()vectorstore = NeuralDBVectorStore(db=db)\"\"\"[docs]def__init__(self,db:\"ndb.NeuralDB\")->None:self.db=dbdb:\"ndb.NeuralDB\"=None#: :meta private:\"\"\"NeuralDB instance\"\"\"model_config=ConfigDict(extra=\"forbid\",)@staticmethoddef_verify_thirdai_library(thirdai_key:Optional[str]=None)->None:try:fromthirdaiimportlicensingimportlib.util.find_spec(\"thirdai.neural_db\")licensing.activate(thirdai_keyoros.getenv(\"THIRDAI_KEY\"))exceptImportError:raiseImportError(\"Could not import thirdai python package and neuraldb dependencies. \"\"Please install it with `pip install thirdai[neural_db]`.\")[docs]@classmethoddeffrom_scratch(cls,thirdai_key:Optional[str]=None,**model_kwargs:Any,)->Self:\"\"\"Create a NeuralDBVectorStore from scratch.To use, set the ``THIRDAI_KEY`` environment variable with your ThirdAIAPI key, or pass ``thirdai_key`` as a named parameter.Example:.. code-block:: pythonfrom langchain_community.vectorstores import NeuralDBVectorStorevectorstore = NeuralDBVectorStore.from_scratch(thirdai_key=\"your-thirdai-key\",)vectorstore.insert([\"/path/to/doc.pdf\",\"/path/to/doc.docx\",\"/path/to/doc.csv\",])documents = vectorstore.similarity_search(\"AI-driven music therapy\")\"\"\"NeuralDBVectorStore._verify_thirdai_library(thirdai_key)fromthirdaiimportneural_dbasndbreturncls(db=ndb.NeuralDB(**model_kwargs))[docs]@classmethoddeffrom_checkpoint(cls,checkpoint:Union[str,Path],thirdai_key:Optional[str]=None,)->Self:\"\"\"Create a NeuralDBVectorStore with a base model from a saved checkpointTo use, set the ``THIRDAI_KEY`` environment variable with your ThirdAIAPI key, or pass ``thirdai_key`` as a named parameter.Example:.. code-block:: pythonfrom langchain_community.vectorstores import NeuralDBVectorStorevectorstore = NeuralDBVectorStore.from_checkpoint(checkpoint=\"/path/to/checkpoint.ndb\",thirdai_key=\"your-thirdai-key\",)vectorstore.insert([\"/path/to/doc.pdf\",\"/path/to/doc.docx\",\"/path/to/doc.csv\",])documents = vectorstore.similarity_search(\"AI-driven music therapy\")\"\"\"NeuralDBVectorStore._verify_thirdai_library(thirdai_key)fromthirdaiimportneural_dbasndbreturncls(db=ndb.NeuralDB.from_checkpoint(checkpoint))[docs]@classmethoddeffrom_texts(cls,texts:List[str],embedding:Embeddings,metadatas:Optional[List[dict]]=None,**kwargs:Any,)->\"NeuralDBVectorStore\":\"\"\"Return VectorStore initialized from texts and embeddings.\"\"\"model_kwargs={}if\"thirdai_key\"inkwargs:model_kwargs[\"thirdai_key\"]=kwargs[\"thirdai_key\"]delkwargs[\"thirdai_key\"]vectorstore=cls.from_scratch(**model_kwargs)vectorstore.add_texts(texts,metadatas,**kwargs)returnvectorstore[docs]defadd_texts(self,texts:Iterable[str],metadatas:Optional[List[dict]]=None,**kwargs:Any,)->List[str]:\"\"\"Run more texts through the embeddings and add to the vectorstore.Args:texts: Iterable of strings to add to the vectorstore.metadatas: Optional list of metadatas associated with the texts.kwargs: vectorstore specific parametersReturns:List of ids from adding the texts into the vectorstore.\"\"\"importpandasaspdfromthirdaiimportneural_dbasndbdf=pd.DataFrame({\"texts\":texts})ifmetadatas:df=pd.concat([df,pd.DataFrame.from_records(metadatas)],axis=1)temp=tempfile.NamedTemporaryFile(\"w\",delete=False,delete_on_close=False)# type: ignore[call-overload,unused-ignore]df.to_csv(temp)source_id=self.insert([ndb.CSV(temp.name)],**kwargs)[0]offset=self.db._savable_state.documents.get_source_by_id(source_id)[1]return[str(offset+i)foriinrange(len(texts))]# type: ignore[arg-type][docs]definsert(self,sources:list[Union[str,\"ndb.Document\"]],train:bool=True,fast_mode:bool=True,**kwargs:Any,)->list[str]:\"\"\"Inserts files / document sources into the vectorstore.Args:train: When True this means that the underlying model in theNeuralDB will undergo unsupervised pretraining on the inserted files.Defaults to True.fast_mode: Much faster insertion with a slight drop in performance.Defaults to True.\"\"\"sources=self._preprocess_sources(sources)returnself.db.insert(sources=sources,train=train,fast_approximation=fast_mode,**kwargs,)def_preprocess_sources(self,sources:list[Union[str,\"ndb.Document\"]])->list[\"ndb.Document\"]:\"\"\"Checks if the provided sources are string paths. If they are, convertto NeuralDB document objects.Args:sources: list of either string paths to PDF, DOCX or CSV files, orNeuralDB document objects.\"\"\"fromthirdaiimportneural_dbasndbifnotsources:returnsourcespreprocessed_sources=[]fordocinsources:ifnotisinstance(doc,str):preprocessed_sources.append(doc)else:ifdoc.lower().endswith(\".pdf\"):preprocessed_sources.append(ndb.PDF(doc))elifdoc.lower().endswith(\".docx\"):preprocessed_sources.append(ndb.DOCX(doc))elifdoc.lower().endswith(\".csv\"):preprocessed_sources.append(ndb.CSV(doc))else:raiseRuntimeError(f\"Could not automatically load{doc}. Only files \"\"with .pdf, .docx, or .csv extensions can be loaded \"\"automatically. For other formats, please use the \"\"appropriate document object from the ThirdAI library.\")returnpreprocessed_sources[docs]defupvote(self,query:str,document_id:Union[int,str])->None:\"\"\"The vectorstore upweights the score of a document for a specific query.This is useful for fine-tuning the vectorstore to user behavior.Args:query: text to associate with `document_id`document_id: id of the document to associate query with.\"\"\"self.db.text_to_result(query,int(document_id))[docs]defupvote_batch(self,query_id_pairs:List[Tuple[str,int]])->None:\"\"\"Given a batch of (query, document id) pairs, the vectorstore upweightsthe scores of the document for the corresponding queries.This is useful for fine-tuning the vectorstore to user behavior.Args:query_id_pairs: list of (query, document id) pairs. For each pair inthis list, the model will upweight the document id for the query.\"\"\"self.db.text_to_result_batch([(query,int(doc_id))forquery,doc_idinquery_id_pairs])[docs]defassociate(self,source:str,target:str)->None:\"\"\"The vectorstore associates a source phrase with a target phrase.When the vectorstore sees the source phrase, it will also consider resultsthat are relevant to the target phrase.Args:source: text to associate to `target`.target: text to associate `source` to.\"\"\"self.db.associate(source,target)[docs]defassociate_batch(self,text_pairs:List[Tuple[str,str]])->None:\"\"\"Given a batch of (source, target) pairs, the vectorstore associateseach source phrase with the corresponding target phrase.Args:text_pairs: list of (source, target) text pairs. For each pair inthis list, the source will be associated with the target.\"\"\"self.db.associate_batch(text_pairs)[docs]defsimilarity_search(self,query:str,k:int=10,**kwargs:Any)->List[Document]:\"\"\"Retrieve {k} contexts with for a given queryArgs:query: Query to submit to the modelk: The max number of context results to retrieve. Defaults to 10.\"\"\"try:references=self.db.search(query=query,top_k=k,**kwargs)return[Document(page_content=ref.text,metadata={\"id\":ref.id,\"upvote_ids\":ref.upvote_ids,\"source\":ref.source,\"metadata\":ref.metadata,\"score\":ref.score,\"context\":ref.context(1),},)forrefinreferences]exceptExceptionase:raiseValueError(f\"Error while retrieving documents:{e}\")frome[docs]defsave(self,path:str)->None:\"\"\"Saves a NeuralDB instance to disk. Can be loaded into memory bycalling NeuralDB.from_checkpoint(path)Args:path: path on disk to save the NeuralDB instance to.\"\"\"self.db.save(path)[docs]classNeuralDBClientVectorStore(VectorStore):\"\"\"Vectorstore that uses ThirdAI's NeuralDB Enterprise Python Client for NeuralDBs.To use, you should have the ``thirdai[neural_db]`` python package installed.Example:.. code-block:: pythonfrom langchain_community.vectorstores import NeuralDBClientVectorStorefrom thirdai.neural_db import ModelBazaar, NeuralDBClientbazaar = ModelBazaar(base_url=\"http://{NEURAL_DB_ENTERPRISE_IP}/api/\")bazaar.log_in(email=\"user@thirdai.com\", password=\"1234\")ndb_client = NeuralDBClient(deployment_identifier=\"user/model-0:user/deployment-0\",base_url=\"http://{NEURAL_DB_ENTERPRISE_IP}/api/\",bazaar=bazaar)vectorstore = NeuralDBClientVectorStore(db=ndb_client)retriever = vectorstore.as_retriever(search_kwargs={'k':5})\"\"\"[docs]def__init__(self,db:\"ndb.NeuralDBClient\")->None:self.db=dbdb:\"ndb.NeuralDBClient\"=None#: :meta private:\"\"\"NeuralDB Client instance\"\"\"model_config=ConfigDict(extra=\"forbid\",)[docs]defsimilarity_search(self,query:str,k:int=10,**kwargs:Any)->List[Document]:\"\"\"Retrieve {k} contexts with for a given queryArgs:query: Query to submit to the modelk: The max number of context results to retrieve. Defaults to 10.\"\"\"try:references=self.db.search(query=query,top_k=k,**kwargs)[\"references\"]return[Document(page_content=ref[\"text\"],metadata={\"id\":ref[\"id\"],\"source\":ref[\"source\"],\"metadata\":ref[\"metadata\"],\"score\":ref[\"source\"],\"context\":ref[\"context\"],},)forrefinreferences]exceptExceptionase:raiseValueError(f\"Error while retrieving documents:{e}\")frome[docs]definsert(self,documents:List[Dict[str,Any]])->Any:\"\"\"Inserts documents into the VectorStore and return the corresponding Sources.Args:documents (List[Dict[str, Any]]): A list of dictionaries thatrepresent documents to be inserted to the VectorStores.The document dictionaries must be in the following format:{\"document_type\": \"DOCUMENT_TYPE\", **kwargs} where \"DOCUMENT_TYPE\"is one of the following:\"PDF\", \"CSV\", \"DOCX\", \"URL\", \"SentenceLevelPDF\", \"SentenceLevelDOCX\",\"Unstructured\", \"InMemoryText\".The kwargs for each document type are shown below:class PDF(Document):document_type: Literal[\"PDF\"]path: strmetadata: Optional[dict[str, Any]] = Noneon_disk: bool = Falseversion: str = \"v1\"chunk_size: int = 100stride: int = 40emphasize_first_words: int = 0ignore_header_footer: bool = Trueignore_nonstandard_orientation: bool = Trueclass CSV(Document):document_type: Literal[\"CSV\"]path: strid_column: Optional[str] = Nonestrong_columns: Optional[List[str]] = Noneweak_columns: Optional[List[str]] = Nonereference_columns: Optional[List[str]] = Nonesave_extra_info: bool = Truemetadata: Optional[dict[str, Any]] = Nonehas_offset: bool = Falseon_disk: bool = Falseclass DOCX(Document):document_type: Literal[\"DOCX\"]path: strmetadata: Optional[dict[str, Any]] = Noneon_disk: bool = Falseclass URL(Document):document_type: Literal[\"URL\"]url: strsave_extra_info: bool = Truetitle_is_strong: bool = Falsemetadata: Optional[dict[str, Any]] = Noneon_disk: bool = Falseclass SentenceLevelPDF(Document):document_type: Literal[\"SentenceLevelPDF\"]path: strmetadata: Optional[dict[str, Any]] = Noneon_disk: bool = Falseclass SentenceLevelDOCX(Document):document_type: Literal[\"SentenceLevelDOCX\"]path: strmetadata: Optional[dict[str, Any]] = Noneon_disk: bool = Falseclass Unstructured(Document):document_type: Literal[\"Unstructured\"]path: strsave_extra_info: bool = Truemetadata: Optional[dict[str, Any]] = Noneon_disk: bool = Falseclass InMemoryText(Document):document_type: Literal[\"InMemoryText\"]name: strtexts: list[str]metadatas: Optional[list[dict[str, Any]]] = Noneglobal_metadata: Optional[dict[str, Any]] = Noneon_disk: bool = FalseFor Document types with the arg \"path\", ensure thatthe path exists on your local machine.\"\"\"returnself.db.insert(documents)[docs]defremove_documents(self,source_ids:list[str])->None:\"\"\"Deletes documents from the VectorStore using source ids.Args:files (List[str]): A list of source ids to delete from the VectorStore.\"\"\"self.db.delete(source_ids)"
  ],
  "api_signatures": [],
  "parameters": []
}