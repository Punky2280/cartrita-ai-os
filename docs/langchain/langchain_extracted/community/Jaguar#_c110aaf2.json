{
  "url": "https://python.langchain.com/api_reference/community/vectorstores/langchain_community.vectorstores.jaguar.Jaguar.html#langchain_community.vectorstores.jaguar.Jaguar.amax_marginal_relevance_search_by_vector",
  "title": "Jaguar#",
  "sections": [
    {
      "type": "li",
      "content": "LangChain Python API Reference"
    },
    {
      "type": "li",
      "content": "langchain-community: 0.3.29"
    },
    {
      "type": "li",
      "content": "vectorstores"
    },
    {
      "type": "p",
      "content": "Jaguar APIvector store."
    },
    {
      "type": "p",
      "content": "Seehttp://www.jaguardb.comSeefserv/jaguar-sdk"
    },
    {
      "type": "p",
      "content": "Access the query embedding object if available."
    },
    {
      "type": "p",
      "content": "__init__(pod, store, vector_index, ...)"
    },
    {
      "type": "p",
      "content": "aadd_documents(documents, **kwargs)"
    },
    {
      "type": "p",
      "content": "Async run more documents through the embeddings and add to the vectorstore."
    },
    {
      "type": "p",
      "content": "aadd_texts(texts[, metadatas, ids])"
    },
    {
      "type": "p",
      "content": "Async run more texts through the embeddings and add to the vectorstore."
    },
    {
      "type": "p",
      "content": "add_documents(documents, **kwargs)"
    },
    {
      "type": "p",
      "content": "Add or update documents in the vectorstore."
    },
    {
      "type": "p",
      "content": "add_texts(texts[, metadatas])"
    },
    {
      "type": "p",
      "content": "Add  texts through the embeddings and add to the vectorstore. :param texts: list of text strings to add to the jaguar vector store. :param metadatas: Optional list of metadatas associated with the texts. [{\"m1\": \"v11\", \"m2\": \"v12\", \"m3\": \"v13\", \"filecol\": \"path_file1.jpg\" },                    {\"m1\": \"v21\", \"m2\": \"v22\", \"m3\": \"v23\", \"filecol\": \"path_file2.jpg\" },                    {\"m1\": \"v31\", \"m2\": \"v32\", \"m3\": \"v33\", \"filecol\": \"path_file3.jpg\" },                    {\"m1\": \"v41\", \"m2\": \"v42\", \"m3\": \"v43\", \"filecol\": \"path_file4.jpg\" }] :param kwargs: vector_index=name_of_vector_index                file_column=name_of_file_column."
    },
    {
      "type": "p",
      "content": "adelete([ids])"
    },
    {
      "type": "p",
      "content": "Async delete by vector ID or other criteria."
    },
    {
      "type": "p",
      "content": "afrom_documents(documents, embedding, **kwargs)"
    },
    {
      "type": "p",
      "content": "Async return VectorStore initialized from documents and embeddings."
    },
    {
      "type": "p",
      "content": "afrom_texts(texts, embedding[, metadatas, ids])"
    },
    {
      "type": "p",
      "content": "Async return VectorStore initialized from texts and embeddings."
    },
    {
      "type": "p",
      "content": "aget_by_ids(ids, /)"
    },
    {
      "type": "p",
      "content": "Async get documents by their IDs."
    },
    {
      "type": "p",
      "content": "amax_marginal_relevance_search(query[, k, ...])"
    },
    {
      "type": "p",
      "content": "Async return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "amax_marginal_relevance_search_by_vector(...)"
    },
    {
      "type": "p",
      "content": "Async return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "as_retriever(**kwargs)"
    },
    {
      "type": "p",
      "content": "Return VectorStoreRetriever initialized from this VectorStore."
    },
    {
      "type": "p",
      "content": "asearch(query, search_type, **kwargs)"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to query using a specified search type."
    },
    {
      "type": "p",
      "content": "asimilarity_search(query[, k])"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to query."
    },
    {
      "type": "p",
      "content": "asimilarity_search_by_vector(embedding[, k])"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to embedding vector."
    },
    {
      "type": "p",
      "content": "asimilarity_search_with_relevance_scores(query)"
    },
    {
      "type": "p",
      "content": "Async return docs and relevance scores in the range [0, 1]."
    },
    {
      "type": "p",
      "content": "asimilarity_search_with_score(*args, **kwargs)"
    },
    {
      "type": "p",
      "content": "Async run similarity search with distance."
    },
    {
      "type": "p",
      "content": "Delete all records in jaguardb Args: No args Returns: None"
    },
    {
      "type": "p",
      "content": "Count records of a store in jaguardb Args: no args Returns: (int) number of records in pod store"
    },
    {
      "type": "p",
      "content": "create(metadata_str, text_size)"
    },
    {
      "type": "p",
      "content": "create the vector store on the backend database :param metadata_str: columns and their types :type metadata_str: str"
    },
    {
      "type": "p",
      "content": "delete(zids, **kwargs)"
    },
    {
      "type": "p",
      "content": "Delete records in jaguardb by a list of zero-ids :param pod: name of a Pod :type pod: str :param ids: a list of zid as string :type ids: List[str]"
    },
    {
      "type": "p",
      "content": "Drop or remove a store in jaguardb Args: no args Returns: None"
    },
    {
      "type": "p",
      "content": "from_documents(documents, embedding, **kwargs)"
    },
    {
      "type": "p",
      "content": "Return VectorStore initialized from documents and embeddings."
    },
    {
      "type": "p",
      "content": "from_texts(texts, embedding, url, pod, ...)"
    },
    {
      "type": "p",
      "content": "Return VectorStore initialized from texts and embeddings."
    },
    {
      "type": "p",
      "content": "get_by_ids(ids, /)"
    },
    {
      "type": "p",
      "content": "Get documents by their IDs."
    },
    {
      "type": "p",
      "content": "is_anomalous(query, **kwargs)"
    },
    {
      "type": "p",
      "content": "Detect if given text is anomalous from the dataset :param query: Text to detect if it is anomaly"
    },
    {
      "type": "p",
      "content": "login([jaguar_api_key])"
    },
    {
      "type": "p",
      "content": "login to jaguardb server with a jaguar_api_key or let self._jag find a key :param pod: name of a Pod :type pod: str :param store: name of a vector store :type store: str :param optional jaguar_api_key: API key of user to jaguardb server :type optional jaguar_api_key: str"
    },
    {
      "type": "p",
      "content": "Logout to cleanup resources Args: no args Returns: None"
    },
    {
      "type": "p",
      "content": "max_marginal_relevance_search(query[, k, ...])"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "max_marginal_relevance_search_by_vector(...)"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "run(query[, withFile])"
    },
    {
      "type": "p",
      "content": "Run any query statement in jaguardb :param query: query statement to jaguardb :type query: str"
    },
    {
      "type": "p",
      "content": "search(query, search_type, **kwargs)"
    },
    {
      "type": "p",
      "content": "Return docs most similar to query using a specified search type."
    },
    {
      "type": "p",
      "content": "similarity_search(query[, k, where, metadatas])"
    },
    {
      "type": "p",
      "content": "Return Jaguar documents most similar to query, along with scores. :param query: Text to look up documents similar to. :param k: Number of Documents to return. Defaults to 5. :param where: the where clause in select similarity. For example a               where can be \"rating > 3.0 and (state = 'NV' or state = 'CA')\"."
    },
    {
      "type": "p",
      "content": "similarity_search_by_vector(embedding[, k])"
    },
    {
      "type": "p",
      "content": "Return docs most similar to embedding vector."
    },
    {
      "type": "p",
      "content": "similarity_search_with_relevance_scores(query)"
    },
    {
      "type": "p",
      "content": "Return docs and relevance scores in the range [0, 1]."
    },
    {
      "type": "p",
      "content": "similarity_search_with_score(query[, k, ...])"
    },
    {
      "type": "p",
      "content": "Return Jaguar documents most similar to query, along with scores. :param query: Text to look up documents similar to. :param k: Number of Documents to return. Defaults to 3. :param lambda_val: lexical match parameter for hybrid search. :param where: the where clause in select similarity. For example a               where can be \"rating > 3.0 and (state = 'NV' or state = 'CA')\" :param args: extra options passed to select similarity :param kwargs: vector_index=vcol, vector_type=cosine_fraction_float."
    },
    {
      "type": "li",
      "content": "vector_index(str)"
    },
    {
      "type": "p",
      "content": "vector_index(str)"
    },
    {
      "type": "li",
      "content": "vector_type(str)"
    },
    {
      "type": "p",
      "content": "vector_type(str)"
    },
    {
      "type": "li",
      "content": "vector_dimension(int)"
    },
    {
      "type": "p",
      "content": "vector_dimension(int)"
    },
    {
      "type": "li",
      "content": "embedding(Embeddings)"
    },
    {
      "type": "p",
      "content": "embedding(Embeddings)"
    },
    {
      "type": "li",
      "content": "vector_index(str)"
    },
    {
      "type": "p",
      "content": "vector_index(str)"
    },
    {
      "type": "li",
      "content": "vector_type(str)"
    },
    {
      "type": "p",
      "content": "vector_type(str)"
    },
    {
      "type": "li",
      "content": "vector_dimension(int)"
    },
    {
      "type": "p",
      "content": "vector_dimension(int)"
    },
    {
      "type": "li",
      "content": "embedding(Embeddings)"
    },
    {
      "type": "p",
      "content": "embedding(Embeddings)"
    },
    {
      "type": "p",
      "content": "Async run more documents through the embeddings and add to the vectorstore."
    },
    {
      "type": "li",
      "content": "documents(list[Document]) – Documents to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "documents(list[Document]) – Documents to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "List of IDs of the added texts."
    },
    {
      "type": "p",
      "content": "Async run more texts through the embeddings and add to the vectorstore."
    },
    {
      "type": "li",
      "content": "texts(Iterable[str]) – Iterable of strings to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "texts(Iterable[str]) – Iterable of strings to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "metadatas(Optional[list[dict]]) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "p",
      "content": "metadatas(Optional[list[dict]]) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "li",
      "content": "ids(Optional[list[str]]) – Optional list"
    },
    {
      "type": "p",
      "content": "ids(Optional[list[str]]) – Optional list"
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – vectorstore specific parameters."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – vectorstore specific parameters."
    },
    {
      "type": "p",
      "content": "List of ids from adding the texts into the vectorstore."
    },
    {
      "type": "li",
      "content": "ValueError– If the number of metadatas does not match the number of texts."
    },
    {
      "type": "p",
      "content": "ValueError– If the number of metadatas does not match the number of texts."
    },
    {
      "type": "li",
      "content": "ValueError– If the number of ids does not match the number of texts."
    },
    {
      "type": "p",
      "content": "ValueError– If the number of ids does not match the number of texts."
    },
    {
      "type": "p",
      "content": "Add or update documents in the vectorstore."
    },
    {
      "type": "li",
      "content": "documents(list[Document]) – Documents to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "documents(list[Document]) – Documents to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments.\nif kwargs contains ids and documents contain ids,\nthe ids in the kwargs will receive precedence."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments.\nif kwargs contains ids and documents contain ids,\nthe ids in the kwargs will receive precedence."
    },
    {
      "type": "p",
      "content": "List of IDs of the added texts."
    },
    {
      "type": "p",
      "content": "Add  texts through the embeddings and add to the vectorstore.\n:param texts: list of text strings to add to the jaguar vector store.\n:param metadatas: Optional list of metadatas associated with the texts."
    },
    {
      "type": "p",
      "content": "{“m1”: “v21”, “m2”: “v22”, “m3”: “v23”, “filecol”: “path_file2.jpg” },\n{“m1”: “v31”, “m2”: “v32”, “m3”: “v33”, “filecol”: “path_file3.jpg” },\n{“m1”: “v41”, “m2”: “v42”, “m3”: “v43”, “filecol”: “path_file4.jpg” }]"
    },
    {
      "type": "li",
      "content": "kwargs(Any) – vector_index=name_of_vector_index\nfile_column=name_of_file_column"
    },
    {
      "type": "p",
      "content": "kwargs(Any) – vector_index=name_of_vector_index\nfile_column=name_of_file_column"
    },
    {
      "type": "li",
      "content": "texts(List[str])"
    },
    {
      "type": "p",
      "content": "texts(List[str])"
    },
    {
      "type": "li",
      "content": "metadatas(List[dict]|None)"
    },
    {
      "type": "p",
      "content": "metadatas(List[dict]|None)"
    },
    {
      "type": "p",
      "content": "List of ids from adding the texts into the vectorstore"
    },
    {
      "type": "p",
      "content": "Async delete by vector ID or other criteria."
    },
    {
      "type": "li",
      "content": "ids(list[str]|None) – List of ids to delete. If None, delete all. Default is None."
    },
    {
      "type": "p",
      "content": "ids(list[str]|None) – List of ids to delete. If None, delete all. Default is None."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Other keyword arguments that subclasses might use."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Other keyword arguments that subclasses might use."
    },
    {
      "type": "p",
      "content": "True if deletion is successful,\nFalse otherwise, None if not implemented."
    },
    {
      "type": "p",
      "content": "Optional[bool]"
    },
    {
      "type": "p",
      "content": "Async return VectorStore initialized from documents and embeddings."
    },
    {
      "type": "li",
      "content": "documents(list[Document]) – List of Documents to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "documents(list[Document]) – List of Documents to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "VectorStore initialized from documents and embeddings."
    },
    {
      "type": "p",
      "content": "VectorStore"
    },
    {
      "type": "p",
      "content": "Async return VectorStore initialized from texts and embeddings."
    },
    {
      "type": "li",
      "content": "texts(list[str]) – Texts to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "texts(list[str]) – Texts to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "li",
      "content": "metadatas(list[dict]|None) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "p",
      "content": "metadatas(list[dict]|None) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "li",
      "content": "ids(list[str]|None) – Optional list of IDs associated with the texts."
    },
    {
      "type": "p",
      "content": "ids(list[str]|None) – Optional list of IDs associated with the texts."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "VectorStore initialized from texts and embeddings."
    },
    {
      "type": "p",
      "content": "VectorStore"
    },
    {
      "type": "p",
      "content": "Async get documents by their IDs."
    },
    {
      "type": "p",
      "content": "The returned documents are expected to have the ID field set to the ID of the\ndocument in the vector store."
    },
    {
      "type": "p",
      "content": "Fewer documents may be returned than requested if some IDs are not found or\nif there are duplicated IDs."
    },
    {
      "type": "p",
      "content": "Users should not assume that the order of the returned documents matches\nthe order of the input IDs. Instead, users should rely on the ID field of the\nreturned documents."
    },
    {
      "type": "p",
      "content": "This method shouldNOTraise exceptions if no documents are found for\nsome IDs."
    },
    {
      "type": "p",
      "content": "ids(Sequence[str]) – List of ids to retrieve."
    },
    {
      "type": "p",
      "content": "List of Documents."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Added in version 0.2.11."
    },
    {
      "type": "p",
      "content": "Async return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "Maximal marginal relevance optimizes for similarity to query AND diversity\namong selected documents."
    },
    {
      "type": "li",
      "content": "query(str) – Text to look up documents similar to."
    },
    {
      "type": "p",
      "content": "query(str) – Text to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm.\nDefault is 20."
    },
    {
      "type": "p",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm.\nDefault is 20."
    },
    {
      "type": "li",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "p",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents selected by maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Async return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "Maximal marginal relevance optimizes for similarity to query AND diversity\namong selected documents."
    },
    {
      "type": "li",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "p",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm.\nDefault is 20."
    },
    {
      "type": "p",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm.\nDefault is 20."
    },
    {
      "type": "li",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "p",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents selected by maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Return VectorStoreRetriever initialized from this VectorStore."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) –Keyword arguments to pass to the search function.\nCan include:\nsearch_type (Optional[str]): Defines the type of search thatthe Retriever should perform.\nCan be “similarity” (default), “mmr”, or\n“similarity_score_threshold”.search_kwargs (Optional[Dict]): Keyword arguments to pass to thesearch function. Can include things like:k: Amount of documents to return (Default: 4)\nscore_threshold: Minimum relevance thresholdfor similarity_score_thresholdfetch_k: Amount of documents to pass to MMR algorithm(Default: 20)lambda_mult: Diversity of results returned by MMR;1 for minimum diversity and 0 for maximum. (Default: 0.5)filter: Filter by document metadata"
    },
    {
      "type": "p",
      "content": "Keyword arguments to pass to the search function.\nCan include:\nsearch_type (Optional[str]): Defines the type of search that"
    },
    {
      "type": "p",
      "content": "the Retriever should perform.\nCan be “similarity” (default), “mmr”, or\n“similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "k: Amount of documents to return (Default: 4)\nscore_threshold: Minimum relevance threshold"
    },
    {
      "type": "p",
      "content": "for similarity_score_threshold"
    },
    {
      "type": "p",
      "content": "(Default: 20)"
    },
    {
      "type": "p",
      "content": "1 for minimum diversity and 0 for maximum. (Default: 0.5)"
    },
    {
      "type": "p",
      "content": "filter: Filter by document metadata"
    },
    {
      "type": "p",
      "content": "Retriever class for VectorStore."
    },
    {
      "type": "p",
      "content": "VectorStoreRetriever"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to query using a specified search type."
    },
    {
      "type": "li",
      "content": "query(str) – Input text."
    },
    {
      "type": "p",
      "content": "query(str) – Input text."
    },
    {
      "type": "li",
      "content": "search_type(str) – Type of search to perform. Can be “similarity”,\n“mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "search_type(str) – Type of search to perform. Can be “similarity”,\n“mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query."
    },
    {
      "type": "p",
      "content": "ValueError– If search_type is not one of “similarity”,\n    “mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to query."
    },
    {
      "type": "li",
      "content": "query(str) – Input text."
    },
    {
      "type": "p",
      "content": "query(str) – Input text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to embedding vector."
    },
    {
      "type": "li",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "p",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query vector."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Async return docs and relevance scores in the range [0, 1]."
    },
    {
      "type": "p",
      "content": "0 is dissimilar, 1 is most similar."
    },
    {
      "type": "li",
      "content": "query(str) – Input text."
    },
    {
      "type": "p",
      "content": "query(str) – Input text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) –kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 tofilter the resulting set of retrieved docs"
    },
    {
      "type": "p",
      "content": "**kwargs(Any) –kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 tofilter the resulting set of retrieved docs"
    },
    {
      "type": "p",
      "content": "kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 to"
    },
    {
      "type": "p",
      "content": "filter the resulting set of retrieved docs"
    },
    {
      "type": "p",
      "content": "List of Tuples of (doc, similarity_score)"
    },
    {
      "type": "p",
      "content": "list[tuple[Document, float]]"
    },
    {
      "type": "p",
      "content": "Async run similarity search with distance."
    },
    {
      "type": "li",
      "content": "*args(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "*args(Any) – Arguments to pass to the search method."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Tuples of (doc, similarity_score)."
    },
    {
      "type": "p",
      "content": "list[tuple[Document, float]]"
    },
    {
      "type": "p",
      "content": "Delete all records in jaguardb\nArgs: No args\nReturns: None"
    },
    {
      "type": "p",
      "content": "Count records of a store in jaguardb\nArgs: no args\nReturns: (int) number of records in pod store"
    },
    {
      "type": "p",
      "content": "create the vector store on the backend database\n:param metadata_str: columns and their types\n:type metadata_str: str"
    },
    {
      "type": "p",
      "content": "True if successful; False if not successful"
    },
    {
      "type": "li",
      "content": "metadata_str(str)"
    },
    {
      "type": "p",
      "content": "metadata_str(str)"
    },
    {
      "type": "li",
      "content": "text_size(int)"
    },
    {
      "type": "p",
      "content": "text_size(int)"
    },
    {
      "type": "p",
      "content": "Delete records in jaguardb by a list of zero-ids\n:param pod: name of a Pod\n:type pod: str\n:param ids: a list of zid as string\n:type ids: List[str]"
    },
    {
      "type": "p",
      "content": "Do not return anything"
    },
    {
      "type": "li",
      "content": "zids(List[str])"
    },
    {
      "type": "p",
      "content": "zids(List[str])"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "Drop or remove a store in jaguardb\nArgs: no args\nReturns: None"
    },
    {
      "type": "p",
      "content": "Return VectorStore initialized from documents and embeddings."
    },
    {
      "type": "li",
      "content": "documents(list[Document]) – List of Documents to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "documents(list[Document]) – List of Documents to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "VectorStore initialized from documents and embeddings."
    },
    {
      "type": "p",
      "content": "VectorStore"
    },
    {
      "type": "p",
      "content": "Return VectorStore initialized from texts and embeddings."
    },
    {
      "type": "li",
      "content": "texts(List[str]) – Texts to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "texts(List[str]) – Texts to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "li",
      "content": "metadatas(List[dict]|None) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "p",
      "content": "metadatas(List[dict]|None) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "li",
      "content": "ids– Optional list of IDs associated with the texts."
    },
    {
      "type": "p",
      "content": "ids– Optional list of IDs associated with the texts."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "li",
      "content": "vector_index(str)"
    },
    {
      "type": "p",
      "content": "vector_index(str)"
    },
    {
      "type": "li",
      "content": "vector_type(str)"
    },
    {
      "type": "p",
      "content": "vector_type(str)"
    },
    {
      "type": "li",
      "content": "vector_dimension(int)"
    },
    {
      "type": "p",
      "content": "vector_dimension(int)"
    },
    {
      "type": "li",
      "content": "jaguar_api_key(str|None)"
    },
    {
      "type": "p",
      "content": "jaguar_api_key(str|None)"
    },
    {
      "type": "p",
      "content": "VectorStore initialized from texts and embeddings."
    },
    {
      "type": "p",
      "content": "VectorStore"
    },
    {
      "type": "p",
      "content": "Get documents by their IDs."
    },
    {
      "type": "p",
      "content": "The returned documents are expected to have the ID field set to the ID of the\ndocument in the vector store."
    },
    {
      "type": "p",
      "content": "Fewer documents may be returned than requested if some IDs are not found or\nif there are duplicated IDs."
    },
    {
      "type": "p",
      "content": "Users should not assume that the order of the returned documents matches\nthe order of the input IDs. Instead, users should rely on the ID field of the\nreturned documents."
    },
    {
      "type": "p",
      "content": "This method shouldNOTraise exceptions if no documents are found for\nsome IDs."
    },
    {
      "type": "p",
      "content": "ids(Sequence[str]) – List of ids to retrieve."
    },
    {
      "type": "p",
      "content": "List of Documents."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Added in version 0.2.11."
    },
    {
      "type": "p",
      "content": "Detect if given text is anomalous from the dataset\n:param query: Text to detect if it is anomaly"
    },
    {
      "type": "p",
      "content": "True or False"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "login to jaguardb server with a jaguar_api_key or let self._jag find a key\n:param pod: name of a Pod\n:type pod: str\n:param store: name of a vector store\n:type store: str\n:param optional jaguar_api_key: API key of user to jaguardb server\n:type optional jaguar_api_key: str"
    },
    {
      "type": "p",
      "content": "True if successful; False if not successful"
    },
    {
      "type": "p",
      "content": "jaguar_api_key(str|None)"
    },
    {
      "type": "p",
      "content": "Logout to cleanup resources\nArgs: no args\nReturns: None"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "Maximal marginal relevance optimizes for similarity to query AND diversity\namong selected documents."
    },
    {
      "type": "li",
      "content": "query(str) – Text to look up documents similar to."
    },
    {
      "type": "p",
      "content": "query(str) – Text to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm.\nDefault is 20."
    },
    {
      "type": "p",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm.\nDefault is 20."
    },
    {
      "type": "li",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "p",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents selected by maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "Maximal marginal relevance optimizes for similarity to query AND diversity\namong selected documents."
    },
    {
      "type": "li",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "p",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm.\nDefault is 20."
    },
    {
      "type": "p",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm.\nDefault is 20."
    },
    {
      "type": "li",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "p",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents selected by maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Run any query statement in jaguardb\n:param query: query statement to jaguardb\n:type query: str"
    },
    {
      "type": "p",
      "content": "None for invalid token, or\njson result string"
    },
    {
      "type": "li",
      "content": "withFile(bool)"
    },
    {
      "type": "p",
      "content": "withFile(bool)"
    },
    {
      "type": "p",
      "content": "Return docs most similar to query using a specified search type."
    },
    {
      "type": "li",
      "content": "query(str) – Input text"
    },
    {
      "type": "p",
      "content": "query(str) – Input text"
    },
    {
      "type": "li",
      "content": "search_type(str) – Type of search to perform. Can be “similarity”,\n“mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "search_type(str) – Type of search to perform. Can be “similarity”,\n“mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query."
    },
    {
      "type": "p",
      "content": "ValueError– If search_type is not one of “similarity”,\n    “mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Return Jaguar documents most similar to query, along with scores.\n:param query: Text to look up documents similar to.\n:param k: Number of Documents to return. Defaults to 5.\n:param where: the where clause in select similarity. For example a"
    },
    {
      "type": "p",
      "content": "where can be “rating > 3.0 and (state = ‘NV’ or state = ‘CA’)”"
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query"
    },
    {
      "type": "li",
      "content": "where(str|None)"
    },
    {
      "type": "p",
      "content": "where(str|None)"
    },
    {
      "type": "li",
      "content": "metadatas(List[str]|None)"
    },
    {
      "type": "p",
      "content": "metadatas(List[str]|None)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List[Document]"
    },
    {
      "type": "p",
      "content": "Return docs most similar to embedding vector."
    },
    {
      "type": "li",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "p",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query vector."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Return docs and relevance scores in the range [0, 1]."
    },
    {
      "type": "p",
      "content": "0 is dissimilar, 1 is most similar."
    },
    {
      "type": "li",
      "content": "query(str) – Input text."
    },
    {
      "type": "p",
      "content": "query(str) – Input text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) –kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 tofilter the resulting set of retrieved docs."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) –kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 tofilter the resulting set of retrieved docs."
    },
    {
      "type": "p",
      "content": "kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 to"
    },
    {
      "type": "p",
      "content": "filter the resulting set of retrieved docs."
    },
    {
      "type": "p",
      "content": "List of Tuples of (doc, similarity_score)."
    },
    {
      "type": "p",
      "content": "list[tuple[Document, float]]"
    },
    {
      "type": "p",
      "content": "Return Jaguar documents most similar to query, along with scores.\n:param query: Text to look up documents similar to.\n:param k: Number of Documents to return. Defaults to 3.\n:param lambda_val: lexical match parameter for hybrid search.\n:param where: the where clause in select similarity. For example a"
    },
    {
      "type": "p",
      "content": "where can be “rating > 3.0 and (state = ‘NV’ or state = ‘CA’)”"
    },
    {
      "type": "li",
      "content": "args(str|None) – extra options passed to select similarity"
    },
    {
      "type": "p",
      "content": "args(str|None) – extra options passed to select similarity"
    },
    {
      "type": "li",
      "content": "kwargs(Any) – vector_index=vcol, vector_type=cosine_fraction_float"
    },
    {
      "type": "p",
      "content": "kwargs(Any) – vector_index=vcol, vector_type=cosine_fraction_float"
    },
    {
      "type": "li",
      "content": "fetch_k(int)"
    },
    {
      "type": "p",
      "content": "fetch_k(int)"
    },
    {
      "type": "li",
      "content": "where(str|None)"
    },
    {
      "type": "p",
      "content": "where(str|None)"
    },
    {
      "type": "li",
      "content": "metadatas(List[str]|None)"
    },
    {
      "type": "p",
      "content": "metadatas(List[str]|None)"
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query and score for each.\nList of Tuples of (doc, similarity_score):[ (doc, score), (doc, score), …]"
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query and score for each.\nList of Tuples of (doc, similarity_score):"
    },
    {
      "type": "p",
      "content": "[ (doc, score), (doc, score), …]"
    },
    {
      "type": "p",
      "content": "List[Tuple[Document, float]]"
    },
    {
      "type": "p",
      "content": "Examples using Jaguar"
    },
    {
      "type": "li",
      "content": "Jaguar Vector Database"
    },
    {
      "type": "p",
      "content": "Jaguar Vector Database"
    },
    {
      "type": "li",
      "content": "JaguarDB Vector Database"
    },
    {
      "type": "p",
      "content": "JaguarDB Vector Database"
    },
    {
      "type": "li",
      "content": "Jaguar__init__()aadd_documents()aadd_texts()add_documents()add_texts()adelete()afrom_documents()afrom_texts()aget_by_ids()amax_marginal_relevance_search()amax_marginal_relevance_search_by_vector()as_retriever()asearch()asimilarity_search()asimilarity_search_by_vector()asimilarity_search_with_relevance_scores()asimilarity_search_with_score()clear()count()create()delete()drop()from_documents()from_texts()get_by_ids()is_anomalous()login()logout()max_marginal_relevance_search()max_marginal_relevance_search_by_vector()prt()run()search()similarity_search()similarity_search_by_vector()similarity_search_with_relevance_scores()similarity_search_with_score()"
    },
    {
      "type": "li",
      "content": "aadd_documents()"
    },
    {
      "type": "li",
      "content": "aadd_texts()"
    },
    {
      "type": "li",
      "content": "add_documents()"
    },
    {
      "type": "li",
      "content": "add_texts()"
    },
    {
      "type": "li",
      "content": "afrom_documents()"
    },
    {
      "type": "li",
      "content": "afrom_texts()"
    },
    {
      "type": "li",
      "content": "aget_by_ids()"
    },
    {
      "type": "li",
      "content": "amax_marginal_relevance_search()"
    },
    {
      "type": "li",
      "content": "amax_marginal_relevance_search_by_vector()"
    },
    {
      "type": "li",
      "content": "as_retriever()"
    },
    {
      "type": "li",
      "content": "asimilarity_search()"
    },
    {
      "type": "li",
      "content": "asimilarity_search_by_vector()"
    },
    {
      "type": "li",
      "content": "asimilarity_search_with_relevance_scores()"
    },
    {
      "type": "li",
      "content": "asimilarity_search_with_score()"
    },
    {
      "type": "li",
      "content": "from_documents()"
    },
    {
      "type": "li",
      "content": "from_texts()"
    },
    {
      "type": "li",
      "content": "get_by_ids()"
    },
    {
      "type": "li",
      "content": "is_anomalous()"
    },
    {
      "type": "li",
      "content": "max_marginal_relevance_search()"
    },
    {
      "type": "li",
      "content": "max_marginal_relevance_search_by_vector()"
    },
    {
      "type": "li",
      "content": "similarity_search()"
    },
    {
      "type": "li",
      "content": "similarity_search_by_vector()"
    },
    {
      "type": "li",
      "content": "similarity_search_with_relevance_scores()"
    },
    {
      "type": "li",
      "content": "similarity_search_with_score()"
    }
  ],
  "code_examples": [
    "vectorstores",
    "fromlangchain_community.vectorstores.jaguarimportJaguarvectorstore=Jaguar(pod='vdb',store='mystore',vector_index='v',vector_type='cosine_fraction_float',vector_dimension=1536,url='http://192.168.8.88:8080/fwww/',embedding=openai_model)",
    "embeddings",
    "__init__",
    "aadd_documents",
    "aadd_texts",
    "add_documents",
    "add_texts",
    "adelete",
    "afrom_documents",
    "afrom_texts",
    "aget_by_ids",
    "amax_marginal_relevance_search",
    "amax_marginal_relevance_search_by_vector",
    "as_retriever",
    "asearch",
    "asimilarity_search",
    "asimilarity_search_by_vector",
    "asimilarity_search_with_relevance_scores",
    "asimilarity_search_with_score",
    "clear",
    "count",
    "create",
    "delete",
    "drop",
    "from_documents",
    "from_texts",
    "get_by_ids",
    "is_anomalous",
    "login",
    "logout",
    "max_marginal_relevance_search",
    "max_marginal_relevance_search_by_vector",
    "prt",
    "run",
    "search",
    "similarity_search",
    "similarity_search_by_vector",
    "similarity_search_with_relevance_scores",
    "similarity_search_with_score",
    "# Retrieve more documents with higher diversity# Useful if your dataset has many similar documentsdocsearch.as_retriever(search_type=\"mmr\",search_kwargs={\"k\":6,\"lambda_mult\":0.25})# Fetch more documents for the MMR algorithm to consider# But only return the top 5docsearch.as_retriever(search_type=\"mmr\",search_kwargs={\"k\":5,\"fetch_k\":50})# Only retrieve documents that have a relevance score# Above a certain thresholddocsearch.as_retriever(search_type=\"similarity_score_threshold\",search_kwargs={\"score_threshold\":0.8},)# Only get the single most similar document from the datasetdocsearch.as_retriever(search_kwargs={\"k\":1})# Use a filter to only retrieve documents from a specific paperdocsearch.as_retriever(search_kwargs={\"filter\":{\"paper_title\":\"GPT-4 Technical Report\"}})",
    "Jaguar",
    "__init__()",
    "aadd_documents()",
    "aadd_texts()",
    "add_documents()",
    "add_texts()",
    "adelete()",
    "afrom_documents()",
    "afrom_texts()",
    "aget_by_ids()",
    "amax_marginal_relevance_search()",
    "amax_marginal_relevance_search_by_vector()",
    "as_retriever()",
    "asearch()",
    "asimilarity_search()",
    "asimilarity_search_by_vector()",
    "asimilarity_search_with_relevance_scores()",
    "asimilarity_search_with_score()",
    "clear()",
    "count()",
    "create()",
    "delete()",
    "drop()",
    "from_documents()",
    "from_texts()",
    "get_by_ids()",
    "is_anomalous()",
    "login()",
    "logout()",
    "max_marginal_relevance_search()",
    "max_marginal_relevance_search_by_vector()",
    "prt()",
    "run()",
    "search()",
    "similarity_search()",
    "similarity_search_by_vector()",
    "similarity_search_with_relevance_scores()",
    "similarity_search_with_score()"
  ],
  "api_signatures": [
    "classlangchain_community.vectorstores.jaguar.Jaguar(pod:str,store:str,vector_index:str,vector_type:str,vector_dimension:int,url:str,embedding:Embeddings,)[source]#",
    "langchain_community.vectorstores.jaguar.",
    "Jaguar",
    "(",
    "pod:str",
    "store:str",
    "vector_index:str",
    "vector_type:str",
    "vector_dimension:int",
    "url:str",
    "embedding:Embeddings",
    ")",
    "__init__(pod:str,store:str,vector_index:str,vector_type:str,vector_dimension:int,url:str,embedding:Embeddings,)[source]#",
    "__init__",
    "(",
    "pod:str",
    "store:str",
    "vector_index:str",
    "vector_type:str",
    "vector_dimension:int",
    "url:str",
    "embedding:Embeddings",
    ")",
    "asyncaadd_documents(documents:list[Document],**kwargs:Any,)→list[str]#",
    "aadd_documents",
    "(",
    "documents:list[Document]",
    "**kwargs:Any",
    ")",
    "→list[str]",
    "→",
    "list[str]",
    "asyncaadd_texts(texts:Iterable[str],metadatas:list[dict]|None=None,*,ids:list[str]|None=None,**kwargs:Any,)→list[str]#",
    "aadd_texts",
    "(",
    "texts:Iterable[str]",
    "metadatas:list[dict]|None=None",
    "*",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    ")",
    "→list[str]",
    "→",
    "list[str]",
    "add_documents(documents:list[Document],**kwargs:Any,)→list[str]#",
    "add_documents",
    "(",
    "documents:list[Document]",
    "**kwargs:Any",
    ")",
    "→list[str]",
    "→",
    "list[str]",
    "add_texts(texts:List[str],metadatas:List[dict]|None=None,**kwargs:Any,)→List[str][source]#",
    "add_texts",
    "(",
    "texts:List[str]",
    "metadatas:List[dict]|None=None",
    "**kwargs:Any",
    ")",
    "→List[str]",
    "→",
    "List[str]",
    "asyncadelete(ids:list[str]|None=None,**kwargs:Any,)→bool|None#",
    "adelete",
    "(",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    ")",
    "→bool|None",
    "→",
    "bool|None",
    "asyncclassmethodafrom_documents(documents:list[Document],embedding:Embeddings,**kwargs:Any,)→Self#",
    "afrom_documents",
    "(",
    "documents:list[Document]",
    "embedding:Embeddings",
    "**kwargs:Any",
    ")",
    "→Self",
    "→",
    "Self",
    "asyncclassmethodafrom_texts(texts:list[str],embedding:Embeddings,metadatas:list[dict]|None=None,*,ids:list[str]|None=None,**kwargs:Any,)→Self#",
    "afrom_texts",
    "(",
    "texts:list[str]",
    "embedding:Embeddings",
    "metadatas:list[dict]|None=None",
    "*",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    ")",
    "→Self",
    "→",
    "Self",
    "asyncaget_by_ids(ids:Sequence[str],/)→list[Document]#",
    "aget_by_ids",
    "(",
    "ids:Sequence[str]",
    "/",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncamax_marginal_relevance_search(query:str,k:int=4,fetch_k:int=20,lambda_mult:float=0.5,**kwargs:Any,)→list[Document]#",
    "amax_marginal_relevance_search",
    "(",
    "query:str",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncamax_marginal_relevance_search_by_vector(embedding:list[float],k:int=4,fetch_k:int=20,lambda_mult:float=0.5,**kwargs:Any,)→list[Document]#",
    "amax_marginal_relevance_search_by_vector",
    "(",
    "embedding:list[float]",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "as_retriever(**kwargs:Any,)→VectorStoreRetriever#",
    "as_retriever",
    "(",
    "**kwargs:Any",
    ")",
    "→VectorStoreRetriever",
    "→",
    "VectorStoreRetriever",
    "asyncasearch(query:str,search_type:str,**kwargs:Any,)→list[Document]#",
    "asearch",
    "(",
    "query:str",
    "search_type:str",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncasimilarity_search(query:str,k:int=4,**kwargs:Any,)→list[Document]#",
    "asimilarity_search",
    "(",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncasimilarity_search_by_vector(embedding:list[float],k:int=4,**kwargs:Any,)→list[Document]#",
    "asimilarity_search_by_vector",
    "(",
    "embedding:list[float]",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncasimilarity_search_with_relevance_scores(query:str,k:int=4,**kwargs:Any,)→list[tuple[Document,float]]#",
    "asimilarity_search_with_relevance_scores",
    "(",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[tuple[Document,float]]",
    "→",
    "list[tuple[Document,float]]",
    "asyncasimilarity_search_with_score(*args:Any,**kwargs:Any,)→list[tuple[Document,float]]#",
    "asimilarity_search_with_score",
    "(",
    "*args:Any",
    "**kwargs:Any",
    ")",
    "→list[tuple[Document,float]]",
    "→",
    "list[tuple[Document,float]]",
    "clear()→None[source]#",
    "clear",
    "(",
    ")",
    "→None",
    "→",
    "None",
    "count()→int[source]#",
    "count",
    "(",
    ")",
    "→int",
    "→",
    "int",
    "create(metadata_str:str,text_size:int)→None[source]#",
    "create",
    "(",
    "metadata_str:str",
    "text_size:int",
    ")",
    "→None",
    "→",
    "None",
    "delete(zids:List[str],**kwargs:Any,)→None[source]#",
    "delete",
    "(",
    "zids:List[str]",
    "**kwargs:Any",
    ")",
    "→None",
    "→",
    "None",
    "drop()→None[source]#",
    "drop",
    "(",
    ")",
    "→None",
    "→",
    "None",
    "classmethodfrom_documents(documents:list[Document],embedding:Embeddings,**kwargs:Any,)→Self#",
    "from_documents",
    "(",
    "documents:list[Document]",
    "embedding:Embeddings",
    "**kwargs:Any",
    ")",
    "→Self",
    "→",
    "Self",
    "classmethodfrom_texts(texts:List[str],embedding:Embeddings,url:str,pod:str,store:str,vector_index:str,vector_type:str,vector_dimension:int,metadatas:List[dict]|None=None,jaguar_api_key:str|None='',**kwargs:Any,)→Jaguar[source]#",
    "from_texts",
    "(",
    "texts:List[str]",
    "embedding:Embeddings",
    "url:str",
    "pod:str",
    "store:str",
    "vector_index:str",
    "vector_type:str",
    "vector_dimension:int",
    "metadatas:List[dict]|None=None",
    "jaguar_api_key:str|None=''",
    "**kwargs:Any",
    ")",
    "→Jaguar",
    "→",
    "Jaguar",
    "get_by_ids(ids:Sequence[str],/)→list[Document]#",
    "get_by_ids",
    "(",
    "ids:Sequence[str]",
    "/",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "is_anomalous(query:str,**kwargs:Any,)→bool[source]#",
    "is_anomalous",
    "(",
    "query:str",
    "**kwargs:Any",
    ")",
    "→bool",
    "→",
    "bool",
    "login(jaguar_api_key:str|None='')→bool[source]#",
    "login",
    "(",
    "jaguar_api_key:str|None=''",
    ")",
    "→bool",
    "→",
    "bool",
    "logout()→None[source]#",
    "logout",
    "(",
    ")",
    "→None",
    "→",
    "None",
    "max_marginal_relevance_search(query:str,k:int=4,fetch_k:int=20,lambda_mult:float=0.5,**kwargs:Any,)→list[Document]#",
    "max_marginal_relevance_search",
    "(",
    "query:str",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "max_marginal_relevance_search_by_vector(embedding:list[float],k:int=4,fetch_k:int=20,lambda_mult:float=0.5,**kwargs:Any,)→list[Document]#",
    "max_marginal_relevance_search_by_vector",
    "(",
    "embedding:list[float]",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "prt(msg:str)→None[source]#",
    "prt",
    "(",
    "msg:str",
    ")",
    "→None",
    "→",
    "None",
    "run(query:str,withFile:bool=False)→dict[source]#",
    "run",
    "(",
    "query:str",
    "withFile:bool=False",
    ")",
    "→dict",
    "→",
    "dict",
    "search(query:str,search_type:str,**kwargs:Any,)→list[Document]#",
    "search",
    "(",
    "query:str",
    "search_type:str",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "similarity_search(query:str,k:int=3,where:str|None=None,metadatas:List[str]|None=None,**kwargs:Any,)→List[Document][source]#",
    "similarity_search",
    "(",
    "query:str",
    "k:int=3",
    "where:str|None=None",
    "metadatas:List[str]|None=None",
    "**kwargs:Any",
    ")",
    "→List[Document]",
    "→",
    "List[Document]",
    "similarity_search_by_vector(embedding:list[float],k:int=4,**kwargs:Any,)→list[Document]#",
    "similarity_search_by_vector",
    "(",
    "embedding:list[float]",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "similarity_search_with_relevance_scores(query:str,k:int=4,**kwargs:Any,)→list[tuple[Document,float]]#",
    "similarity_search_with_relevance_scores",
    "(",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[tuple[Document,float]]",
    "→",
    "list[tuple[Document,float]]",
    "similarity_search_with_score(query:str,k:int=3,fetch_k:int=-1,where:str|None=None,args:str|None=None,metadatas:List[str]|None=None,**kwargs:Any,)→List[Tuple[Document,float]][source]#",
    "similarity_search_with_score",
    "(",
    "query:str",
    "k:int=3",
    "fetch_k:int=-1",
    "where:str|None=None",
    "args:str|None=None",
    "metadatas:List[str]|None=None",
    "**kwargs:Any",
    ")",
    "→List[Tuple[Document,float]]",
    "→",
    "List[Tuple[Document,float]]"
  ],
  "parameters": [
    "pod:str",
    "store:str",
    "vector_index:str",
    "vector_type:str",
    "vector_dimension:int",
    "url:str",
    "embedding:Embeddings",
    "pod:str",
    "store:str",
    "vector_index:str",
    "vector_type:str",
    "vector_dimension:int",
    "url:str",
    "embedding:Embeddings",
    "documents:list[Document]",
    "**kwargs:Any",
    "texts:Iterable[str]",
    "metadatas:list[dict]|None=None",
    "*",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    "documents:list[Document]",
    "**kwargs:Any",
    "texts:List[str]",
    "metadatas:List[dict]|None=None",
    "**kwargs:Any",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    "documents:list[Document]",
    "embedding:Embeddings",
    "**kwargs:Any",
    "texts:list[str]",
    "embedding:Embeddings",
    "metadatas:list[dict]|None=None",
    "*",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    "ids:Sequence[str]",
    "/",
    "query:str",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "**kwargs:Any",
    "embedding:list[float]",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "**kwargs:Any",
    "**kwargs:Any",
    "query:str",
    "search_type:str",
    "**kwargs:Any",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    "embedding:list[float]",
    "k:int=4",
    "**kwargs:Any",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    "*args:Any",
    "**kwargs:Any",
    "metadata_str:str",
    "text_size:int",
    "zids:List[str]",
    "**kwargs:Any",
    "documents:list[Document]",
    "embedding:Embeddings",
    "**kwargs:Any",
    "texts:List[str]",
    "embedding:Embeddings",
    "url:str",
    "pod:str",
    "store:str",
    "vector_index:str",
    "vector_type:str",
    "vector_dimension:int",
    "metadatas:List[dict]|None=None",
    "jaguar_api_key:str|None=''",
    "**kwargs:Any",
    "ids:Sequence[str]",
    "/",
    "query:str",
    "**kwargs:Any",
    "jaguar_api_key:str|None=''",
    "query:str",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "**kwargs:Any",
    "embedding:list[float]",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "**kwargs:Any",
    "msg:str",
    "query:str",
    "withFile:bool=False",
    "query:str",
    "search_type:str",
    "**kwargs:Any",
    "query:str",
    "k:int=3",
    "where:str|None=None",
    "metadatas:List[str]|None=None",
    "**kwargs:Any",
    "embedding:list[float]",
    "k:int=4",
    "**kwargs:Any",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    "query:str",
    "k:int=3",
    "fetch_k:int=-1",
    "where:str|None=None",
    "args:str|None=None",
    "metadatas:List[str]|None=None",
    "**kwargs:Any"
  ]
}