{
  "url": "https://python.langchain.com/api_reference/community/chains/langchain_community.chains.ernie_functions.base.create_structured_output_runnable.html#langchain_community.chains.ernie_functions.base.create_structured_output_runnable",
  "title": "create_structured_output_runnable#",
  "sections": [
    {
      "type": "li",
      "content": "LangChain Python API Reference"
    },
    {
      "type": "li",
      "content": "langchain-community: 0.3.29"
    },
    {
      "type": "li",
      "content": "create_structured_output_runnable"
    },
    {
      "type": "p",
      "content": "Create a runnable that uses an Ernie function to get a structured output."
    },
    {
      "type": "li",
      "content": "output_schema(Dict[str,Any]|Type[BaseModel]) – Either a dictionary or pydantic.BaseModel class. If a dictionary\nis passed in, it’s assumed to already be a valid JsonSchema.\nFor best results, pydantic.BaseModels should have docstrings describing what\nthe schema represents and descriptions for the parameters."
    },
    {
      "type": "p",
      "content": "output_schema(Dict[str,Any]|Type[BaseModel]) – Either a dictionary or pydantic.BaseModel class. If a dictionary\nis passed in, it’s assumed to already be a valid JsonSchema.\nFor best results, pydantic.BaseModels should have docstrings describing what\nthe schema represents and descriptions for the parameters."
    },
    {
      "type": "li",
      "content": "llm(Runnable) – Language model to use, assumed to support the Ernie function-calling API."
    },
    {
      "type": "p",
      "content": "llm(Runnable) – Language model to use, assumed to support the Ernie function-calling API."
    },
    {
      "type": "li",
      "content": "prompt(BasePromptTemplate) – BasePromptTemplate to pass to the model."
    },
    {
      "type": "p",
      "content": "prompt(BasePromptTemplate) – BasePromptTemplate to pass to the model."
    },
    {
      "type": "li",
      "content": "output_parser(BaseOutputParser|BaseGenerationOutputParser|None) – BaseLLMOutputParser to use for parsing model outputs. By default\nwill be inferred from the function types. If pydantic.BaseModels are passed\nin, then the OutputParser will try to parse outputs using those. Otherwise\nmodel outputs will simply be parsed as JSON."
    },
    {
      "type": "p",
      "content": "output_parser(BaseOutputParser|BaseGenerationOutputParser|None) – BaseLLMOutputParser to use for parsing model outputs. By default\nwill be inferred from the function types. If pydantic.BaseModels are passed\nin, then the OutputParser will try to parse outputs using those. Otherwise\nmodel outputs will simply be parsed as JSON."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "A runnable sequence that will pass the given function to the model when run."
    },
    {
      "type": "li",
      "content": "create_structured_output_runnable()"
    }
  ],
  "code_examples": [
    "chains",
    "fromtypingimportOptionalfromlangchain.chains.ernie_functionsimportcreate_structured_output_chainfromlangchain_community.chat_modelsimportErnieBotChatfromlangchain_core.promptsimportChatPromptTemplatefrompydanticimportBaseModel,FieldclassDog(BaseModel):\"\"\"Identifying information about a dog.\"\"\"name:str=Field(...,description=\"The dog's name\")color:str=Field(...,description=\"The dog's color\")fav_food:Optional[str]=Field(None,description=\"The dog's favorite food\")llm=ErnieBotChat(model_name=\"ERNIE-Bot-4\")prompt=ChatPromptTemplate.from_messages([(\"user\",\"Use the given format to extract information from the following input:{input}\"),(\"assistant\",\"OK!\"),(\"user\",\"Tip: Make sure to answer in the correct format\"),])chain=create_structured_output_chain(Dog,llm,prompt)chain.invoke({\"input\":\"Harry was a chubby brown beagle who loved chicken\"})# -> Dog(name=\"Harry\", color=\"brown\", fav_food=\"chicken\")",
    "create_structured_output_runnable()"
  ],
  "api_signatures": [
    "langchain_community.chains.ernie_functions.base.create_structured_output_runnable(output_schema:Dict[str,Any]|Type[BaseModel],llm:Runnable,prompt:BasePromptTemplate,*,output_parser:BaseOutputParser|BaseGenerationOutputParser|None=None,**kwargs:Any,)→Runnable[source]#",
    "langchain_community.chains.ernie_functions.base.",
    "create_structured_output_runnable",
    "(",
    "output_schema:Dict[str,Any]|Type[BaseModel]",
    "llm:Runnable",
    "prompt:BasePromptTemplate",
    "*",
    "output_parser:BaseOutputParser|BaseGenerationOutputParser|None=None",
    "**kwargs:Any",
    ")",
    "→Runnable",
    "→",
    "Runnable"
  ],
  "parameters": [
    "output_schema:Dict[str,Any]|Type[BaseModel]",
    "llm:Runnable",
    "prompt:BasePromptTemplate",
    "*",
    "output_parser:BaseOutputParser|BaseGenerationOutputParser|None=None",
    "**kwargs:Any"
  ]
}
