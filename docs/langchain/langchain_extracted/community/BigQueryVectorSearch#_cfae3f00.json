{
  "url": "https://python.langchain.com/api_reference/community/vectorstores/langchain_community.vectorstores.bigquery_vector_search.BigQueryVectorSearch.html",
  "title": "BigQueryVectorSearch#",
  "sections": [
    {
      "type": "li",
      "content": "LangChain Python API Reference"
    },
    {
      "type": "li",
      "content": "langchain-community: 0.3.29"
    },
    {
      "type": "li",
      "content": "vectorstores"
    },
    {
      "type": "li",
      "content": "BigQueryVectorSearch"
    },
    {
      "type": "p",
      "content": "Deprecated since version 0.0.33:Use:class:`~langchain_google_community.BigQueryVectorSearch`instead. It will not be removed until langchain-community==1.0."
    },
    {
      "type": "p",
      "content": "Google Cloud BigQuery vector store."
    },
    {
      "type": "p",
      "content": "google-cloud-bigquery"
    },
    {
      "type": "p",
      "content": "Constructor for BigQueryVectorSearch."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Text Embedding model to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Text Embedding model to use."
    },
    {
      "type": "li",
      "content": "project_id(str) – GCP project."
    },
    {
      "type": "p",
      "content": "project_id(str) – GCP project."
    },
    {
      "type": "li",
      "content": "dataset_name(str) – BigQuery dataset to store documents and embeddings."
    },
    {
      "type": "p",
      "content": "dataset_name(str) – BigQuery dataset to store documents and embeddings."
    },
    {
      "type": "li",
      "content": "table_name(str) – BigQuery table name."
    },
    {
      "type": "p",
      "content": "table_name(str) – BigQuery table name."
    },
    {
      "type": "li",
      "content": "location(str,optional) – BigQuery region. Defaults to`US`(multi-region)."
    },
    {
      "type": "p",
      "content": "location(str,optional) – BigQuery region. Defaults to`US`(multi-region)."
    },
    {
      "type": "li",
      "content": "content_field(str) – Specifies the column to store the content.\nDefaults tocontent."
    },
    {
      "type": "p",
      "content": "content_field(str) – Specifies the column to store the content.\nDefaults tocontent."
    },
    {
      "type": "li",
      "content": "metadata_field(str) – Specifies the column to store the metadata.\nDefaults tometadata."
    },
    {
      "type": "p",
      "content": "metadata_field(str) – Specifies the column to store the metadata.\nDefaults tometadata."
    },
    {
      "type": "li",
      "content": "text_embedding_field(str) – Specifies the column to store\nthe embeddings vector.\nDefaults totext_embedding."
    },
    {
      "type": "p",
      "content": "text_embedding_field(str) – Specifies the column to store\nthe embeddings vector.\nDefaults totext_embedding."
    },
    {
      "type": "li",
      "content": "doc_id_field(str) – Specifies the column to store the document id.\nDefaults todoc_id."
    },
    {
      "type": "p",
      "content": "doc_id_field(str) – Specifies the column to store the document id.\nDefaults todoc_id."
    },
    {
      "type": "li",
      "content": "distance_strategy(DistanceStrategy,optional) –Determines the strategy employed for calculating\nthe distance between vectors in the embedding space.\nDefaults to EUCLIDEAN_DISTANCE.\nAvailable options are:\n- COSINE: Measures the similarity between two vectors of an innerproduct space.EUCLIDEAN_DISTANCE: Computes the Euclidean distance betweentwo vectors. This metric considers the geometric distance in\nthe vector space, and might be more suitable for embeddings\nthat rely on spatial relationships. This is the default behavior"
    },
    {
      "type": "p",
      "content": "distance_strategy(DistanceStrategy,optional) –Determines the strategy employed for calculating\nthe distance between vectors in the embedding space.\nDefaults to EUCLIDEAN_DISTANCE.\nAvailable options are:\n- COSINE: Measures the similarity between two vectors of an innerproduct space.EUCLIDEAN_DISTANCE: Computes the Euclidean distance betweentwo vectors. This metric considers the geometric distance in\nthe vector space, and might be more suitable for embeddings\nthat rely on spatial relationships. This is the default behavior"
    },
    {
      "type": "p",
      "content": "Determines the strategy employed for calculating\nthe distance between vectors in the embedding space.\nDefaults to EUCLIDEAN_DISTANCE.\nAvailable options are:\n- COSINE: Measures the similarity between two vectors of an inner"
    },
    {
      "type": "p",
      "content": "product space."
    },
    {
      "type": "li",
      "content": "EUCLIDEAN_DISTANCE: Computes the Euclidean distance betweentwo vectors. This metric considers the geometric distance in\nthe vector space, and might be more suitable for embeddings\nthat rely on spatial relationships. This is the default behavior"
    },
    {
      "type": "p",
      "content": "two vectors. This metric considers the geometric distance in\nthe vector space, and might be more suitable for embeddings\nthat rely on spatial relationships. This is the default behavior"
    },
    {
      "type": "li",
      "content": "credentials(Credentials,optional) – Custom Google Cloud credentials\nto use. Defaults to None."
    },
    {
      "type": "p",
      "content": "credentials(Credentials,optional) – Custom Google Cloud credentials\nto use. Defaults to None."
    },
    {
      "type": "p",
      "content": "Access the query embedding object if available."
    },
    {
      "type": "p",
      "content": "full_table_id"
    },
    {
      "type": "p",
      "content": "__init__(embedding, project_id, ...[, ...])"
    },
    {
      "type": "p",
      "content": "Constructor for BigQueryVectorSearch."
    },
    {
      "type": "p",
      "content": "aadd_documents(documents, **kwargs)"
    },
    {
      "type": "p",
      "content": "Async run more documents through the embeddings and add to the vectorstore."
    },
    {
      "type": "p",
      "content": "aadd_texts(texts[, metadatas, ids])"
    },
    {
      "type": "p",
      "content": "Async run more texts through the embeddings and add to the vectorstore."
    },
    {
      "type": "p",
      "content": "add_documents(documents, **kwargs)"
    },
    {
      "type": "p",
      "content": "Add or update documents in the vectorstore."
    },
    {
      "type": "p",
      "content": "add_texts(texts[, metadatas])"
    },
    {
      "type": "p",
      "content": "Run more texts through the embeddings and add to the vectorstore."
    },
    {
      "type": "p",
      "content": "add_texts_with_embeddings(texts, embs[, ...])"
    },
    {
      "type": "p",
      "content": "Run more texts through the embeddings and add to the vectorstore."
    },
    {
      "type": "p",
      "content": "adelete([ids])"
    },
    {
      "type": "p",
      "content": "Delete by vector ID or other criteria."
    },
    {
      "type": "p",
      "content": "afrom_documents(documents, embedding, **kwargs)"
    },
    {
      "type": "p",
      "content": "Async return VectorStore initialized from documents and embeddings."
    },
    {
      "type": "p",
      "content": "afrom_texts(texts, embedding[, metadatas, ids])"
    },
    {
      "type": "p",
      "content": "Async return VectorStore initialized from texts and embeddings."
    },
    {
      "type": "p",
      "content": "aget_by_ids(ids, /)"
    },
    {
      "type": "p",
      "content": "Async get documents by their IDs."
    },
    {
      "type": "p",
      "content": "amax_marginal_relevance_search(query[, k, ...])"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "amax_marginal_relevance_search_by_vector(...)"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "as_retriever(**kwargs)"
    },
    {
      "type": "p",
      "content": "Return VectorStoreRetriever initialized from this VectorStore."
    },
    {
      "type": "p",
      "content": "asearch(query, search_type, **kwargs)"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to query using a specified search type."
    },
    {
      "type": "p",
      "content": "asimilarity_search(query[, k])"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to query."
    },
    {
      "type": "p",
      "content": "asimilarity_search_by_vector(embedding[, k])"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to embedding vector."
    },
    {
      "type": "p",
      "content": "asimilarity_search_with_relevance_scores(query)"
    },
    {
      "type": "p",
      "content": "Async return docs and relevance scores in the range [0, 1]."
    },
    {
      "type": "p",
      "content": "asimilarity_search_with_score(*args, **kwargs)"
    },
    {
      "type": "p",
      "content": "Async run similarity search with distance."
    },
    {
      "type": "p",
      "content": "delete([ids])"
    },
    {
      "type": "p",
      "content": "Delete by vector ID or other criteria."
    },
    {
      "type": "p",
      "content": "explore_job_stats(job_id)"
    },
    {
      "type": "p",
      "content": "Return the statistics for a single job execution."
    },
    {
      "type": "p",
      "content": "from_documents(documents, embedding, **kwargs)"
    },
    {
      "type": "p",
      "content": "Return VectorStore initialized from documents and embeddings."
    },
    {
      "type": "p",
      "content": "from_texts(texts, embedding[, metadatas])"
    },
    {
      "type": "p",
      "content": "Return VectorStore initialized from texts and embeddings."
    },
    {
      "type": "p",
      "content": "get_by_ids(ids, /)"
    },
    {
      "type": "p",
      "content": "Get documents by their IDs."
    },
    {
      "type": "p",
      "content": "get_documents([ids, filter])"
    },
    {
      "type": "p",
      "content": "Search documents by their ids or metadata values."
    },
    {
      "type": "p",
      "content": "max_marginal_relevance_search(query[, k, ...])"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "max_marginal_relevance_search_by_vector(...)"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "search(query, search_type, **kwargs)"
    },
    {
      "type": "p",
      "content": "Return docs most similar to query using a specified search type."
    },
    {
      "type": "p",
      "content": "similarity_search(query[, k, filter, ...])"
    },
    {
      "type": "p",
      "content": "Run similarity search."
    },
    {
      "type": "p",
      "content": "similarity_search_by_vector(embedding[, k, ...])"
    },
    {
      "type": "p",
      "content": "Return docs most similar to embedding vector."
    },
    {
      "type": "p",
      "content": "similarity_search_with_relevance_scores(query)"
    },
    {
      "type": "p",
      "content": "Return docs and relevance scores in the range [0, 1]."
    },
    {
      "type": "p",
      "content": "similarity_search_with_score(query[, k, ...])"
    },
    {
      "type": "p",
      "content": "Run similarity search with score."
    },
    {
      "type": "p",
      "content": "similarity_search_with_score_by_vector(embedding)"
    },
    {
      "type": "p",
      "content": "Return docs most similar to embedding vector."
    },
    {
      "type": "p",
      "content": "Constructor for BigQueryVectorSearch."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Text Embedding model to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Text Embedding model to use."
    },
    {
      "type": "li",
      "content": "project_id(str) – GCP project."
    },
    {
      "type": "p",
      "content": "project_id(str) – GCP project."
    },
    {
      "type": "li",
      "content": "dataset_name(str) – BigQuery dataset to store documents and embeddings."
    },
    {
      "type": "p",
      "content": "dataset_name(str) – BigQuery dataset to store documents and embeddings."
    },
    {
      "type": "li",
      "content": "table_name(str) – BigQuery table name."
    },
    {
      "type": "p",
      "content": "table_name(str) – BigQuery table name."
    },
    {
      "type": "li",
      "content": "location(str,optional) – BigQuery region. Defaults to`US`(multi-region)."
    },
    {
      "type": "p",
      "content": "location(str,optional) – BigQuery region. Defaults to`US`(multi-region)."
    },
    {
      "type": "li",
      "content": "content_field(str) – Specifies the column to store the content.\nDefaults tocontent."
    },
    {
      "type": "p",
      "content": "content_field(str) – Specifies the column to store the content.\nDefaults tocontent."
    },
    {
      "type": "li",
      "content": "metadata_field(str) – Specifies the column to store the metadata.\nDefaults tometadata."
    },
    {
      "type": "p",
      "content": "metadata_field(str) – Specifies the column to store the metadata.\nDefaults tometadata."
    },
    {
      "type": "li",
      "content": "text_embedding_field(str) – Specifies the column to store\nthe embeddings vector.\nDefaults totext_embedding."
    },
    {
      "type": "p",
      "content": "text_embedding_field(str) – Specifies the column to store\nthe embeddings vector.\nDefaults totext_embedding."
    },
    {
      "type": "li",
      "content": "doc_id_field(str) – Specifies the column to store the document id.\nDefaults todoc_id."
    },
    {
      "type": "p",
      "content": "doc_id_field(str) – Specifies the column to store the document id.\nDefaults todoc_id."
    },
    {
      "type": "li",
      "content": "distance_strategy(DistanceStrategy,optional) –Determines the strategy employed for calculating\nthe distance between vectors in the embedding space.\nDefaults to EUCLIDEAN_DISTANCE.\nAvailable options are:\n- COSINE: Measures the similarity between two vectors of an innerproduct space.EUCLIDEAN_DISTANCE: Computes the Euclidean distance betweentwo vectors. This metric considers the geometric distance in\nthe vector space, and might be more suitable for embeddings\nthat rely on spatial relationships. This is the default behavior"
    },
    {
      "type": "p",
      "content": "distance_strategy(DistanceStrategy,optional) –Determines the strategy employed for calculating\nthe distance between vectors in the embedding space.\nDefaults to EUCLIDEAN_DISTANCE.\nAvailable options are:\n- COSINE: Measures the similarity between two vectors of an innerproduct space.EUCLIDEAN_DISTANCE: Computes the Euclidean distance betweentwo vectors. This metric considers the geometric distance in\nthe vector space, and might be more suitable for embeddings\nthat rely on spatial relationships. This is the default behavior"
    },
    {
      "type": "p",
      "content": "Determines the strategy employed for calculating\nthe distance between vectors in the embedding space.\nDefaults to EUCLIDEAN_DISTANCE.\nAvailable options are:\n- COSINE: Measures the similarity between two vectors of an inner"
    },
    {
      "type": "p",
      "content": "product space."
    },
    {
      "type": "li",
      "content": "EUCLIDEAN_DISTANCE: Computes the Euclidean distance betweentwo vectors. This metric considers the geometric distance in\nthe vector space, and might be more suitable for embeddings\nthat rely on spatial relationships. This is the default behavior"
    },
    {
      "type": "p",
      "content": "two vectors. This metric considers the geometric distance in\nthe vector space, and might be more suitable for embeddings\nthat rely on spatial relationships. This is the default behavior"
    },
    {
      "type": "li",
      "content": "credentials(Credentials,optional) – Custom Google Cloud credentials\nto use. Defaults to None."
    },
    {
      "type": "p",
      "content": "credentials(Credentials,optional) – Custom Google Cloud credentials\nto use. Defaults to None."
    },
    {
      "type": "p",
      "content": "Async run more documents through the embeddings and add to the vectorstore."
    },
    {
      "type": "li",
      "content": "documents(list[Document]) – Documents to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "documents(list[Document]) – Documents to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "List of IDs of the added texts."
    },
    {
      "type": "p",
      "content": "Async run more texts through the embeddings and add to the vectorstore."
    },
    {
      "type": "li",
      "content": "texts(Iterable[str]) – Iterable of strings to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "texts(Iterable[str]) – Iterable of strings to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "metadatas(Optional[list[dict]]) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "p",
      "content": "metadatas(Optional[list[dict]]) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "li",
      "content": "ids(Optional[list[str]]) – Optional list"
    },
    {
      "type": "p",
      "content": "ids(Optional[list[str]]) – Optional list"
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – vectorstore specific parameters."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – vectorstore specific parameters."
    },
    {
      "type": "p",
      "content": "List of ids from adding the texts into the vectorstore."
    },
    {
      "type": "li",
      "content": "ValueError– If the number of metadatas does not match the number of texts."
    },
    {
      "type": "p",
      "content": "ValueError– If the number of metadatas does not match the number of texts."
    },
    {
      "type": "li",
      "content": "ValueError– If the number of ids does not match the number of texts."
    },
    {
      "type": "p",
      "content": "ValueError– If the number of ids does not match the number of texts."
    },
    {
      "type": "p",
      "content": "Add or update documents in the vectorstore."
    },
    {
      "type": "li",
      "content": "documents(list[Document]) – Documents to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "documents(list[Document]) – Documents to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments.\nif kwargs contains ids and documents contain ids,\nthe ids in the kwargs will receive precedence."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments.\nif kwargs contains ids and documents contain ids,\nthe ids in the kwargs will receive precedence."
    },
    {
      "type": "p",
      "content": "List of IDs of the added texts."
    },
    {
      "type": "p",
      "content": "Run more texts through the embeddings and add to the vectorstore."
    },
    {
      "type": "li",
      "content": "texts(List[str]) – List of strings to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "texts(List[str]) – List of strings to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "metadatas(List[dict]|None) – Optional list of metadata associated with the texts."
    },
    {
      "type": "p",
      "content": "metadatas(List[dict]|None) – Optional list of metadata associated with the texts."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List of ids from adding the texts into the vectorstore."
    },
    {
      "type": "p",
      "content": "Run more texts through the embeddings and add to the vectorstore."
    },
    {
      "type": "li",
      "content": "texts(List[str]) – List of strings to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "texts(List[str]) – List of strings to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "embs(List[List[float]]) – List of lists of floats with text embeddings for texts."
    },
    {
      "type": "p",
      "content": "embs(List[List[float]]) – List of lists of floats with text embeddings for texts."
    },
    {
      "type": "li",
      "content": "metadatas(List[dict]|None) – Optional list of metadata associated with the texts."
    },
    {
      "type": "p",
      "content": "metadatas(List[dict]|None) – Optional list of metadata associated with the texts."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List of ids from adding the texts into the vectorstore."
    },
    {
      "type": "p",
      "content": "Delete by vector ID or other criteria."
    },
    {
      "type": "li",
      "content": "ids(List[str]|None) – List of ids to delete."
    },
    {
      "type": "p",
      "content": "ids(List[str]|None) – List of ids to delete."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Other keyword arguments that subclasses might use."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Other keyword arguments that subclasses might use."
    },
    {
      "type": "p",
      "content": "True if deletion is successful,\nFalse otherwise, None if not implemented."
    },
    {
      "type": "p",
      "content": "Optional[bool]"
    },
    {
      "type": "p",
      "content": "Async return VectorStore initialized from documents and embeddings."
    },
    {
      "type": "li",
      "content": "documents(list[Document]) – List of Documents to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "documents(list[Document]) – List of Documents to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "VectorStore initialized from documents and embeddings."
    },
    {
      "type": "p",
      "content": "VectorStore"
    },
    {
      "type": "p",
      "content": "Async return VectorStore initialized from texts and embeddings."
    },
    {
      "type": "li",
      "content": "texts(list[str]) – Texts to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "texts(list[str]) – Texts to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "li",
      "content": "metadatas(list[dict]|None) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "p",
      "content": "metadatas(list[dict]|None) – Optional list of metadatas associated with the texts.\nDefault is None."
    },
    {
      "type": "li",
      "content": "ids(list[str]|None) – Optional list of IDs associated with the texts."
    },
    {
      "type": "p",
      "content": "ids(list[str]|None) – Optional list of IDs associated with the texts."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "VectorStore initialized from texts and embeddings."
    },
    {
      "type": "p",
      "content": "VectorStore"
    },
    {
      "type": "p",
      "content": "Async get documents by their IDs."
    },
    {
      "type": "p",
      "content": "The returned documents are expected to have the ID field set to the ID of the\ndocument in the vector store."
    },
    {
      "type": "p",
      "content": "Fewer documents may be returned than requested if some IDs are not found or\nif there are duplicated IDs."
    },
    {
      "type": "p",
      "content": "Users should not assume that the order of the returned documents matches\nthe order of the input IDs. Instead, users should rely on the ID field of the\nreturned documents."
    },
    {
      "type": "p",
      "content": "This method shouldNOTraise exceptions if no documents are found for\nsome IDs."
    },
    {
      "type": "p",
      "content": "ids(Sequence[str]) – List of ids to retrieve."
    },
    {
      "type": "p",
      "content": "List of Documents."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Added in version 0.2.11."
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "li",
      "content": "fetch_k(int)"
    },
    {
      "type": "p",
      "content": "fetch_k(int)"
    },
    {
      "type": "li",
      "content": "lambda_mult(float)"
    },
    {
      "type": "p",
      "content": "lambda_mult(float)"
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None)"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None)"
    },
    {
      "type": "li",
      "content": "brute_force(bool)"
    },
    {
      "type": "p",
      "content": "brute_force(bool)"
    },
    {
      "type": "li",
      "content": "fraction_lists_to_search(float|None)"
    },
    {
      "type": "p",
      "content": "fraction_lists_to_search(float|None)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List[Document]"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "li",
      "content": "embedding(List[float])"
    },
    {
      "type": "p",
      "content": "embedding(List[float])"
    },
    {
      "type": "li",
      "content": "fetch_k(int)"
    },
    {
      "type": "p",
      "content": "fetch_k(int)"
    },
    {
      "type": "li",
      "content": "lambda_mult(float)"
    },
    {
      "type": "p",
      "content": "lambda_mult(float)"
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None)"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None)"
    },
    {
      "type": "li",
      "content": "brute_force(bool)"
    },
    {
      "type": "p",
      "content": "brute_force(bool)"
    },
    {
      "type": "li",
      "content": "fraction_lists_to_search(float|None)"
    },
    {
      "type": "p",
      "content": "fraction_lists_to_search(float|None)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List[Document]"
    },
    {
      "type": "p",
      "content": "Return VectorStoreRetriever initialized from this VectorStore."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) –Keyword arguments to pass to the search function.\nCan include:\nsearch_type (Optional[str]): Defines the type of search thatthe Retriever should perform.\nCan be “similarity” (default), “mmr”, or\n“similarity_score_threshold”.search_kwargs (Optional[Dict]): Keyword arguments to pass to thesearch function. Can include things like:k: Amount of documents to return (Default: 4)\nscore_threshold: Minimum relevance thresholdfor similarity_score_thresholdfetch_k: Amount of documents to pass to MMR algorithm(Default: 20)lambda_mult: Diversity of results returned by MMR;1 for minimum diversity and 0 for maximum. (Default: 0.5)filter: Filter by document metadata"
    },
    {
      "type": "p",
      "content": "Keyword arguments to pass to the search function.\nCan include:\nsearch_type (Optional[str]): Defines the type of search that"
    },
    {
      "type": "p",
      "content": "the Retriever should perform.\nCan be “similarity” (default), “mmr”, or\n“similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "k: Amount of documents to return (Default: 4)\nscore_threshold: Minimum relevance threshold"
    },
    {
      "type": "p",
      "content": "for similarity_score_threshold"
    },
    {
      "type": "p",
      "content": "(Default: 20)"
    },
    {
      "type": "p",
      "content": "1 for minimum diversity and 0 for maximum. (Default: 0.5)"
    },
    {
      "type": "p",
      "content": "filter: Filter by document metadata"
    },
    {
      "type": "p",
      "content": "Retriever class for VectorStore."
    },
    {
      "type": "p",
      "content": "VectorStoreRetriever"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to query using a specified search type."
    },
    {
      "type": "li",
      "content": "query(str) – Input text."
    },
    {
      "type": "p",
      "content": "query(str) – Input text."
    },
    {
      "type": "li",
      "content": "search_type(str) – Type of search to perform. Can be “similarity”,\n“mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "search_type(str) – Type of search to perform. Can be “similarity”,\n“mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query."
    },
    {
      "type": "p",
      "content": "ValueError– If search_type is not one of “similarity”,\n    “mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to query."
    },
    {
      "type": "li",
      "content": "query(str) – Input text."
    },
    {
      "type": "p",
      "content": "query(str) – Input text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Async return docs most similar to embedding vector."
    },
    {
      "type": "li",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "p",
      "content": "embedding(list[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query vector."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Async return docs and relevance scores in the range [0, 1]."
    },
    {
      "type": "p",
      "content": "0 is dissimilar, 1 is most similar."
    },
    {
      "type": "li",
      "content": "query(str) – Input text."
    },
    {
      "type": "p",
      "content": "query(str) – Input text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) –kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 tofilter the resulting set of retrieved docs"
    },
    {
      "type": "p",
      "content": "**kwargs(Any) –kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 tofilter the resulting set of retrieved docs"
    },
    {
      "type": "p",
      "content": "kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 to"
    },
    {
      "type": "p",
      "content": "filter the resulting set of retrieved docs"
    },
    {
      "type": "p",
      "content": "List of Tuples of (doc, similarity_score)"
    },
    {
      "type": "p",
      "content": "list[tuple[Document, float]]"
    },
    {
      "type": "p",
      "content": "Async run similarity search with distance."
    },
    {
      "type": "li",
      "content": "*args(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "*args(Any) – Arguments to pass to the search method."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Tuples of (doc, similarity_score)."
    },
    {
      "type": "p",
      "content": "list[tuple[Document, float]]"
    },
    {
      "type": "p",
      "content": "Delete by vector ID or other criteria."
    },
    {
      "type": "li",
      "content": "ids(List[str]|None) – List of ids to delete."
    },
    {
      "type": "p",
      "content": "ids(List[str]|None) – List of ids to delete."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Other keyword arguments that subclasses might use."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Other keyword arguments that subclasses might use."
    },
    {
      "type": "p",
      "content": "True if deletion is successful,\nFalse otherwise, None if not implemented."
    },
    {
      "type": "p",
      "content": "Optional[bool]"
    },
    {
      "type": "p",
      "content": "Return the statistics for a single job execution."
    },
    {
      "type": "p",
      "content": "job_id(str) – The BigQuery Job id."
    },
    {
      "type": "p",
      "content": "A dictionary of job statistics for a given job."
    },
    {
      "type": "p",
      "content": "Return VectorStore initialized from documents and embeddings."
    },
    {
      "type": "li",
      "content": "documents(list[Document]) – List of Documents to add to the vectorstore."
    },
    {
      "type": "p",
      "content": "documents(list[Document]) – List of Documents to add to the vectorstore."
    },
    {
      "type": "li",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "p",
      "content": "embedding(Embeddings) – Embedding function to use."
    },
    {
      "type": "li",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "kwargs(Any) – Additional keyword arguments."
    },
    {
      "type": "p",
      "content": "VectorStore initialized from documents and embeddings."
    },
    {
      "type": "p",
      "content": "VectorStore"
    },
    {
      "type": "p",
      "content": "Return VectorStore initialized from texts and embeddings."
    },
    {
      "type": "li",
      "content": "texts(List[str])"
    },
    {
      "type": "p",
      "content": "texts(List[str])"
    },
    {
      "type": "li",
      "content": "embedding(Embeddings)"
    },
    {
      "type": "p",
      "content": "embedding(Embeddings)"
    },
    {
      "type": "li",
      "content": "metadatas(List[dict]|None)"
    },
    {
      "type": "p",
      "content": "metadatas(List[dict]|None)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "BigQueryVectorSearch"
    },
    {
      "type": "p",
      "content": "Get documents by their IDs."
    },
    {
      "type": "p",
      "content": "The returned documents are expected to have the ID field set to the ID of the\ndocument in the vector store."
    },
    {
      "type": "p",
      "content": "Fewer documents may be returned than requested if some IDs are not found or\nif there are duplicated IDs."
    },
    {
      "type": "p",
      "content": "Users should not assume that the order of the returned documents matches\nthe order of the input IDs. Instead, users should rely on the ID field of the\nreturned documents."
    },
    {
      "type": "p",
      "content": "This method shouldNOTraise exceptions if no documents are found for\nsome IDs."
    },
    {
      "type": "p",
      "content": "ids(Sequence[str]) – List of ids to retrieve."
    },
    {
      "type": "p",
      "content": "List of Documents."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Added in version 0.2.11."
    },
    {
      "type": "p",
      "content": "Search documents by their ids or metadata values."
    },
    {
      "type": "li",
      "content": "ids(List[str]|None) – List of ids of documents to retrieve from the vectorstore."
    },
    {
      "type": "p",
      "content": "ids(List[str]|None) – List of ids of documents to retrieve from the vectorstore."
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "Filter on metadata properties, e.g.\n{"
    },
    {
      "type": "p",
      "content": "”str_property”: “foo”,\n“int_property”: 123"
    },
    {
      "type": "p",
      "content": "List of ids from adding the texts into the vectorstore."
    },
    {
      "type": "p",
      "content": "List[Document]"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "Maximal marginal relevance optimizes for similarity to query AND diversity\namong selected documents."
    },
    {
      "type": "li",
      "content": "query(str) – search query text."
    },
    {
      "type": "p",
      "content": "query(str) – search query text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm."
    },
    {
      "type": "p",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm."
    },
    {
      "type": "li",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "p",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "Filter on metadata properties, e.g.\n{"
    },
    {
      "type": "p",
      "content": "”str_property”: “foo”,\n“int_property”: 123"
    },
    {
      "type": "li",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "p",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "li",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "p",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List of Documents selected by maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "List[Document]"
    },
    {
      "type": "p",
      "content": "Return docs selected using the maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "Maximal marginal relevance optimizes for similarity to query AND diversity\namong selected documents."
    },
    {
      "type": "li",
      "content": "embedding(List[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "p",
      "content": "embedding(List[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm."
    },
    {
      "type": "p",
      "content": "fetch_k(int) – Number of Documents to fetch to pass to MMR algorithm."
    },
    {
      "type": "li",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "p",
      "content": "lambda_mult(float) – Number between 0 and 1 that determines the degree\nof diversity among the results with 0 corresponding\nto maximum diversity and 1 to minimum diversity.\nDefaults to 0.5."
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "Filter on metadata properties, e.g.\n{"
    },
    {
      "type": "p",
      "content": "”str_property”: “foo”,\n“int_property”: 123"
    },
    {
      "type": "li",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "p",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "li",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "p",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List of Documents selected by maximal marginal relevance."
    },
    {
      "type": "p",
      "content": "List[Document]"
    },
    {
      "type": "p",
      "content": "Return docs most similar to query using a specified search type."
    },
    {
      "type": "li",
      "content": "query(str) – Input text"
    },
    {
      "type": "p",
      "content": "query(str) – Input text"
    },
    {
      "type": "li",
      "content": "search_type(str) – Type of search to perform. Can be “similarity”,\n“mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "search_type(str) – Type of search to perform. Can be “similarity”,\n“mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) – Arguments to pass to the search method."
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query."
    },
    {
      "type": "p",
      "content": "ValueError– If search_type is not one of “similarity”,\n    “mmr”, or “similarity_score_threshold”."
    },
    {
      "type": "p",
      "content": "list[Document]"
    },
    {
      "type": "p",
      "content": "Run similarity search."
    },
    {
      "type": "li",
      "content": "query(str) – search query text."
    },
    {
      "type": "p",
      "content": "query(str) – search query text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "Filter on metadata properties, e.g.\n{"
    },
    {
      "type": "p",
      "content": "”str_property”: “foo”,\n“int_property”: 123"
    },
    {
      "type": "li",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "p",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "li",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "p",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query vector."
    },
    {
      "type": "p",
      "content": "List[Document]"
    },
    {
      "type": "p",
      "content": "Return docs most similar to embedding vector."
    },
    {
      "type": "li",
      "content": "embedding(List[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "p",
      "content": "embedding(List[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "Filter on metadata properties, e.g.\n{"
    },
    {
      "type": "p",
      "content": "”str_property”: “foo”,\n“int_property”: 123"
    },
    {
      "type": "li",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "p",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "li",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "p",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query vector."
    },
    {
      "type": "p",
      "content": "List[Document]"
    },
    {
      "type": "p",
      "content": "Return docs and relevance scores in the range [0, 1]."
    },
    {
      "type": "p",
      "content": "0 is dissimilar, 1 is most similar."
    },
    {
      "type": "li",
      "content": "query(str) – Input text."
    },
    {
      "type": "p",
      "content": "query(str) – Input text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) –kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 tofilter the resulting set of retrieved docs."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) –kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 tofilter the resulting set of retrieved docs."
    },
    {
      "type": "p",
      "content": "kwargs to be passed to similarity search. Should include:\nscore_threshold: Optional, a floating point value between 0 to 1 to"
    },
    {
      "type": "p",
      "content": "filter the resulting set of retrieved docs."
    },
    {
      "type": "p",
      "content": "List of Tuples of (doc, similarity_score)."
    },
    {
      "type": "p",
      "content": "list[tuple[Document, float]]"
    },
    {
      "type": "p",
      "content": "Run similarity search with score."
    },
    {
      "type": "li",
      "content": "query(str) – search query text."
    },
    {
      "type": "p",
      "content": "query(str) – search query text."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "Filter on metadata properties, e.g.\n{"
    },
    {
      "type": "p",
      "content": "”str_property”: “foo”,\n“int_property”: 123"
    },
    {
      "type": "li",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "p",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "li",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "p",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query vector, with similarity scores."
    },
    {
      "type": "p",
      "content": "List[Tuple[Document, float]]"
    },
    {
      "type": "p",
      "content": "Return docs most similar to embedding vector."
    },
    {
      "type": "li",
      "content": "embedding(List[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "p",
      "content": "embedding(List[float]) – Embedding to look up documents similar to."
    },
    {
      "type": "li",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "p",
      "content": "k(int) – Number of Documents to return. Defaults to 4."
    },
    {
      "type": "li",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "filter(Dict[str,Any]|None) –Filter on metadata properties, e.g.\n{”str_property”: “foo”,\n“int_property”: 123}"
    },
    {
      "type": "p",
      "content": "Filter on metadata properties, e.g.\n{"
    },
    {
      "type": "p",
      "content": "”str_property”: “foo”,\n“int_property”: 123"
    },
    {
      "type": "li",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "p",
      "content": "brute_force(bool) – Whether to use brute force search. Defaults to False."
    },
    {
      "type": "li",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "p",
      "content": "fraction_lists_to_search(float|None) – Optional percentage of lists to search,\nmust be in range 0.0 and 1.0, exclusive.\nIf Node, uses service’s default which is 0.05."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "List of Documents most similar to the query vector with distance."
    },
    {
      "type": "p",
      "content": "List[Tuple[Document, float]]"
    },
    {
      "type": "li",
      "content": "BigQueryVectorSearch__init__()aadd_documents()aadd_texts()add_documents()add_texts()add_texts_with_embeddings()adelete()afrom_documents()afrom_texts()aget_by_ids()amax_marginal_relevance_search()amax_marginal_relevance_search_by_vector()as_retriever()asearch()asimilarity_search()asimilarity_search_by_vector()asimilarity_search_with_relevance_scores()asimilarity_search_with_score()delete()explore_job_stats()from_documents()from_texts()get_by_ids()get_documents()max_marginal_relevance_search()max_marginal_relevance_search_by_vector()search()similarity_search()similarity_search_by_vector()similarity_search_with_relevance_scores()similarity_search_with_score()similarity_search_with_score_by_vector()"
    },
    {
      "type": "li",
      "content": "aadd_documents()"
    },
    {
      "type": "li",
      "content": "aadd_texts()"
    },
    {
      "type": "li",
      "content": "add_documents()"
    },
    {
      "type": "li",
      "content": "add_texts()"
    },
    {
      "type": "li",
      "content": "add_texts_with_embeddings()"
    },
    {
      "type": "li",
      "content": "afrom_documents()"
    },
    {
      "type": "li",
      "content": "afrom_texts()"
    },
    {
      "type": "li",
      "content": "aget_by_ids()"
    },
    {
      "type": "li",
      "content": "amax_marginal_relevance_search()"
    },
    {
      "type": "li",
      "content": "amax_marginal_relevance_search_by_vector()"
    },
    {
      "type": "li",
      "content": "as_retriever()"
    },
    {
      "type": "li",
      "content": "asimilarity_search()"
    },
    {
      "type": "li",
      "content": "asimilarity_search_by_vector()"
    },
    {
      "type": "li",
      "content": "asimilarity_search_with_relevance_scores()"
    },
    {
      "type": "li",
      "content": "asimilarity_search_with_score()"
    },
    {
      "type": "li",
      "content": "explore_job_stats()"
    },
    {
      "type": "li",
      "content": "from_documents()"
    },
    {
      "type": "li",
      "content": "from_texts()"
    },
    {
      "type": "li",
      "content": "get_by_ids()"
    },
    {
      "type": "li",
      "content": "get_documents()"
    },
    {
      "type": "li",
      "content": "max_marginal_relevance_search()"
    },
    {
      "type": "li",
      "content": "max_marginal_relevance_search_by_vector()"
    },
    {
      "type": "li",
      "content": "similarity_search()"
    },
    {
      "type": "li",
      "content": "similarity_search_by_vector()"
    },
    {
      "type": "li",
      "content": "similarity_search_with_relevance_scores()"
    },
    {
      "type": "li",
      "content": "similarity_search_with_score()"
    },
    {
      "type": "li",
      "content": "similarity_search_with_score_by_vector()"
    }
  ],
  "code_examples": [
    "vectorstores",
    ":class:`~langchain_google_community.BigQueryVectorSearch`",
    "embeddings",
    "full_table_id",
    "__init__",
    "aadd_documents",
    "aadd_texts",
    "add_documents",
    "add_texts",
    "add_texts_with_embeddings",
    "adelete",
    "afrom_documents",
    "afrom_texts",
    "aget_by_ids",
    "amax_marginal_relevance_search",
    "amax_marginal_relevance_search_by_vector",
    "as_retriever",
    "asearch",
    "asimilarity_search",
    "asimilarity_search_by_vector",
    "asimilarity_search_with_relevance_scores",
    "asimilarity_search_with_score",
    "delete",
    "explore_job_stats",
    "from_documents",
    "from_texts",
    "get_by_ids",
    "get_documents",
    "max_marginal_relevance_search",
    "max_marginal_relevance_search_by_vector",
    "search",
    "similarity_search",
    "similarity_search_by_vector",
    "similarity_search_with_relevance_scores",
    "similarity_search_with_score",
    "similarity_search_with_score_by_vector",
    "# Retrieve more documents with higher diversity# Useful if your dataset has many similar documentsdocsearch.as_retriever(search_type=\"mmr\",search_kwargs={\"k\":6,\"lambda_mult\":0.25})# Fetch more documents for the MMR algorithm to consider# But only return the top 5docsearch.as_retriever(search_type=\"mmr\",search_kwargs={\"k\":5,\"fetch_k\":50})# Only retrieve documents that have a relevance score# Above a certain thresholddocsearch.as_retriever(search_type=\"similarity_score_threshold\",search_kwargs={\"score_threshold\":0.8},)# Only get the single most similar document from the datasetdocsearch.as_retriever(search_kwargs={\"k\":1})# Use a filter to only retrieve documents from a specific paperdocsearch.as_retriever(search_kwargs={\"filter\":{\"paper_title\":\"GPT-4 Technical Report\"}})",
    "BigQueryVectorSearch",
    "__init__()",
    "aadd_documents()",
    "aadd_texts()",
    "add_documents()",
    "add_texts()",
    "add_texts_with_embeddings()",
    "adelete()",
    "afrom_documents()",
    "afrom_texts()",
    "aget_by_ids()",
    "amax_marginal_relevance_search()",
    "amax_marginal_relevance_search_by_vector()",
    "as_retriever()",
    "asearch()",
    "asimilarity_search()",
    "asimilarity_search_by_vector()",
    "asimilarity_search_with_relevance_scores()",
    "asimilarity_search_with_score()",
    "delete()",
    "explore_job_stats()",
    "from_documents()",
    "from_texts()",
    "get_by_ids()",
    "get_documents()",
    "max_marginal_relevance_search()",
    "max_marginal_relevance_search_by_vector()",
    "search()",
    "similarity_search()",
    "similarity_search_by_vector()",
    "similarity_search_with_relevance_scores()",
    "similarity_search_with_score()",
    "similarity_search_with_score_by_vector()"
  ],
  "api_signatures": [
    "classlangchain_community.vectorstores.bigquery_vector_search.BigQueryVectorSearch(embedding:Embeddings,project_id:str,dataset_name:str,table_name:str,location:str='US',content_field:str='content',metadata_field:str='metadata',text_embedding_field:str='text_embedding',doc_id_field:str='doc_id',distance_strategy:DistanceStrategy=DistanceStrategy.EUCLIDEAN_DISTANCE,credentials:Any|None=None,)[source]#",
    "langchain_community.vectorstores.bigquery_vector_search.",
    "BigQueryVectorSearch",
    "(",
    "embedding:Embeddings",
    "project_id:str",
    "dataset_name:str",
    "table_name:str",
    "location:str='US'",
    "content_field:str='content'",
    "metadata_field:str='metadata'",
    "text_embedding_field:str='text_embedding'",
    "doc_id_field:str='doc_id'",
    "distance_strategy:DistanceStrategy=DistanceStrategy.EUCLIDEAN_DISTANCE",
    "credentials:Any|None=None",
    ")",
    "__init__(embedding:Embeddings,project_id:str,dataset_name:str,table_name:str,location:str='US',content_field:str='content',metadata_field:str='metadata',text_embedding_field:str='text_embedding',doc_id_field:str='doc_id',distance_strategy:DistanceStrategy=DistanceStrategy.EUCLIDEAN_DISTANCE,credentials:Any|None=None,)[source]#",
    "__init__",
    "(",
    "embedding:Embeddings",
    "project_id:str",
    "dataset_name:str",
    "table_name:str",
    "location:str='US'",
    "content_field:str='content'",
    "metadata_field:str='metadata'",
    "text_embedding_field:str='text_embedding'",
    "doc_id_field:str='doc_id'",
    "distance_strategy:DistanceStrategy=DistanceStrategy.EUCLIDEAN_DISTANCE",
    "credentials:Any|None=None",
    ")",
    "asyncaadd_documents(documents:list[Document],**kwargs:Any,)→list[str]#",
    "aadd_documents",
    "(",
    "documents:list[Document]",
    "**kwargs:Any",
    ")",
    "→list[str]",
    "→",
    "list[str]",
    "asyncaadd_texts(texts:Iterable[str],metadatas:list[dict]|None=None,*,ids:list[str]|None=None,**kwargs:Any,)→list[str]#",
    "aadd_texts",
    "(",
    "texts:Iterable[str]",
    "metadatas:list[dict]|None=None",
    "*",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    ")",
    "→list[str]",
    "→",
    "list[str]",
    "add_documents(documents:list[Document],**kwargs:Any,)→list[str]#",
    "add_documents",
    "(",
    "documents:list[Document]",
    "**kwargs:Any",
    ")",
    "→list[str]",
    "→",
    "list[str]",
    "add_texts(texts:List[str],metadatas:List[dict]|None=None,**kwargs:Any,)→List[str][source]#",
    "add_texts",
    "(",
    "texts:List[str]",
    "metadatas:List[dict]|None=None",
    "**kwargs:Any",
    ")",
    "→List[str]",
    "→",
    "List[str]",
    "add_texts_with_embeddings(texts:List[str],embs:List[List[float]],metadatas:List[dict]|None=None,**kwargs:Any,)→List[str][source]#",
    "add_texts_with_embeddings",
    "(",
    "texts:List[str]",
    "embs:List[List[float]]",
    "metadatas:List[dict]|None=None",
    "**kwargs:Any",
    ")",
    "→List[str]",
    "→",
    "List[str]",
    "asyncadelete(ids:List[str]|None=None,**kwargs:Any,)→bool|None[source]#",
    "adelete",
    "(",
    "ids:List[str]|None=None",
    "**kwargs:Any",
    ")",
    "→bool|None",
    "→",
    "bool|None",
    "asyncclassmethodafrom_documents(documents:list[Document],embedding:Embeddings,**kwargs:Any,)→Self#",
    "afrom_documents",
    "(",
    "documents:list[Document]",
    "embedding:Embeddings",
    "**kwargs:Any",
    ")",
    "→Self",
    "→",
    "Self",
    "asyncclassmethodafrom_texts(texts:list[str],embedding:Embeddings,metadatas:list[dict]|None=None,*,ids:list[str]|None=None,**kwargs:Any,)→Self#",
    "afrom_texts",
    "(",
    "texts:list[str]",
    "embedding:Embeddings",
    "metadatas:list[dict]|None=None",
    "*",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    ")",
    "→Self",
    "→",
    "Self",
    "asyncaget_by_ids(ids:Sequence[str],/,)→list[Document]#",
    "aget_by_ids",
    "(",
    "ids:Sequence[str]",
    "/",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncamax_marginal_relevance_search(query:str,k:int=4,fetch_k:int=20,lambda_mult:float=0.5,filter:Dict[str,Any]|None=None,brute_force:bool=False,fraction_lists_to_search:float|None=None,**kwargs:Any,)→List[Document][source]#",
    "amax_marginal_relevance_search",
    "(",
    "query:str",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    ")",
    "→List[Document]",
    "→",
    "List[Document]",
    "asyncamax_marginal_relevance_search_by_vector(embedding:List[float],k:int=4,fetch_k:int=20,lambda_mult:float=0.5,filter:Dict[str,Any]|None=None,brute_force:bool=False,fraction_lists_to_search:float|None=None,**kwargs:Any,)→List[Document][source]#",
    "amax_marginal_relevance_search_by_vector",
    "(",
    "embedding:List[float]",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    ")",
    "→List[Document]",
    "→",
    "List[Document]",
    "as_retriever(**kwargs:Any,)→VectorStoreRetriever#",
    "as_retriever",
    "(",
    "**kwargs:Any",
    ")",
    "→VectorStoreRetriever",
    "→",
    "VectorStoreRetriever",
    "asyncasearch(query:str,search_type:str,**kwargs:Any,)→list[Document]#",
    "asearch",
    "(",
    "query:str",
    "search_type:str",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncasimilarity_search(query:str,k:int=4,**kwargs:Any,)→list[Document]#",
    "asimilarity_search",
    "(",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncasimilarity_search_by_vector(embedding:list[float],k:int=4,**kwargs:Any,)→list[Document]#",
    "asimilarity_search_by_vector",
    "(",
    "embedding:list[float]",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "asyncasimilarity_search_with_relevance_scores(query:str,k:int=4,**kwargs:Any,)→list[tuple[Document,float]]#",
    "asimilarity_search_with_relevance_scores",
    "(",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[tuple[Document,float]]",
    "→",
    "list[tuple[Document,float]]",
    "asyncasimilarity_search_with_score(*args:Any,**kwargs:Any,)→list[tuple[Document,float]]#",
    "asimilarity_search_with_score",
    "(",
    "*args:Any",
    "**kwargs:Any",
    ")",
    "→list[tuple[Document,float]]",
    "→",
    "list[tuple[Document,float]]",
    "delete(ids:List[str]|None=None,**kwargs:Any,)→bool|None[source]#",
    "delete",
    "(",
    "ids:List[str]|None=None",
    "**kwargs:Any",
    ")",
    "→bool|None",
    "→",
    "bool|None",
    "explore_job_stats(job_id:str,)→Dict[source]#",
    "explore_job_stats",
    "(",
    "job_id:str",
    ")",
    "→Dict",
    "→",
    "Dict",
    "classmethodfrom_documents(documents:list[Document],embedding:Embeddings,**kwargs:Any,)→Self#",
    "from_documents",
    "(",
    "documents:list[Document]",
    "embedding:Embeddings",
    "**kwargs:Any",
    ")",
    "→Self",
    "→",
    "Self",
    "classmethodfrom_texts(texts:List[str],embedding:Embeddings,metadatas:List[dict]|None=None,**kwargs:Any,)→BigQueryVectorSearch[source]#",
    "from_texts",
    "(",
    "texts:List[str]",
    "embedding:Embeddings",
    "metadatas:List[dict]|None=None",
    "**kwargs:Any",
    ")",
    "→BigQueryVectorSearch",
    "→",
    "BigQueryVectorSearch",
    "get_by_ids(ids:Sequence[str],/,)→list[Document]#",
    "get_by_ids",
    "(",
    "ids:Sequence[str]",
    "/",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "get_documents(ids:List[str]|None=None,filter:Dict[str,Any]|None=None,)→List[Document][source]#",
    "get_documents",
    "(",
    "ids:List[str]|None=None",
    "filter:Dict[str,Any]|None=None",
    ")",
    "→List[Document]",
    "→",
    "List[Document]",
    "max_marginal_relevance_search(query:str,k:int=4,fetch_k:int=20,lambda_mult:float=0.5,filter:Dict[str,Any]|None=None,brute_force:bool=False,fraction_lists_to_search:float|None=None,**kwargs:Any,)→List[Document][source]#",
    "max_marginal_relevance_search",
    "(",
    "query:str",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    ")",
    "→List[Document]",
    "→",
    "List[Document]",
    "max_marginal_relevance_search_by_vector(embedding:List[float],k:int=4,fetch_k:int=20,lambda_mult:float=0.5,filter:Dict[str,Any]|None=None,brute_force:bool=False,fraction_lists_to_search:float|None=None,**kwargs:Any,)→List[Document][source]#",
    "max_marginal_relevance_search_by_vector",
    "(",
    "embedding:List[float]",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    ")",
    "→List[Document]",
    "→",
    "List[Document]",
    "search(query:str,search_type:str,**kwargs:Any,)→list[Document]#",
    "search",
    "(",
    "query:str",
    "search_type:str",
    "**kwargs:Any",
    ")",
    "→list[Document]",
    "→",
    "list[Document]",
    "similarity_search(query:str,k:int=4,filter:Dict[str,Any]|None=None,brute_force:bool=False,fraction_lists_to_search:float|None=None,**kwargs:Any,)→List[Document][source]#",
    "similarity_search",
    "(",
    "query:str",
    "k:int=4",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    ")",
    "→List[Document]",
    "→",
    "List[Document]",
    "similarity_search_by_vector(embedding:List[float],k:int=4,filter:Dict[str,Any]|None=None,brute_force:bool=False,fraction_lists_to_search:float|None=None,**kwargs:Any,)→List[Document][source]#",
    "similarity_search_by_vector",
    "(",
    "embedding:List[float]",
    "k:int=4",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    ")",
    "→List[Document]",
    "→",
    "List[Document]",
    "similarity_search_with_relevance_scores(query:str,k:int=4,**kwargs:Any,)→list[tuple[Document,float]]#",
    "similarity_search_with_relevance_scores",
    "(",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    ")",
    "→list[tuple[Document,float]]",
    "→",
    "list[tuple[Document,float]]",
    "similarity_search_with_score(query:str,k:int=4,filter:Dict[str,Any]|None=None,brute_force:bool=False,fraction_lists_to_search:float|None=None,**kwargs:Any,)→List[Tuple[Document,float]][source]#",
    "similarity_search_with_score",
    "(",
    "query:str",
    "k:int=4",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    ")",
    "→List[Tuple[Document,float]]",
    "→",
    "List[Tuple[Document,float]]",
    "similarity_search_with_score_by_vector(embedding:List[float],k:int=4,filter:Dict[str,Any]|None=None,brute_force:bool=False,fraction_lists_to_search:float|None=None,**kwargs:Any,)→List[Tuple[Document,float]][source]#",
    "similarity_search_with_score_by_vector",
    "(",
    "embedding:List[float]",
    "k:int=4",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    ")",
    "→List[Tuple[Document,float]]",
    "→",
    "List[Tuple[Document,float]]"
  ],
  "parameters": [
    "embedding:Embeddings",
    "project_id:str",
    "dataset_name:str",
    "table_name:str",
    "location:str='US'",
    "content_field:str='content'",
    "metadata_field:str='metadata'",
    "text_embedding_field:str='text_embedding'",
    "doc_id_field:str='doc_id'",
    "distance_strategy:DistanceStrategy=DistanceStrategy.EUCLIDEAN_DISTANCE",
    "credentials:Any|None=None",
    "embedding:Embeddings",
    "project_id:str",
    "dataset_name:str",
    "table_name:str",
    "location:str='US'",
    "content_field:str='content'",
    "metadata_field:str='metadata'",
    "text_embedding_field:str='text_embedding'",
    "doc_id_field:str='doc_id'",
    "distance_strategy:DistanceStrategy=DistanceStrategy.EUCLIDEAN_DISTANCE",
    "credentials:Any|None=None",
    "documents:list[Document]",
    "**kwargs:Any",
    "texts:Iterable[str]",
    "metadatas:list[dict]|None=None",
    "*",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    "documents:list[Document]",
    "**kwargs:Any",
    "texts:List[str]",
    "metadatas:List[dict]|None=None",
    "**kwargs:Any",
    "texts:List[str]",
    "embs:List[List[float]]",
    "metadatas:List[dict]|None=None",
    "**kwargs:Any",
    "ids:List[str]|None=None",
    "**kwargs:Any",
    "documents:list[Document]",
    "embedding:Embeddings",
    "**kwargs:Any",
    "texts:list[str]",
    "embedding:Embeddings",
    "metadatas:list[dict]|None=None",
    "*",
    "ids:list[str]|None=None",
    "**kwargs:Any",
    "ids:Sequence[str]",
    "/",
    "query:str",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    "embedding:List[float]",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    "**kwargs:Any",
    "query:str",
    "search_type:str",
    "**kwargs:Any",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    "embedding:list[float]",
    "k:int=4",
    "**kwargs:Any",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    "*args:Any",
    "**kwargs:Any",
    "ids:List[str]|None=None",
    "**kwargs:Any",
    "job_id:str",
    "documents:list[Document]",
    "embedding:Embeddings",
    "**kwargs:Any",
    "texts:List[str]",
    "embedding:Embeddings",
    "metadatas:List[dict]|None=None",
    "**kwargs:Any",
    "ids:Sequence[str]",
    "/",
    "ids:List[str]|None=None",
    "filter:Dict[str,Any]|None=None",
    "query:str",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    "embedding:List[float]",
    "k:int=4",
    "fetch_k:int=20",
    "lambda_mult:float=0.5",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    "query:str",
    "search_type:str",
    "**kwargs:Any",
    "query:str",
    "k:int=4",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    "embedding:List[float]",
    "k:int=4",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    "query:str",
    "k:int=4",
    "**kwargs:Any",
    "query:str",
    "k:int=4",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any",
    "embedding:List[float]",
    "k:int=4",
    "filter:Dict[str,Any]|None=None",
    "brute_force:bool=False",
    "fraction_lists_to_search:float|None=None",
    "**kwargs:Any"
  ]
}