{
  "url": "https://python.langchain.com/api_reference/community/chains/langchain_community.chains.graph_qa.neptune_cypher.NeptuneOpenCypherQAChain.html#langchain_community.chains.graph_qa.neptune_cypher.NeptuneOpenCypherQAChain.run",
  "title": "NeptuneOpenCypherQAChain#",
  "sections": [
    {
      "type": "li",
      "content": "LangChain Python API Reference"
    },
    {
      "type": "li",
      "content": "langchain-community: 0.3.29"
    },
    {
      "type": "li",
      "content": "NeptuneOpenCypherQAChain"
    },
    {
      "type": "p",
      "content": "Bases:Chain"
    },
    {
      "type": "p",
      "content": "Deprecated since version 0.3.15:Use:meth:`~langchain_aws.create_neptune_opencypher_qa_chain`instead. It will not be removed until langchain-community==1.0."
    },
    {
      "type": "p",
      "content": "Chain for question-answering against a Neptune graph\nby generating openCypher statements."
    },
    {
      "type": "p",
      "content": "that are narrowly-scoped to only include necessary permissions.\nFailure to do so may result in data corruption or loss, since the calling\ncode may attempt commands that would result in deletion, mutation\nof data if appropriately prompted or reading sensitive data if such\ndata is present in the database.\nThe best way to guard against such negative outcomes is to (as appropriate)\nlimit the permissions granted to the credentials used with this tool."
    },
    {
      "type": "p",
      "content": "Seehttps://python.langchain.com/docs/securityfor more information."
    },
    {
      "type": "p",
      "content": "llm=llm,\ngraph=graph"
    },
    {
      "type": "p",
      "content": ")\nresponse = chain.run(query)"
    },
    {
      "type": "p",
      "content": "Initialize the chain."
    },
    {
      "type": "p",
      "content": "NeptuneOpenCypherQAChain implements the standardRunnableInterface. üèÉ"
    },
    {
      "type": "p",
      "content": "TheRunnableInterfacehas additional methods that are available on runnables, such aswith_config,with_types,with_retry,assign,bind,get_graph, and more."
    },
    {
      "type": "p",
      "content": "Forced user opt-in to acknowledge that the chain can make dangerous requests."
    },
    {
      "type": "p",
      "content": "that are narrowly-scoped to only include necessary permissions.\nFailure to do so may result in data corruption or loss, since the calling\ncode may attempt commands that would result in deletion, mutation\nof data if appropriately prompted or reading sensitive data if such\ndata is present in the database.\nThe best way to guard against such negative outcomes is to (as appropriate)\nlimit the permissions granted to the credentials used with this tool."
    },
    {
      "type": "p",
      "content": "Seehttps://python.langchain.com/docs/securityfor more information."
    },
    {
      "type": "p",
      "content": "[DEPRECATED] Usecallbacksinstead."
    },
    {
      "type": "p",
      "content": "Optional list of callback handlers (or callback manager). Defaults to None.\nCallback handlers are called throughout the lifecycle of a call to a chain,\nstarting with on_chain_start, ending with on_chain_end or on_chain_error.\nEach custom chain can optionally call additional callback methods, see Callback docs\nfor full details."
    },
    {
      "type": "p",
      "content": "Extra instructions by the appended to the query generation prompt."
    },
    {
      "type": "p",
      "content": "Optional memory object. Defaults to None.\nMemory is a class that gets called at the start\nand at the end of every chain. At the start, memory loads variables and passes\nthem along in the chain. At the end, it saves any returned variables.\nThere are many different types of memory - please see memory docs\nfor the full catalog."
    },
    {
      "type": "p",
      "content": "Optional metadata associated with the chain. Defaults to None.\nThis metadata will be associated with each call to this chain,\nand passed as arguments to the handlers defined incallbacks.\nYou can use these to eg identify a specific instance of a chain with its use case."
    },
    {
      "type": "p",
      "content": "Whether or not to return the result of querying the graph directly."
    },
    {
      "type": "p",
      "content": "Whether or not to return the intermediate steps along with the final answer."
    },
    {
      "type": "p",
      "content": "Optional list of tags associated with the chain. Defaults to None.\nThese tags will be associated with each call to this chain,\nand passed as arguments to the handlers defined incallbacks.\nYou can use these to eg identify a specific instance of a chain with its use case."
    },
    {
      "type": "p",
      "content": "Whether or not run in verbose mode. In verbose mode, some intermediate logs\nwill be printed to the console. Defaults to the globalverbosevalue,\naccessible vialangchain.globals.get_verbose()."
    },
    {
      "type": "p",
      "content": "Initialize from LLM."
    },
    {
      "type": "li",
      "content": "llm(BaseLanguageModel)"
    },
    {
      "type": "p",
      "content": "llm(BaseLanguageModel)"
    },
    {
      "type": "li",
      "content": "qa_prompt(BasePromptTemplate)"
    },
    {
      "type": "p",
      "content": "qa_prompt(BasePromptTemplate)"
    },
    {
      "type": "li",
      "content": "cypher_prompt(BasePromptTemplate|None)"
    },
    {
      "type": "p",
      "content": "cypher_prompt(BasePromptTemplate|None)"
    },
    {
      "type": "li",
      "content": "extra_instructions(str|None)"
    },
    {
      "type": "p",
      "content": "extra_instructions(str|None)"
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "NeptuneOpenCypherQAChain"
    },
    {
      "type": "p",
      "content": "Deprecated since version 0.1.0:Useinvoke()instead. It will not be removed until langchain==1.0."
    },
    {
      "type": "p",
      "content": "Execute the chain."
    },
    {
      "type": "li",
      "content": "inputs(dict[str,Any]|Any) ‚Äì Dictionary of inputs, or single input if chain expects\nonly one param. Should contain all inputs specified inChain.input_keysexcept for inputs that will be set by the chain‚Äôs\nmemory."
    },
    {
      "type": "p",
      "content": "inputs(dict[str,Any]|Any) ‚Äì Dictionary of inputs, or single input if chain expects\nonly one param. Should contain all inputs specified inChain.input_keysexcept for inputs that will be set by the chain‚Äôs\nmemory."
    },
    {
      "type": "li",
      "content": "return_only_outputs(bool) ‚Äì Whether to return only outputs in the\nresponse. If True, only new keys generated by this chain will be\nreturned. If False, both input keys and new keys generated by this\nchain will be returned. Defaults to False."
    },
    {
      "type": "p",
      "content": "return_only_outputs(bool) ‚Äì Whether to return only outputs in the\nresponse. If True, only new keys generated by this chain will be\nreturned. If False, both input keys and new keys generated by this\nchain will be returned. Defaults to False."
    },
    {
      "type": "li",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None) ‚Äì Callbacks to use for this chain run. These will be called in\naddition to callbacks passed to the chain during construction, but only\nthese runtime callbacks will propagate to calls to other objects."
    },
    {
      "type": "p",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None) ‚Äì Callbacks to use for this chain run. These will be called in\naddition to callbacks passed to the chain during construction, but only\nthese runtime callbacks will propagate to calls to other objects."
    },
    {
      "type": "li",
      "content": "tags(list[str]|None) ‚Äì List of string tags to pass to all callbacks. These will be passed in\naddition to tags passed to the chain during construction, but only\nthese runtime tags will propagate to calls to other objects."
    },
    {
      "type": "p",
      "content": "tags(list[str]|None) ‚Äì List of string tags to pass to all callbacks. These will be passed in\naddition to tags passed to the chain during construction, but only\nthese runtime tags will propagate to calls to other objects."
    },
    {
      "type": "li",
      "content": "metadata(dict[str,Any]|None) ‚Äì Optional metadata associated with the chain. Defaults to None."
    },
    {
      "type": "p",
      "content": "metadata(dict[str,Any]|None) ‚Äì Optional metadata associated with the chain. Defaults to None."
    },
    {
      "type": "li",
      "content": "run_name(str|None) ‚Äì Optional name for this run of the chain."
    },
    {
      "type": "p",
      "content": "run_name(str|None) ‚Äì Optional name for this run of the chain."
    },
    {
      "type": "li",
      "content": "include_run_info(bool) ‚Äì Whether to include run info in the response. Defaults\nto False."
    },
    {
      "type": "p",
      "content": "include_run_info(bool) ‚Äì Whether to include run info in the response. Defaults\nto False."
    },
    {
      "type": "p",
      "content": "A dict of named outputs. Should contain all outputs specified inChain.output_keys."
    },
    {
      "type": "p",
      "content": "Chain.output_keys."
    },
    {
      "type": "p",
      "content": "dict[str,Any]"
    },
    {
      "type": "p",
      "content": "Default implementation runsainvokein parallel usingasyncio.gather."
    },
    {
      "type": "p",
      "content": "The default implementation ofbatchworks well for IO bound runnables."
    },
    {
      "type": "p",
      "content": "Subclasses should override this method if they can batch more efficiently;\ne.g., if the underlyingRunnableuses an API which supports a batch mode."
    },
    {
      "type": "li",
      "content": "inputs(list[Input]) ‚Äì A list of inputs to theRunnable."
    },
    {
      "type": "p",
      "content": "inputs(list[Input]) ‚Äì A list of inputs to theRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|list[RunnableConfig]|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|list[RunnableConfig]|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "li",
      "content": "return_exceptions(bool) ‚Äì Whether to return exceptions instead of raising them.\nDefaults to False."
    },
    {
      "type": "p",
      "content": "return_exceptions(bool) ‚Äì Whether to return exceptions instead of raising them.\nDefaults to False."
    },
    {
      "type": "li",
      "content": "**kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "**kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "A list of outputs from theRunnable."
    },
    {
      "type": "p",
      "content": "list[Output]"
    },
    {
      "type": "p",
      "content": "Runainvokein parallel on a list of inputs."
    },
    {
      "type": "p",
      "content": "Yields results as they complete."
    },
    {
      "type": "li",
      "content": "inputs(Sequence[Input]) ‚Äì A list of inputs to theRunnable."
    },
    {
      "type": "p",
      "content": "inputs(Sequence[Input]) ‚Äì A list of inputs to theRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|Sequence[RunnableConfig]|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|Sequence[RunnableConfig]|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "li",
      "content": "return_exceptions(bool) ‚Äì Whether to return exceptions instead of raising them.\nDefaults to False."
    },
    {
      "type": "p",
      "content": "return_exceptions(bool) ‚Äì Whether to return exceptions instead of raising them.\nDefaults to False."
    },
    {
      "type": "li",
      "content": "kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "A tuple of the index of the input and the output from theRunnable."
    },
    {
      "type": "p",
      "content": "AsyncIterator[tuple[int,Output| Exception]]"
    },
    {
      "type": "p",
      "content": "Deprecated since version 0.1.0:Useainvoke()instead. It will not be removed until langchain==1.0."
    },
    {
      "type": "p",
      "content": "Asynchronously execute the chain."
    },
    {
      "type": "li",
      "content": "inputs(dict[str,Any]|Any) ‚Äì Dictionary of inputs, or single input if chain expects\nonly one param. Should contain all inputs specified inChain.input_keysexcept for inputs that will be set by the chain‚Äôs\nmemory."
    },
    {
      "type": "p",
      "content": "inputs(dict[str,Any]|Any) ‚Äì Dictionary of inputs, or single input if chain expects\nonly one param. Should contain all inputs specified inChain.input_keysexcept for inputs that will be set by the chain‚Äôs\nmemory."
    },
    {
      "type": "li",
      "content": "return_only_outputs(bool) ‚Äì Whether to return only outputs in the\nresponse. If True, only new keys generated by this chain will be\nreturned. If False, both input keys and new keys generated by this\nchain will be returned. Defaults to False."
    },
    {
      "type": "p",
      "content": "return_only_outputs(bool) ‚Äì Whether to return only outputs in the\nresponse. If True, only new keys generated by this chain will be\nreturned. If False, both input keys and new keys generated by this\nchain will be returned. Defaults to False."
    },
    {
      "type": "li",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None) ‚Äì Callbacks to use for this chain run. These will be called in\naddition to callbacks passed to the chain during construction, but only\nthese runtime callbacks will propagate to calls to other objects."
    },
    {
      "type": "p",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None) ‚Äì Callbacks to use for this chain run. These will be called in\naddition to callbacks passed to the chain during construction, but only\nthese runtime callbacks will propagate to calls to other objects."
    },
    {
      "type": "li",
      "content": "tags(list[str]|None) ‚Äì List of string tags to pass to all callbacks. These will be passed in\naddition to tags passed to the chain during construction, but only\nthese runtime tags will propagate to calls to other objects."
    },
    {
      "type": "p",
      "content": "tags(list[str]|None) ‚Äì List of string tags to pass to all callbacks. These will be passed in\naddition to tags passed to the chain during construction, but only\nthese runtime tags will propagate to calls to other objects."
    },
    {
      "type": "li",
      "content": "metadata(dict[str,Any]|None) ‚Äì Optional metadata associated with the chain. Defaults to None."
    },
    {
      "type": "p",
      "content": "metadata(dict[str,Any]|None) ‚Äì Optional metadata associated with the chain. Defaults to None."
    },
    {
      "type": "li",
      "content": "run_name(str|None) ‚Äì Optional name for this run of the chain."
    },
    {
      "type": "p",
      "content": "run_name(str|None) ‚Äì Optional name for this run of the chain."
    },
    {
      "type": "li",
      "content": "include_run_info(bool) ‚Äì Whether to include run info in the response. Defaults\nto False."
    },
    {
      "type": "p",
      "content": "include_run_info(bool) ‚Äì Whether to include run info in the response. Defaults\nto False."
    },
    {
      "type": "p",
      "content": "A dict of named outputs. Should contain all outputs specified inChain.output_keys."
    },
    {
      "type": "p",
      "content": "Chain.output_keys."
    },
    {
      "type": "p",
      "content": "dict[str,Any]"
    },
    {
      "type": "p",
      "content": "Transform a single input into an output."
    },
    {
      "type": "li",
      "content": "input(dict[str,Any]) ‚Äì The input to theRunnable."
    },
    {
      "type": "p",
      "content": "input(dict[str,Any]) ‚Äì The input to theRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "The output of theRunnable."
    },
    {
      "type": "p",
      "content": "dict[str,Any]"
    },
    {
      "type": "p",
      "content": "Deprecated since version 0.1.0:Usebatch()instead. It will not be removed until langchain==1.0."
    },
    {
      "type": "p",
      "content": "Call the chain on all inputs in the list."
    },
    {
      "type": "li",
      "content": "input_list(list[dict[str,Any]])"
    },
    {
      "type": "p",
      "content": "input_list(list[dict[str,Any]])"
    },
    {
      "type": "li",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None)"
    },
    {
      "type": "p",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None)"
    },
    {
      "type": "p",
      "content": "list[dict[str, str]]"
    },
    {
      "type": "p",
      "content": "Prepare chain inputs, including adding inputs from memory."
    },
    {
      "type": "p",
      "content": "inputs(dict[str,Any]|Any) ‚Äì Dictionary of raw inputs, or single input if chain expects\nonly one param. Should contain all inputs specified inChain.input_keysexcept for inputs that will be set by the chain‚Äôs\nmemory."
    },
    {
      "type": "p",
      "content": "A dictionary of all inputs, including those added by the chain‚Äôs memory."
    },
    {
      "type": "p",
      "content": "dict[str, str]"
    },
    {
      "type": "p",
      "content": "Validate and prepare chain outputs, and save info about this run to memory."
    },
    {
      "type": "li",
      "content": "inputs(dict[str,str]) ‚Äì Dictionary of chain inputs, including any inputs added by chain\nmemory."
    },
    {
      "type": "p",
      "content": "inputs(dict[str,str]) ‚Äì Dictionary of chain inputs, including any inputs added by chain\nmemory."
    },
    {
      "type": "li",
      "content": "outputs(dict[str,str]) ‚Äì Dictionary of initial chain outputs."
    },
    {
      "type": "p",
      "content": "outputs(dict[str,str]) ‚Äì Dictionary of initial chain outputs."
    },
    {
      "type": "li",
      "content": "return_only_outputs(bool) ‚Äì Whether to only return the chain outputs. If False,\ninputs are also added to the final outputs."
    },
    {
      "type": "p",
      "content": "return_only_outputs(bool) ‚Äì Whether to only return the chain outputs. If False,\ninputs are also added to the final outputs."
    },
    {
      "type": "p",
      "content": "A dict of the final chain outputs."
    },
    {
      "type": "p",
      "content": "dict[str, str]"
    },
    {
      "type": "p",
      "content": "Deprecated since version 0.1.0:Useainvoke()instead. It will not be removed until langchain==1.0."
    },
    {
      "type": "p",
      "content": "Convenience method for executing chain."
    },
    {
      "type": "p",
      "content": "The main difference between this method andChain.__call__is that this\nmethod expects inputs to be passed directly in as positional arguments or\nkeyword arguments, whereasChain.__call__expects a single input dictionary\nwith all the inputs"
    },
    {
      "type": "li",
      "content": "*args(Any) ‚Äì If the chain expects a single input, it can be passed in as the\nsole positional argument."
    },
    {
      "type": "p",
      "content": "*args(Any) ‚Äì If the chain expects a single input, it can be passed in as the\nsole positional argument."
    },
    {
      "type": "li",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None) ‚Äì Callbacks to use for this chain run. These will be called in\naddition to callbacks passed to the chain during construction, but only\nthese runtime callbacks will propagate to calls to other objects."
    },
    {
      "type": "p",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None) ‚Äì Callbacks to use for this chain run. These will be called in\naddition to callbacks passed to the chain during construction, but only\nthese runtime callbacks will propagate to calls to other objects."
    },
    {
      "type": "li",
      "content": "tags(list[str]|None) ‚Äì List of string tags to pass to all callbacks. These will be passed in\naddition to tags passed to the chain during construction, but only\nthese runtime tags will propagate to calls to other objects."
    },
    {
      "type": "p",
      "content": "tags(list[str]|None) ‚Äì List of string tags to pass to all callbacks. These will be passed in\naddition to tags passed to the chain during construction, but only\nthese runtime tags will propagate to calls to other objects."
    },
    {
      "type": "li",
      "content": "metadata(dict[str,Any]|None) ‚Äì Optional metadata associated with the chain."
    },
    {
      "type": "p",
      "content": "metadata(dict[str,Any]|None) ‚Äì Optional metadata associated with the chain."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) ‚Äì If the chain expects multiple inputs, they can be passed in\ndirectly as keyword arguments."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) ‚Äì If the chain expects multiple inputs, they can be passed in\ndirectly as keyword arguments."
    },
    {
      "type": "p",
      "content": "The chain output."
    },
    {
      "type": "p",
      "content": "Default implementation ofastream, which callsainvoke."
    },
    {
      "type": "p",
      "content": "Subclasses should override this method if they support streaming output."
    },
    {
      "type": "li",
      "content": "input(Input) ‚Äì The input to theRunnable."
    },
    {
      "type": "p",
      "content": "input(Input) ‚Äì The input to theRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|None) ‚Äì The config to use for theRunnable. Defaults to None."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|None) ‚Äì The config to use for theRunnable. Defaults to None."
    },
    {
      "type": "li",
      "content": "kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "The output of theRunnable."
    },
    {
      "type": "p",
      "content": "AsyncIterator[Output]"
    },
    {
      "type": "p",
      "content": "Generate a stream of events."
    },
    {
      "type": "p",
      "content": "Use to create an iterator overStreamEventsthat provide real-time information\nabout the progress of theRunnable, includingStreamEventsfrom intermediate\nresults."
    },
    {
      "type": "p",
      "content": "AStreamEventis a dictionary with the following schema:"
    },
    {
      "type": "li",
      "content": "event:str- Event names are of the format:on_[runnable_type]_(start|stream|end)."
    },
    {
      "type": "p",
      "content": "event:str- Event names are of the format:on_[runnable_type]_(start|stream|end)."
    },
    {
      "type": "li",
      "content": "name:str- The name of theRunnablethat generated the event."
    },
    {
      "type": "p",
      "content": "name:str- The name of theRunnablethat generated the event."
    },
    {
      "type": "li",
      "content": "run_id:str- randomly generated ID associated with the given\nexecution of theRunnablethat emitted the event. A childRunnablethat gets\ninvoked as part of the execution of a parentRunnableis assigned its own\nunique ID."
    },
    {
      "type": "p",
      "content": "run_id:str- randomly generated ID associated with the given\nexecution of theRunnablethat emitted the event. A childRunnablethat gets\ninvoked as part of the execution of a parentRunnableis assigned its own\nunique ID."
    },
    {
      "type": "li",
      "content": "parent_ids:list[str]- The IDs of the parent runnables that generated\nthe event. The rootRunnablewill have an empty list. The order of the parent\nIDs is from the root to the immediate parent. Only available for v2 version of\nthe API. The v1 version of the API will return an empty list."
    },
    {
      "type": "p",
      "content": "parent_ids:list[str]- The IDs of the parent runnables that generated\nthe event. The rootRunnablewill have an empty list. The order of the parent\nIDs is from the root to the immediate parent. Only available for v2 version of\nthe API. The v1 version of the API will return an empty list."
    },
    {
      "type": "li",
      "content": "tags:Optional[list[str]]- The tags of theRunnablethat generated\nthe event."
    },
    {
      "type": "p",
      "content": "tags:Optional[list[str]]- The tags of theRunnablethat generated\nthe event."
    },
    {
      "type": "li",
      "content": "metadata:Optional[dict[str, Any]]- The metadata of theRunnablethat\ngenerated the event."
    },
    {
      "type": "p",
      "content": "metadata:Optional[dict[str, Any]]- The metadata of theRunnablethat\ngenerated the event."
    },
    {
      "type": "li",
      "content": "data:dict[str, Any]"
    },
    {
      "type": "p",
      "content": "data:dict[str, Any]"
    },
    {
      "type": "p",
      "content": "Below is a table that illustrates some events that might be emitted by various\nchains. Metadata fields have been omitted from the table for brevity.\nChain definitions have been included after the table."
    },
    {
      "type": "p",
      "content": "This reference table is for the v2 version of the schema."
    },
    {
      "type": "p",
      "content": "on_chat_model_start"
    },
    {
      "type": "p",
      "content": "[model name]"
    },
    {
      "type": "p",
      "content": "{\"messages\":[[SystemMessage,HumanMessage]]}"
    },
    {
      "type": "p",
      "content": "on_chat_model_stream"
    },
    {
      "type": "p",
      "content": "[model name]"
    },
    {
      "type": "p",
      "content": "AIMessageChunk(content=\"hello\")"
    },
    {
      "type": "p",
      "content": "on_chat_model_end"
    },
    {
      "type": "p",
      "content": "[model name]"
    },
    {
      "type": "p",
      "content": "{\"messages\":[[SystemMessage,HumanMessage]]}"
    },
    {
      "type": "p",
      "content": "AIMessageChunk(content=\"helloworld\")"
    },
    {
      "type": "p",
      "content": "on_llm_start"
    },
    {
      "type": "p",
      "content": "[model name]"
    },
    {
      "type": "p",
      "content": "{'input':'hello'}"
    },
    {
      "type": "p",
      "content": "on_llm_stream"
    },
    {
      "type": "p",
      "content": "[model name]"
    },
    {
      "type": "p",
      "content": "``‚ÄôHello‚Äô ``"
    },
    {
      "type": "p",
      "content": "[model name]"
    },
    {
      "type": "p",
      "content": "'Hellohuman!'"
    },
    {
      "type": "p",
      "content": "on_chain_start"
    },
    {
      "type": "p",
      "content": "format_docs"
    },
    {
      "type": "p",
      "content": "on_chain_stream"
    },
    {
      "type": "p",
      "content": "format_docs"
    },
    {
      "type": "p",
      "content": "'helloworld!,goodbyeworld!'"
    },
    {
      "type": "p",
      "content": "on_chain_end"
    },
    {
      "type": "p",
      "content": "format_docs"
    },
    {
      "type": "p",
      "content": "[Document(...)]"
    },
    {
      "type": "p",
      "content": "'helloworld!,goodbyeworld!'"
    },
    {
      "type": "p",
      "content": "on_tool_start"
    },
    {
      "type": "p",
      "content": "{\"x\":1,\"y\":\"2\"}"
    },
    {
      "type": "p",
      "content": "on_tool_end"
    },
    {
      "type": "p",
      "content": "{\"x\":1,\"y\":\"2\"}"
    },
    {
      "type": "p",
      "content": "on_retriever_start"
    },
    {
      "type": "p",
      "content": "[retriever name]"
    },
    {
      "type": "p",
      "content": "{\"query\":\"hello\"}"
    },
    {
      "type": "p",
      "content": "on_retriever_end"
    },
    {
      "type": "p",
      "content": "[retriever name]"
    },
    {
      "type": "p",
      "content": "{\"query\":\"hello\"}"
    },
    {
      "type": "p",
      "content": "[Document(...),..]"
    },
    {
      "type": "p",
      "content": "on_prompt_start"
    },
    {
      "type": "p",
      "content": "[template_name]"
    },
    {
      "type": "p",
      "content": "{\"question\":\"hello\"}"
    },
    {
      "type": "p",
      "content": "on_prompt_end"
    },
    {
      "type": "p",
      "content": "[template_name]"
    },
    {
      "type": "p",
      "content": "{\"question\":\"hello\"}"
    },
    {
      "type": "p",
      "content": "ChatPromptValue(messages:[SystemMessage,...])"
    },
    {
      "type": "p",
      "content": "In addition to the standard events, users can also dispatch custom events (see example below)."
    },
    {
      "type": "p",
      "content": "Custom events will be only be surfaced with in the v2 version of the API!"
    },
    {
      "type": "p",
      "content": "A custom event has following format:"
    },
    {
      "type": "p",
      "content": "Description"
    },
    {
      "type": "p",
      "content": "A user defined name for the event."
    },
    {
      "type": "p",
      "content": "The data associated with the event. This can be anything, though we suggest making it JSON serializable."
    },
    {
      "type": "p",
      "content": "Here are declarations associated with the standard events shown above:"
    },
    {
      "type": "p",
      "content": "format_docs:"
    },
    {
      "type": "p",
      "content": "Example: Dispatch Custom Event"
    },
    {
      "type": "li",
      "content": "input(Any) ‚Äì The input to theRunnable."
    },
    {
      "type": "p",
      "content": "input(Any) ‚Äì The input to theRunnable."
    },
    {
      "type": "li",
      "content": "config(Optional[RunnableConfig]) ‚Äì The config to use for theRunnable."
    },
    {
      "type": "p",
      "content": "config(Optional[RunnableConfig]) ‚Äì The config to use for theRunnable."
    },
    {
      "type": "li",
      "content": "version(Literal['v1','v2']) ‚Äì The version of the schema to use either'v2'or'v1'.\nUsers should use'v2'.'v1'is for backwards compatibility and will be deprecated\nin 0.4.0.\nNo default will be assigned until the API is stabilized.\ncustom events will only be surfaced in'v2'."
    },
    {
      "type": "p",
      "content": "version(Literal['v1','v2']) ‚Äì The version of the schema to use either'v2'or'v1'.\nUsers should use'v2'.'v1'is for backwards compatibility and will be deprecated\nin 0.4.0.\nNo default will be assigned until the API is stabilized.\ncustom events will only be surfaced in'v2'."
    },
    {
      "type": "li",
      "content": "include_names(Optional[Sequence[str]]) ‚Äì Only include events fromRunnableswith matching names."
    },
    {
      "type": "p",
      "content": "include_names(Optional[Sequence[str]]) ‚Äì Only include events fromRunnableswith matching names."
    },
    {
      "type": "li",
      "content": "include_types(Optional[Sequence[str]]) ‚Äì Only include events fromRunnableswith matching types."
    },
    {
      "type": "p",
      "content": "include_types(Optional[Sequence[str]]) ‚Äì Only include events fromRunnableswith matching types."
    },
    {
      "type": "li",
      "content": "include_tags(Optional[Sequence[str]]) ‚Äì Only include events fromRunnableswith matching tags."
    },
    {
      "type": "p",
      "content": "include_tags(Optional[Sequence[str]]) ‚Äì Only include events fromRunnableswith matching tags."
    },
    {
      "type": "li",
      "content": "exclude_names(Optional[Sequence[str]]) ‚Äì Exclude events fromRunnableswith matching names."
    },
    {
      "type": "p",
      "content": "exclude_names(Optional[Sequence[str]]) ‚Äì Exclude events fromRunnableswith matching names."
    },
    {
      "type": "li",
      "content": "exclude_types(Optional[Sequence[str]]) ‚Äì Exclude events fromRunnableswith matching types."
    },
    {
      "type": "p",
      "content": "exclude_types(Optional[Sequence[str]]) ‚Äì Exclude events fromRunnableswith matching types."
    },
    {
      "type": "li",
      "content": "exclude_tags(Optional[Sequence[str]]) ‚Äì Exclude events fromRunnableswith matching tags."
    },
    {
      "type": "p",
      "content": "exclude_tags(Optional[Sequence[str]]) ‚Äì Exclude events fromRunnableswith matching tags."
    },
    {
      "type": "li",
      "content": "kwargs(Any) ‚Äì Additional keyword arguments to pass to theRunnable.\nThese will be passed toastream_logas this implementation\nofastream_eventsis built on top ofastream_log."
    },
    {
      "type": "p",
      "content": "kwargs(Any) ‚Äì Additional keyword arguments to pass to theRunnable.\nThese will be passed toastream_logas this implementation\nofastream_eventsis built on top ofastream_log."
    },
    {
      "type": "p",
      "content": "An async stream ofStreamEvents."
    },
    {
      "type": "p",
      "content": "NotImplementedError‚Äì If the version is not'v1'or'v2'."
    },
    {
      "type": "p",
      "content": "AsyncIterator[StreamEvent]"
    },
    {
      "type": "p",
      "content": "Default implementation runs invoke in parallel using a thread pool executor."
    },
    {
      "type": "p",
      "content": "The default implementation of batch works well for IO bound runnables."
    },
    {
      "type": "p",
      "content": "Subclasses should override this method if they can batch more efficiently;\ne.g., if the underlyingRunnableuses an API which supports a batch mode."
    },
    {
      "type": "li",
      "content": "inputs(list[Input]) ‚Äì A list of inputs to theRunnable."
    },
    {
      "type": "p",
      "content": "inputs(list[Input]) ‚Äì A list of inputs to theRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|list[RunnableConfig]|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work\nto do in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|list[RunnableConfig]|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work\nto do in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "li",
      "content": "return_exceptions(bool) ‚Äì Whether to return exceptions instead of raising them.\nDefaults to False."
    },
    {
      "type": "p",
      "content": "return_exceptions(bool) ‚Äì Whether to return exceptions instead of raising them.\nDefaults to False."
    },
    {
      "type": "li",
      "content": "**kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "**kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "A list of outputs from theRunnable."
    },
    {
      "type": "p",
      "content": "list[Output]"
    },
    {
      "type": "p",
      "content": "Runinvokein parallel on a list of inputs."
    },
    {
      "type": "p",
      "content": "Yields results as they complete."
    },
    {
      "type": "li",
      "content": "inputs(Sequence[Input]) ‚Äì A list of inputs to theRunnable."
    },
    {
      "type": "p",
      "content": "inputs(Sequence[Input]) ‚Äì A list of inputs to theRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|Sequence[RunnableConfig]|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|Sequence[RunnableConfig]|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "li",
      "content": "return_exceptions(bool) ‚Äì Whether to return exceptions instead of raising them.\nDefaults to False."
    },
    {
      "type": "p",
      "content": "return_exceptions(bool) ‚Äì Whether to return exceptions instead of raising them.\nDefaults to False."
    },
    {
      "type": "li",
      "content": "**kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "**kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "Tuples of the index of the input and the output from theRunnable."
    },
    {
      "type": "p",
      "content": "Iterator[tuple[int,Output| Exception]]"
    },
    {
      "type": "p",
      "content": "Bind arguments to aRunnable, returning a newRunnable."
    },
    {
      "type": "p",
      "content": "Useful when aRunnablein a chain requires an argument that is not\nin the output of the previousRunnableor included in the user input."
    },
    {
      "type": "p",
      "content": "kwargs(Any) ‚Äì The arguments to bind to theRunnable."
    },
    {
      "type": "p",
      "content": "A newRunnablewith the arguments bound."
    },
    {
      "type": "p",
      "content": "Runnable[Input,Output]"
    },
    {
      "type": "p",
      "content": "Configure alternatives forRunnablesthat can be set at runtime."
    },
    {
      "type": "li",
      "content": "which(ConfigurableField) ‚Äì TheConfigurableFieldinstance that will be used to select the\nalternative."
    },
    {
      "type": "p",
      "content": "which(ConfigurableField) ‚Äì TheConfigurableFieldinstance that will be used to select the\nalternative."
    },
    {
      "type": "li",
      "content": "default_key(str) ‚Äì The default key to use if no alternative is selected.\nDefaults to'default'."
    },
    {
      "type": "p",
      "content": "default_key(str) ‚Äì The default key to use if no alternative is selected.\nDefaults to'default'."
    },
    {
      "type": "li",
      "content": "prefix_keys(bool) ‚Äì Whether to prefix the keys with theConfigurableFieldid.\nDefaults to False."
    },
    {
      "type": "p",
      "content": "prefix_keys(bool) ‚Äì Whether to prefix the keys with theConfigurableFieldid.\nDefaults to False."
    },
    {
      "type": "li",
      "content": "**kwargs(Runnable[Input,Output]|Callable[[],Runnable[Input,Output]]) ‚Äì A dictionary of keys toRunnableinstances or callables that\nreturnRunnableinstances."
    },
    {
      "type": "p",
      "content": "**kwargs(Runnable[Input,Output]|Callable[[],Runnable[Input,Output]]) ‚Äì A dictionary of keys toRunnableinstances or callables that\nreturnRunnableinstances."
    },
    {
      "type": "p",
      "content": "A newRunnablewith the alternatives configured."
    },
    {
      "type": "p",
      "content": "RunnableSerializable"
    },
    {
      "type": "p",
      "content": "Configure particularRunnablefields at runtime."
    },
    {
      "type": "p",
      "content": "**kwargs(ConfigurableField|ConfigurableFieldSingleOption|ConfigurableFieldMultiOption) ‚Äì A dictionary ofConfigurableFieldinstances to configure."
    },
    {
      "type": "p",
      "content": "ValueError‚Äì If a configuration key is not found in theRunnable."
    },
    {
      "type": "p",
      "content": "A newRunnablewith the fields configured."
    },
    {
      "type": "p",
      "content": "RunnableSerializable"
    },
    {
      "type": "p",
      "content": "Transform a single input into an output."
    },
    {
      "type": "li",
      "content": "input(dict[str,Any]) ‚Äì The input to theRunnable."
    },
    {
      "type": "p",
      "content": "input(dict[str,Any]) ‚Äì The input to theRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|None) ‚Äì A config to use when invoking theRunnable.\nThe config supports standard keys like'tags','metadata'for\ntracing purposes,'max_concurrency'for controlling how much work to\ndo in parallel, and other keys. Please refer to theRunnableConfigfor more details. Defaults to None."
    },
    {
      "type": "li",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "kwargs(Any)"
    },
    {
      "type": "p",
      "content": "The output of theRunnable."
    },
    {
      "type": "p",
      "content": "dict[str,Any]"
    },
    {
      "type": "p",
      "content": "Prepare chain inputs, including adding inputs from memory."
    },
    {
      "type": "p",
      "content": "inputs(dict[str,Any]|Any) ‚Äì Dictionary of raw inputs, or single input if chain expects\nonly one param. Should contain all inputs specified inChain.input_keysexcept for inputs that will be set by the chain‚Äôs\nmemory."
    },
    {
      "type": "p",
      "content": "A dictionary of all inputs, including those added by the chain‚Äôs memory."
    },
    {
      "type": "p",
      "content": "dict[str, str]"
    },
    {
      "type": "p",
      "content": "Validate and prepare chain outputs, and save info about this run to memory."
    },
    {
      "type": "li",
      "content": "inputs(dict[str,str]) ‚Äì Dictionary of chain inputs, including any inputs added by chain\nmemory."
    },
    {
      "type": "p",
      "content": "inputs(dict[str,str]) ‚Äì Dictionary of chain inputs, including any inputs added by chain\nmemory."
    },
    {
      "type": "li",
      "content": "outputs(dict[str,str]) ‚Äì Dictionary of initial chain outputs."
    },
    {
      "type": "p",
      "content": "outputs(dict[str,str]) ‚Äì Dictionary of initial chain outputs."
    },
    {
      "type": "li",
      "content": "return_only_outputs(bool) ‚Äì Whether to only return the chain outputs. If False,\ninputs are also added to the final outputs."
    },
    {
      "type": "p",
      "content": "return_only_outputs(bool) ‚Äì Whether to only return the chain outputs. If False,\ninputs are also added to the final outputs."
    },
    {
      "type": "p",
      "content": "A dict of the final chain outputs."
    },
    {
      "type": "p",
      "content": "dict[str, str]"
    },
    {
      "type": "p",
      "content": "Deprecated since version 0.1.0:Useinvoke()instead. It will not be removed until langchain==1.0."
    },
    {
      "type": "p",
      "content": "Convenience method for executing chain."
    },
    {
      "type": "p",
      "content": "The main difference between this method andChain.__call__is that this\nmethod expects inputs to be passed directly in as positional arguments or\nkeyword arguments, whereasChain.__call__expects a single input dictionary\nwith all the inputs"
    },
    {
      "type": "li",
      "content": "*args(Any) ‚Äì If the chain expects a single input, it can be passed in as the\nsole positional argument."
    },
    {
      "type": "p",
      "content": "*args(Any) ‚Äì If the chain expects a single input, it can be passed in as the\nsole positional argument."
    },
    {
      "type": "li",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None) ‚Äì Callbacks to use for this chain run. These will be called in\naddition to callbacks passed to the chain during construction, but only\nthese runtime callbacks will propagate to calls to other objects."
    },
    {
      "type": "p",
      "content": "callbacks(list[BaseCallbackHandler]|BaseCallbackManager|None) ‚Äì Callbacks to use for this chain run. These will be called in\naddition to callbacks passed to the chain during construction, but only\nthese runtime callbacks will propagate to calls to other objects."
    },
    {
      "type": "li",
      "content": "tags(list[str]|None) ‚Äì List of string tags to pass to all callbacks. These will be passed in\naddition to tags passed to the chain during construction, but only\nthese runtime tags will propagate to calls to other objects."
    },
    {
      "type": "p",
      "content": "tags(list[str]|None) ‚Äì List of string tags to pass to all callbacks. These will be passed in\naddition to tags passed to the chain during construction, but only\nthese runtime tags will propagate to calls to other objects."
    },
    {
      "type": "li",
      "content": "metadata(dict[str,Any]|None) ‚Äì Optional metadata associated with the chain."
    },
    {
      "type": "p",
      "content": "metadata(dict[str,Any]|None) ‚Äì Optional metadata associated with the chain."
    },
    {
      "type": "li",
      "content": "**kwargs(Any) ‚Äì If the chain expects multiple inputs, they can be passed in\ndirectly as keyword arguments."
    },
    {
      "type": "p",
      "content": "**kwargs(Any) ‚Äì If the chain expects multiple inputs, they can be passed in\ndirectly as keyword arguments."
    },
    {
      "type": "p",
      "content": "The chain output."
    },
    {
      "type": "p",
      "content": "Save the chain."
    },
    {
      "type": "p",
      "content": "file_path(Path|str) ‚Äì Path to file to save the chain to."
    },
    {
      "type": "p",
      "content": "Default implementation ofstream, which callsinvoke."
    },
    {
      "type": "p",
      "content": "Subclasses should override this method if they support streaming output."
    },
    {
      "type": "li",
      "content": "input(Input) ‚Äì The input to theRunnable."
    },
    {
      "type": "p",
      "content": "input(Input) ‚Äì The input to theRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|None) ‚Äì The config to use for theRunnable. Defaults to None."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|None) ‚Äì The config to use for theRunnable. Defaults to None."
    },
    {
      "type": "li",
      "content": "kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "kwargs(Any|None) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "The output of theRunnable."
    },
    {
      "type": "p",
      "content": "Iterator[Output]"
    },
    {
      "type": "p",
      "content": "Bind async lifecycle listeners to aRunnable."
    },
    {
      "type": "p",
      "content": "Returns a newRunnable."
    },
    {
      "type": "p",
      "content": "The Run object contains information about the run, including itsid,type,input,output,error,start_time,end_time, and\nany tags or metadata added to the run."
    },
    {
      "type": "li",
      "content": "on_start(Optional[AsyncListener]) ‚Äì Called asynchronously before theRunnablestarts running,\nwith theRunobject. Defaults to None."
    },
    {
      "type": "p",
      "content": "on_start(Optional[AsyncListener]) ‚Äì Called asynchronously before theRunnablestarts running,\nwith theRunobject. Defaults to None."
    },
    {
      "type": "li",
      "content": "on_end(Optional[AsyncListener]) ‚Äì Called asynchronously after theRunnablefinishes running,\nwith theRunobject. Defaults to None."
    },
    {
      "type": "p",
      "content": "on_end(Optional[AsyncListener]) ‚Äì Called asynchronously after theRunnablefinishes running,\nwith theRunobject. Defaults to None."
    },
    {
      "type": "li",
      "content": "on_error(Optional[AsyncListener]) ‚Äì Called asynchronously if theRunnablethrows an error,\nwith theRunobject. Defaults to None."
    },
    {
      "type": "p",
      "content": "on_error(Optional[AsyncListener]) ‚Äì Called asynchronously if theRunnablethrows an error,\nwith theRunobject. Defaults to None."
    },
    {
      "type": "p",
      "content": "A newRunnablewith the listeners bound."
    },
    {
      "type": "p",
      "content": "Runnable[Input, Output]"
    },
    {
      "type": "p",
      "content": "Bind config to aRunnable, returning a newRunnable."
    },
    {
      "type": "li",
      "content": "config(RunnableConfig|None) ‚Äì The config to bind to theRunnable."
    },
    {
      "type": "p",
      "content": "config(RunnableConfig|None) ‚Äì The config to bind to theRunnable."
    },
    {
      "type": "li",
      "content": "kwargs(Any) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "kwargs(Any) ‚Äì Additional keyword arguments to pass to theRunnable."
    },
    {
      "type": "p",
      "content": "A newRunnablewith the config bound."
    },
    {
      "type": "p",
      "content": "Runnable[Input,Output]"
    },
    {
      "type": "p",
      "content": "Add fallbacks to aRunnable, returning a newRunnable."
    },
    {
      "type": "p",
      "content": "The newRunnablewill try the originalRunnable, and then each fallback\nin order, upon failures."
    },
    {
      "type": "li",
      "content": "fallbacks(Sequence[Runnable[Input,Output]]) ‚Äì A sequence of runnables to try if the originalRunnablefails."
    },
    {
      "type": "p",
      "content": "fallbacks(Sequence[Runnable[Input,Output]]) ‚Äì A sequence of runnables to try if the originalRunnablefails."
    },
    {
      "type": "li",
      "content": "exceptions_to_handle(tuple[type[BaseException],...]) ‚Äì A tuple of exception types to handle.\nDefaults to(Exception,)."
    },
    {
      "type": "p",
      "content": "exceptions_to_handle(tuple[type[BaseException],...]) ‚Äì A tuple of exception types to handle.\nDefaults to(Exception,)."
    },
    {
      "type": "li",
      "content": "exception_key(Optional[str]) ‚Äì If string is specified then handled exceptions will be passed\nto fallbacks as part of the input under the specified key.\nIf None, exceptions will not be passed to fallbacks.\nIf used, the baseRunnableand its fallbacks must accept a\ndictionary as input. Defaults to None."
    },
    {
      "type": "p",
      "content": "exception_key(Optional[str]) ‚Äì If string is specified then handled exceptions will be passed\nto fallbacks as part of the input under the specified key.\nIf None, exceptions will not be passed to fallbacks.\nIf used, the baseRunnableand its fallbacks must accept a\ndictionary as input. Defaults to None."
    },
    {
      "type": "p",
      "content": "A newRunnablethat will try the originalRunnable, and then each\nfallback in order, upon failures."
    },
    {
      "type": "p",
      "content": "RunnableWithFallbacksT[Input, Output]"
    },
    {
      "type": "li",
      "content": "fallbacks(Sequence[Runnable[Input,Output]]) ‚Äì A sequence of runnables to try if the originalRunnablefails."
    },
    {
      "type": "p",
      "content": "fallbacks(Sequence[Runnable[Input,Output]]) ‚Äì A sequence of runnables to try if the originalRunnablefails."
    },
    {
      "type": "li",
      "content": "exceptions_to_handle(tuple[type[BaseException],...]) ‚Äì A tuple of exception types to handle."
    },
    {
      "type": "p",
      "content": "exceptions_to_handle(tuple[type[BaseException],...]) ‚Äì A tuple of exception types to handle."
    },
    {
      "type": "li",
      "content": "exception_key(Optional[str]) ‚Äì If string is specified then handled exceptions will be passed\nto fallbacks as part of the input under the specified key.\nIf None, exceptions will not be passed to fallbacks.\nIf used, the baseRunnableand its fallbacks must accept a\ndictionary as input."
    },
    {
      "type": "p",
      "content": "exception_key(Optional[str]) ‚Äì If string is specified then handled exceptions will be passed\nto fallbacks as part of the input under the specified key.\nIf None, exceptions will not be passed to fallbacks.\nIf used, the baseRunnableand its fallbacks must accept a\ndictionary as input."
    },
    {
      "type": "p",
      "content": "A newRunnablethat will try the originalRunnable, and then each\nfallback in order, upon failures."
    },
    {
      "type": "p",
      "content": "RunnableWithFallbacksT[Input, Output]"
    },
    {
      "type": "p",
      "content": "Bind lifecycle listeners to aRunnable, returning a newRunnable."
    },
    {
      "type": "p",
      "content": "The Run object contains information about the run, including itsid,type,input,output,error,start_time,end_time, and\nany tags or metadata added to the run."
    },
    {
      "type": "li",
      "content": "on_start(Optional[Union[Callable[[Run],None],Callable[[Run,RunnableConfig],None]]]) ‚Äì Called before theRunnablestarts running, with theRunobject. Defaults to None."
    },
    {
      "type": "p",
      "content": "on_start(Optional[Union[Callable[[Run],None],Callable[[Run,RunnableConfig],None]]]) ‚Äì Called before theRunnablestarts running, with theRunobject. Defaults to None."
    },
    {
      "type": "li",
      "content": "on_end(Optional[Union[Callable[[Run],None],Callable[[Run,RunnableConfig],None]]]) ‚Äì Called after theRunnablefinishes running, with theRunobject. Defaults to None."
    },
    {
      "type": "p",
      "content": "on_end(Optional[Union[Callable[[Run],None],Callable[[Run,RunnableConfig],None]]]) ‚Äì Called after theRunnablefinishes running, with theRunobject. Defaults to None."
    },
    {
      "type": "li",
      "content": "on_error(Optional[Union[Callable[[Run],None],Callable[[Run,RunnableConfig],None]]]) ‚Äì Called if theRunnablethrows an error, with theRunobject. Defaults to None."
    },
    {
      "type": "p",
      "content": "on_error(Optional[Union[Callable[[Run],None],Callable[[Run,RunnableConfig],None]]]) ‚Äì Called if theRunnablethrows an error, with theRunobject. Defaults to None."
    },
    {
      "type": "p",
      "content": "A newRunnablewith the listeners bound."
    },
    {
      "type": "p",
      "content": "Runnable[Input, Output]"
    },
    {
      "type": "p",
      "content": "Create a new Runnable that retries the original Runnable on exceptions."
    },
    {
      "type": "li",
      "content": "retry_if_exception_type(tuple[type[BaseException],...]) ‚Äì A tuple of exception types to retry on.\nDefaults to (Exception,)."
    },
    {
      "type": "p",
      "content": "retry_if_exception_type(tuple[type[BaseException],...]) ‚Äì A tuple of exception types to retry on.\nDefaults to (Exception,)."
    },
    {
      "type": "li",
      "content": "wait_exponential_jitter(bool) ‚Äì Whether to add jitter to the wait\ntime between retries. Defaults to True."
    },
    {
      "type": "p",
      "content": "wait_exponential_jitter(bool) ‚Äì Whether to add jitter to the wait\ntime between retries. Defaults to True."
    },
    {
      "type": "li",
      "content": "stop_after_attempt(int) ‚Äì The maximum number of attempts to make before\ngiving up. Defaults to 3."
    },
    {
      "type": "p",
      "content": "stop_after_attempt(int) ‚Äì The maximum number of attempts to make before\ngiving up. Defaults to 3."
    },
    {
      "type": "li",
      "content": "exponential_jitter_params(Optional[ExponentialJitterParams]) ‚Äì Parameters fortenacity.wait_exponential_jitter. Namely:initial,max,exp_base, andjitter(all float values)."
    },
    {
      "type": "p",
      "content": "exponential_jitter_params(Optional[ExponentialJitterParams]) ‚Äì Parameters fortenacity.wait_exponential_jitter. Namely:initial,max,exp_base, andjitter(all float values)."
    },
    {
      "type": "p",
      "content": "A new Runnable that retries the original Runnable on exceptions."
    },
    {
      "type": "p",
      "content": "Runnable[Input, Output]"
    },
    {
      "type": "p",
      "content": "Bind input and output types to aRunnable, returning a newRunnable."
    },
    {
      "type": "li",
      "content": "input_type(type[Input]|None) ‚Äì The input type to bind to theRunnable. Defaults to None."
    },
    {
      "type": "p",
      "content": "input_type(type[Input]|None) ‚Äì The input type to bind to theRunnable. Defaults to None."
    },
    {
      "type": "li",
      "content": "output_type(type[Output]|None) ‚Äì The output type to bind to theRunnable. Defaults to None."
    },
    {
      "type": "p",
      "content": "output_type(type[Output]|None) ‚Äì The output type to bind to theRunnable. Defaults to None."
    },
    {
      "type": "p",
      "content": "A new Runnable with the types bound."
    },
    {
      "type": "p",
      "content": "Runnable[Input,Output]"
    },
    {
      "type": "p",
      "content": "Examples using NeptuneOpenCypherQAChain"
    },
    {
      "type": "li",
      "content": "Amazon Neptune with Cypher"
    },
    {
      "type": "p",
      "content": "Amazon Neptune with Cypher"
    },
    {
      "type": "li",
      "content": "NeptuneOpenCypherQAChainallow_dangerous_requestscallback_managercallbackscypher_generation_chainextra_instructionsgraphmemorymetadataqa_chainreturn_directreturn_intermediate_stepstagstop_kverbosefrom_llm()__call__()abatch()abatch_as_completed()acall()ainvoke()apply()aprep_inputs()aprep_outputs()arun()astream()astream_events()batch()batch_as_completed()bind()configurable_alternatives()configurable_fields()invoke()prep_inputs()prep_outputs()run()save()stream()with_alisteners()with_config()with_fallbacks()with_listeners()with_retry()with_types()"
    },
    {
      "type": "li",
      "content": "allow_dangerous_requests"
    },
    {
      "type": "li",
      "content": "callback_manager"
    },
    {
      "type": "li",
      "content": "cypher_generation_chain"
    },
    {
      "type": "li",
      "content": "extra_instructions"
    },
    {
      "type": "li",
      "content": "return_direct"
    },
    {
      "type": "li",
      "content": "return_intermediate_steps"
    },
    {
      "type": "li",
      "content": "abatch_as_completed()"
    },
    {
      "type": "li",
      "content": "aprep_inputs()"
    },
    {
      "type": "li",
      "content": "aprep_outputs()"
    },
    {
      "type": "li",
      "content": "astream_events()"
    },
    {
      "type": "li",
      "content": "batch_as_completed()"
    },
    {
      "type": "li",
      "content": "configurable_alternatives()"
    },
    {
      "type": "li",
      "content": "configurable_fields()"
    },
    {
      "type": "li",
      "content": "prep_inputs()"
    },
    {
      "type": "li",
      "content": "prep_outputs()"
    },
    {
      "type": "li",
      "content": "with_alisteners()"
    },
    {
      "type": "li",
      "content": "with_config()"
    },
    {
      "type": "li",
      "content": "with_fallbacks()"
    },
    {
      "type": "li",
      "content": "with_listeners()"
    },
    {
      "type": "li",
      "content": "with_retry()"
    },
    {
      "type": "li",
      "content": "with_types()"
    }
  ],
  "code_examples": [
    "chains",
    "Chain",
    ":meth:`~langchain_aws.create_neptune_opencypher_qa_chain`",
    "",
    "RunnableInterface",
    "RunnableInterface",
    "with_config",
    "with_types",
    "with_retry",
    "assign",
    "bind",
    "get_graph",
    "invoke()",
    "ainvoke",
    "asyncio.gather",
    "batch",
    "Runnable",
    "Runnable",
    "Runnable",
    "'tags'",
    "'metadata'",
    "'max_concurrency'",
    "RunnableConfig",
    "Runnable",
    "Runnable",
    "ainvoke",
    "Runnable",
    "Runnable",
    "'tags'",
    "'metadata'",
    "'max_concurrency'",
    "RunnableConfig",
    "Runnable",
    "Runnable",
    "ainvoke()",
    "Runnable",
    "Runnable",
    "'tags'",
    "'metadata'",
    "'max_concurrency'",
    "RunnableConfig",
    "Runnable",
    "batch()",
    "ainvoke()",
    "# Suppose we have a single-input chain that takes a 'question' string:awaitchain.arun(\"What's the temperature in Boise, Idaho?\")# -> \"The temperature in Boise is...\"# Suppose we have a multi-input chain that takes a 'question' string# and 'context' string:question=\"What's the temperature in Boise, Idaho?\"context=\"Weather report for Boise, Idaho on 07/03/23...\"awaitchain.arun(question=question,context=context)# -> \"The temperature in Boise is...\"",
    "astream",
    "ainvoke",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "StreamEvents",
    "Runnable",
    "StreamEvents",
    "StreamEvent",
    "event",
    "on_[runnable_type]_(start|stream|end)",
    "name",
    "Runnable",
    "run_id",
    "Runnable",
    "Runnable",
    "Runnable",
    "parent_ids",
    "Runnable",
    "tags",
    "Runnable",
    "metadata",
    "Runnable",
    "data",
    "on_chat_model_start",
    "{\"messages\":[[SystemMessage,HumanMessage]]}",
    "on_chat_model_stream",
    "AIMessageChunk(content=\"hello\")",
    "on_chat_model_end",
    "{\"messages\":[[SystemMessage,HumanMessage]]}",
    "AIMessageChunk(content=\"helloworld\")",
    "on_llm_start",
    "{'input':'hello'}",
    "on_llm_stream",
    "on_llm_end",
    "'Hellohuman!'",
    "on_chain_start",
    "on_chain_stream",
    "'helloworld!,goodbyeworld!'",
    "on_chain_end",
    "[Document(...)]",
    "'helloworld!,goodbyeworld!'",
    "on_tool_start",
    "{\"x\":1,\"y\":\"2\"}",
    "on_tool_end",
    "{\"x\":1,\"y\":\"2\"}",
    "on_retriever_start",
    "{\"query\":\"hello\"}",
    "on_retriever_end",
    "{\"query\":\"hello\"}",
    "[Document(...),..]",
    "on_prompt_start",
    "{\"question\":\"hello\"}",
    "on_prompt_end",
    "{\"question\":\"hello\"}",
    "ChatPromptValue(messages:[SystemMessage,...])",
    "format_docs",
    "defformat_docs(docs:list[Document])->str:'''Format the docs.'''return\", \".join([doc.page_contentfordocindocs])format_docs=RunnableLambda(format_docs)",
    "some_tool",
    "@tooldefsome_tool(x:int,y:str)->dict:'''Some_tool.'''return{\"x\":x,\"y\":y}",
    "prompt",
    "template=ChatPromptTemplate.from_messages([(\"system\",\"You are Cat Agent 007\"),(\"human\",\"{question}\")]).with_config({\"run_name\":\"my_template\",\"tags\":[\"my_template\"]})",
    "fromlangchain_core.runnablesimportRunnableLambdaasyncdefreverse(s:str)->str:returns[::-1]chain=RunnableLambda(func=reverse)events=[eventasyncforeventinchain.astream_events(\"hello\",version=\"v2\")]# will produce the following events (run_id, and parent_ids# has been omitted for brevity):[{\"data\":{\"input\":\"hello\"},\"event\":\"on_chain_start\",\"metadata\":{},\"name\":\"reverse\",\"tags\":[],},{\"data\":{\"chunk\":\"olleh\"},\"event\":\"on_chain_stream\",\"metadata\":{},\"name\":\"reverse\",\"tags\":[],},{\"data\":{\"output\":\"olleh\"},\"event\":\"on_chain_end\",\"metadata\":{},\"name\":\"reverse\",\"tags\":[],},]",
    "fromlangchain_core.callbacks.managerimport(adispatch_custom_event,)fromlangchain_core.runnablesimportRunnableLambda,RunnableConfigimportasyncioasyncdefslow_thing(some_input:str,config:RunnableConfig)->str:\"\"\"Do something that takes a long time.\"\"\"awaitasyncio.sleep(1)# Placeholder for some slow operationawaitadispatch_custom_event(\"progress_event\",{\"message\":\"Finished step 1 of 3\"},config=config# Must be included for python < 3.10)awaitasyncio.sleep(1)# Placeholder for some slow operationawaitadispatch_custom_event(\"progress_event\",{\"message\":\"Finished step 2 of 3\"},config=config# Must be included for python < 3.10)awaitasyncio.sleep(1)# Placeholder for some slow operationreturn\"Done\"slow_thing=RunnableLambda(slow_thing)asyncforeventinslow_thing.astream_events(\"some_input\",version=\"v2\"):print(event)",
    "Runnable",
    "Runnable",
    "'v2'",
    "'v1'",
    "'v2'",
    "'v1'",
    "'v2'",
    "Runnables",
    "Runnables",
    "Runnables",
    "Runnables",
    "Runnables",
    "Runnables",
    "Runnable",
    "astream_log",
    "astream_events",
    "astream_log",
    "StreamEvents",
    "'v1'",
    "'v2'",
    "Runnable",
    "Runnable",
    "Runnable",
    "'tags'",
    "'metadata'",
    "'max_concurrency'",
    "RunnableConfig",
    "Runnable",
    "Runnable",
    "invoke",
    "Runnable",
    "Runnable",
    "'tags'",
    "'metadata'",
    "'max_concurrency'",
    "RunnableConfig",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "fromlangchain_ollamaimportChatOllamafromlangchain_core.output_parsersimportStrOutputParserllm=ChatOllama(model=\"llama2\")# Without bind.chain=llm|StrOutputParser()chain.invoke(\"Repeat quoted words exactly: 'One two three four five.'\")# Output is 'One two three four five.'# With bind.chain=llm.bind(stop=[\"three\"])|StrOutputParser()chain.invoke(\"Repeat quoted words exactly: 'One two three four five.'\")# Output is 'One two'",
    "Runnables",
    "ConfigurableField",
    "'default'",
    "ConfigurableField",
    "Runnable",
    "Runnable",
    "Runnable",
    "fromlangchain_anthropicimportChatAnthropicfromlangchain_core.runnables.utilsimportConfigurableFieldfromlangchain_openaiimportChatOpenAImodel=ChatAnthropic(model_name=\"claude-3-7-sonnet-20250219\").configurable_alternatives(ConfigurableField(id=\"llm\"),default_key=\"anthropic\",openai=ChatOpenAI(),)# uses the default model ChatAnthropicprint(model.invoke(\"which organization created you?\").content)# uses ChatOpenAIprint(model.with_config(configurable={\"llm\":\"openai\"}).invoke(\"which organization created you?\").content)",
    "Runnable",
    "ConfigurableField",
    "Runnable",
    "Runnable",
    "fromlangchain_core.runnablesimportConfigurableFieldfromlangchain_openaiimportChatOpenAImodel=ChatOpenAI(max_tokens=20).configurable_fields(max_tokens=ConfigurableField(id=\"output_token_number\",name=\"Max tokens in the output\",description=\"The maximum number of tokens in the output\",))# max_tokens = 20print(\"max_tokens_20: \",model.invoke(\"tell me something about chess\").content)# max_tokens = 200print(\"max_tokens_200: \",model.with_config(configurable={\"output_token_number\":200}).invoke(\"tell me something about chess\").content,)",
    "Runnable",
    "Runnable",
    "'tags'",
    "'metadata'",
    "'max_concurrency'",
    "RunnableConfig",
    "Runnable",
    "invoke()",
    "# Suppose we have a single-input chain that takes a 'question' string:chain.run(\"What's the temperature in Boise, Idaho?\")# -> \"The temperature in Boise is...\"# Suppose we have a multi-input chain that takes a 'question' string# and 'context' string:question=\"What's the temperature in Boise, Idaho?\"context=\"Weather report for Boise, Idaho on 07/03/23...\"chain.run(question=question,context=context)# -> \"The temperature in Boise is...\"",
    "chain.save(file_path=\"path/chain.yaml\")",
    "stream",
    "invoke",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "id",
    "type",
    "input",
    "output",
    "error",
    "start_time",
    "end_time",
    "Runnable",
    "Run",
    "Runnable",
    "Run",
    "Runnable",
    "Run",
    "Runnable",
    "fromlangchain_core.runnablesimportRunnableLambda,Runnablefromdatetimeimportdatetime,timezoneimporttimeimportasynciodefformat_t(timestamp:float)->str:returndatetime.fromtimestamp(timestamp,tz=timezone.utc).isoformat()asyncdeftest_runnable(time_to_sleep:int):print(f\"Runnable[{time_to_sleep}s]: starts at{format_t(time.time())}\")awaitasyncio.sleep(time_to_sleep)print(f\"Runnable[{time_to_sleep}s]: ends at{format_t(time.time())}\")asyncdeffn_start(run_obj:Runnable):print(f\"on start callback starts at{format_t(time.time())}\")awaitasyncio.sleep(3)print(f\"on start callback ends at{format_t(time.time())}\")asyncdeffn_end(run_obj:Runnable):print(f\"on end callback starts at{format_t(time.time())}\")awaitasyncio.sleep(2)print(f\"on end callback ends at{format_t(time.time())}\")runnable=RunnableLambda(test_runnable).with_alisteners(on_start=fn_start,on_end=fn_end)asyncdefconcurrent_runs():awaitasyncio.gather(runnable.ainvoke(2),runnable.ainvoke(3))asyncio.run(concurrent_runs())Result:onstartcallbackstartsat2025-03-01T07:05:22.875378+00:00onstartcallbackstartsat2025-03-01T07:05:22.875495+00:00onstartcallbackendsat2025-03-01T07:05:25.878862+00:00onstartcallbackendsat2025-03-01T07:05:25.878947+00:00Runnable[2s]:startsat2025-03-01T07:05:25.879392+00:00Runnable[3s]:startsat2025-03-01T07:05:25.879804+00:00Runnable[2s]:endsat2025-03-01T07:05:27.881998+00:00onendcallbackstartsat2025-03-01T07:05:27.882360+00:00Runnable[3s]:endsat2025-03-01T07:05:28.881737+00:00onendcallbackstartsat2025-03-01T07:05:28.882428+00:00onendcallbackendsat2025-03-01T07:05:29.883893+00:00onendcallbackendsat2025-03-01T07:05:30.884831+00:00",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "(Exception,)",
    "Runnable",
    "Runnable",
    "Runnable",
    "fromtypingimportIteratorfromlangchain_core.runnablesimportRunnableGeneratordef_generate_immediate_error(input:Iterator)->Iterator[str]:raiseValueError()yield\"\"def_generate(input:Iterator)->Iterator[str]:yield from\"foo bar\"runnable=RunnableGenerator(_generate_immediate_error).with_fallbacks([RunnableGenerator(_generate)])print(\"\".join(runnable.stream({})))# foo bar",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "id",
    "type",
    "input",
    "output",
    "error",
    "start_time",
    "end_time",
    "Runnable",
    "Run",
    "Runnable",
    "Run",
    "Runnable",
    "Run",
    "Runnable",
    "fromlangchain_core.runnablesimportRunnableLambdafromlangchain_core.tracers.schemasimportRunimporttimedeftest_runnable(time_to_sleep:int):time.sleep(time_to_sleep)deffn_start(run_obj:Run):print(\"start_time:\",run_obj.start_time)deffn_end(run_obj:Run):print(\"end_time:\",run_obj.end_time)chain=RunnableLambda(test_runnable).with_listeners(on_start=fn_start,on_end=fn_end)chain.invoke(2)",
    "tenacity.wait_exponential_jitter",
    "initial",
    "max",
    "exp_base",
    "jitter",
    "fromlangchain_core.runnablesimportRunnableLambdacount=0def_lambda(x:int)->None:globalcountcount=count+1ifx==1:raiseValueError(\"x is 1\")else:passrunnable=RunnableLambda(_lambda)try:runnable.with_retry(stop_after_attempt=2,retry_if_exception_type=(ValueError,),).invoke(1)exceptValueError:passassertcount==2",
    "Runnable",
    "Runnable",
    "Runnable",
    "Runnable",
    "NeptuneOpenCypherQAChain",
    "allow_dangerous_requests",
    "callback_manager",
    "callbacks",
    "cypher_generation_chain",
    "extra_instructions",
    "graph",
    "memory",
    "metadata",
    "qa_chain",
    "return_direct",
    "return_intermediate_steps",
    "tags",
    "top_k",
    "verbose",
    "from_llm()",
    "__call__()",
    "abatch()",
    "abatch_as_completed()",
    "acall()",
    "ainvoke()",
    "apply()",
    "aprep_inputs()",
    "aprep_outputs()",
    "arun()",
    "astream()",
    "astream_events()",
    "batch()",
    "batch_as_completed()",
    "bind()",
    "configurable_alternatives()",
    "configurable_fields()",
    "invoke()",
    "prep_inputs()",
    "prep_outputs()",
    "run()",
    "save()",
    "stream()",
    "with_alisteners()",
    "with_config()",
    "with_fallbacks()",
    "with_listeners()",
    "with_retry()",
    "with_types()"
  ],
  "api_signatures": [
    "classlangchain_community.chains.graph_qa.neptune_cypher.NeptuneOpenCypherQAChain[source]#",
    "langchain_community.chains.graph_qa.neptune_cypher.",
    "NeptuneOpenCypherQAChain",
    "paramallow_dangerous_requests:bool=False#",
    "allow_dangerous_requests",
    "paramcallback_manager:BaseCallbackManager|None=None#",
    "callback_manager",
    "paramcallbacks:Callbacks=None#",
    "callbacks",
    "paramcypher_generation_chain:LLMChain[Required]#",
    "cypher_generation_chain",
    "paramextra_instructions:str|None=None#",
    "extra_instructions",
    "paramgraph:BaseNeptuneGraph[Required]#",
    "graph",
    "parammemory:BaseMemory|None=None#",
    "memory",
    "parammetadata:dict[str,Any]|None=None#",
    "metadata",
    "paramqa_chain:LLMChain[Required]#",
    "qa_chain",
    "paramreturn_direct:bool=False#",
    "return_direct",
    "paramreturn_intermediate_steps:bool=False#",
    "return_intermediate_steps",
    "paramtags:list[str]|None=None#",
    "tags",
    "paramtop_k:int=10#",
    "top_k",
    "paramverbose:bool[Optional]#",
    "verbose",
    "classmethodfrom_llm(llm:BaseLanguageModel,*,qa_prompt:BasePromptTemplate=PromptTemplate(input_variables=['context','question'],input_types={},partial_variables={},template=\"Youareanassistantthathelpstoformniceandhumanunderstandableanswers.\\nTheinformationpartcontainstheprovidedinformationthatyoumustusetoconstructananswer.\\nTheprovidedinformationisauthoritative,youmustneverdoubtitortrytouseyourinternalknowledgetocorrectit.\\nMaketheanswersoundasaresponsetothequestion.Donotmentionthatyoubasedtheresultonthegiveninformation.\\nHereisanexample:\\n\\nQuestion:WhichmanagersownNeo4jstocks?\\nContext:[manager:CTLLLC,manager:JANESTREETGROUPLLC]\\nHelpfulAnswer:CTLLLC,JANESTREETGROUPLLCownsNeo4jstocks.\\n\\nFollowthisexamplewhengeneratinganswers.\\nIftheprovidedinformationisempty,saythatyoudon'tknowtheanswer.\\nInformation:\\n{context}\\n\\nQuestion:{question}\\nHelpfulAnswer:\"),cypher_prompt:BasePromptTemplate|None=None,extra_instructions:str|None=None,**kwargs:Any,)‚ÜíNeptuneOpenCypherQAChain[source]#",
    "from_llm",
    "(",
    "llm:BaseLanguageModel",
    "*",
    "qa_prompt:BasePromptTemplate=PromptTemplate(input_variables=['context','question'],input_types={},partial_variables={},template=\"Youareanassistantthathelpstoformniceandhumanunderstandableanswers.\\nTheinformationpartcontainstheprovidedinformationthatyoumustusetoconstructananswer.\\nTheprovidedinformationisauthoritative,youmustneverdoubtitortrytouseyourinternalknowledgetocorrectit.\\nMaketheanswersoundasaresponsetothequestion.Donotmentionthatyoubasedtheresultonthegiveninformation.\\nHereisanexample:\\n\\nQuestion:WhichmanagersownNeo4jstocks?\\nContext:[manager:CTLLLC,manager:JANESTREETGROUPLLC]\\nHelpfulAnswer:CTLLLC,JANESTREETGROUPLLCownsNeo4jstocks.\\n\\nFollowthisexamplewhengeneratinganswers.\\nIftheprovidedinformationisempty,saythatyoudon'tknowtheanswer.\\nInformation:\\n{context}\\n\\nQuestion:{question}\\nHelpfulAnswer:\")",
    "cypher_prompt:BasePromptTemplate|None=None",
    "extra_instructions:str|None=None",
    "**kwargs:Any",
    ")",
    "‚ÜíNeptuneOpenCypherQAChain",
    "‚Üí",
    "NeptuneOpenCypherQAChain",
    "__call__(inputs:dict[str,Any]|Any,return_only_outputs:bool=False,callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None,*,tags:list[str]|None=None,metadata:dict[str,Any]|None=None,run_name:str|None=None,include_run_info:bool=False,)‚Üídict[str,Any]#",
    "__call__",
    "(",
    "inputs:dict[str,Any]|Any",
    "return_only_outputs:bool=False",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "*",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "run_name:str|None=None",
    "include_run_info:bool=False",
    ")",
    "‚Üídict[str,Any]",
    "‚Üí",
    "dict[str,Any]",
    "asyncabatch(inputs:list[Input],config:RunnableConfig|list[RunnableConfig]|None=None,*,return_exceptions:bool=False,**kwargs:Any|None,)‚Üílist[Output]#",
    "abatch",
    "(",
    "inputs:list[Input]",
    "config:RunnableConfig|list[RunnableConfig]|None=None",
    "*",
    "return_exceptions:bool=False",
    "**kwargs:Any|None",
    ")",
    "‚Üílist[Output]",
    "‚Üí",
    "list[Output]",
    "asyncabatch_as_completed(inputs:Sequence[Input],config:RunnableConfig|Sequence[RunnableConfig]|None=None,*,return_exceptions:bool=False,**kwargs:Any|None,)‚ÜíAsyncIterator[tuple[int,Output|Exception]]#",
    "abatch_as_completed",
    "(",
    "inputs:Sequence[Input]",
    "config:RunnableConfig|Sequence[RunnableConfig]|None=None",
    "*",
    "return_exceptions:bool=False",
    "**kwargs:Any|None",
    ")",
    "‚ÜíAsyncIterator[tuple[int,Output|Exception]]",
    "‚Üí",
    "AsyncIterator[tuple[int,Output|Exception]]",
    "asyncacall(inputs:dict[str,Any]|Any,return_only_outputs:bool=False,callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None,*,tags:list[str]|None=None,metadata:dict[str,Any]|None=None,run_name:str|None=None,include_run_info:bool=False,)‚Üídict[str,Any]#",
    "acall",
    "(",
    "inputs:dict[str,Any]|Any",
    "return_only_outputs:bool=False",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "*",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "run_name:str|None=None",
    "include_run_info:bool=False",
    ")",
    "‚Üídict[str,Any]",
    "‚Üí",
    "dict[str,Any]",
    "asyncainvoke(input:dict[str,Any],config:RunnableConfig|None=None,**kwargs:Any,)‚Üídict[str,Any]#",
    "ainvoke",
    "(",
    "input:dict[str,Any]",
    "config:RunnableConfig|None=None",
    "**kwargs:Any",
    ")",
    "‚Üídict[str,Any]",
    "‚Üí",
    "dict[str,Any]",
    "apply(input_list:list[dict[str,Any]],callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None,)‚Üílist[dict[str,str]]#",
    "apply",
    "(",
    "input_list:list[dict[str,Any]]",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    ")",
    "‚Üílist[dict[str,str]]",
    "‚Üí",
    "list[dict[str,str]]",
    "asyncaprep_inputs(inputs:dict[str,Any]|Any,)‚Üídict[str,str]#",
    "aprep_inputs",
    "(",
    "inputs:dict[str,Any]|Any",
    ")",
    "‚Üídict[str,str]",
    "‚Üí",
    "dict[str,str]",
    "asyncaprep_outputs(inputs:dict[str,str],outputs:dict[str,str],return_only_outputs:bool=False,)‚Üídict[str,str]#",
    "aprep_outputs",
    "(",
    "inputs:dict[str,str]",
    "outputs:dict[str,str]",
    "return_only_outputs:bool=False",
    ")",
    "‚Üídict[str,str]",
    "‚Üí",
    "dict[str,str]",
    "asyncarun(*args:Any,callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None,tags:list[str]|None=None,metadata:dict[str,Any]|None=None,**kwargs:Any,)‚ÜíAny#",
    "arun",
    "(",
    "*args:Any",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    ")",
    "‚ÜíAny",
    "‚Üí",
    "Any",
    "asyncastream(input:Input,config:RunnableConfig|None=None,**kwargs:Any|None,)‚ÜíAsyncIterator[Output]#",
    "astream",
    "(",
    "input:Input",
    "config:RunnableConfig|None=None",
    "**kwargs:Any|None",
    ")",
    "‚ÜíAsyncIterator[Output]",
    "‚Üí",
    "AsyncIterator[Output]",
    "asyncastream_events(input:Any,config:RunnableConfig|None=None,*,version:Literal['v1','v2']='v2',include_names:Sequence[str]|None=None,include_types:Sequence[str]|None=None,include_tags:Sequence[str]|None=None,exclude_names:Sequence[str]|None=None,exclude_types:Sequence[str]|None=None,exclude_tags:Sequence[str]|None=None,**kwargs:Any,)‚ÜíAsyncIterator[StreamEvent]#",
    "astream_events",
    "(",
    "input:Any",
    "config:RunnableConfig|None=None",
    "*",
    "version:Literal['v1','v2']='v2'",
    "include_names:Sequence[str]|None=None",
    "include_types:Sequence[str]|None=None",
    "include_tags:Sequence[str]|None=None",
    "exclude_names:Sequence[str]|None=None",
    "exclude_types:Sequence[str]|None=None",
    "exclude_tags:Sequence[str]|None=None",
    "**kwargs:Any",
    ")",
    "‚ÜíAsyncIterator[StreamEvent]",
    "‚Üí",
    "AsyncIterator[StreamEvent]",
    "batch(inputs:list[Input],config:RunnableConfig|list[RunnableConfig]|None=None,*,return_exceptions:bool=False,**kwargs:Any|None,)‚Üílist[Output]#",
    "batch",
    "(",
    "inputs:list[Input]",
    "config:RunnableConfig|list[RunnableConfig]|None=None",
    "*",
    "return_exceptions:bool=False",
    "**kwargs:Any|None",
    ")",
    "‚Üílist[Output]",
    "‚Üí",
    "list[Output]",
    "batch_as_completed(inputs:Sequence[Input],config:RunnableConfig|Sequence[RunnableConfig]|None=None,*,return_exceptions:bool=False,**kwargs:Any|None,)‚ÜíIterator[tuple[int,Output|Exception]]#",
    "batch_as_completed",
    "(",
    "inputs:Sequence[Input]",
    "config:RunnableConfig|Sequence[RunnableConfig]|None=None",
    "*",
    "return_exceptions:bool=False",
    "**kwargs:Any|None",
    ")",
    "‚ÜíIterator[tuple[int,Output|Exception]]",
    "‚Üí",
    "Iterator[tuple[int,Output|Exception]]",
    "bind(**kwargs:Any,)‚ÜíRunnable[Input,Output]#",
    "bind",
    "(",
    "**kwargs:Any",
    ")",
    "‚ÜíRunnable[Input,Output]",
    "‚Üí",
    "Runnable[Input,Output]",
    "configurable_alternatives(which:ConfigurableField,*,default_key:str='default',prefix_keys:bool=False,**kwargs:Runnable[Input,Output]|Callable[[],Runnable[Input,Output]],)‚ÜíRunnableSerializable#",
    "configurable_alternatives",
    "(",
    "which:ConfigurableField",
    "*",
    "default_key:str='default'",
    "prefix_keys:bool=False",
    "**kwargs:Runnable[Input,Output]|Callable[[],Runnable[Input,Output]]",
    ")",
    "‚ÜíRunnableSerializable",
    "‚Üí",
    "RunnableSerializable",
    "configurable_fields(**kwargs:ConfigurableField|ConfigurableFieldSingleOption|ConfigurableFieldMultiOption,)‚ÜíRunnableSerializable#",
    "configurable_fields",
    "(",
    "**kwargs:ConfigurableField|ConfigurableFieldSingleOption|ConfigurableFieldMultiOption",
    ")",
    "‚ÜíRunnableSerializable",
    "‚Üí",
    "RunnableSerializable",
    "invoke(input:dict[str,Any],config:RunnableConfig|None=None,**kwargs:Any,)‚Üídict[str,Any]#",
    "invoke",
    "(",
    "input:dict[str,Any]",
    "config:RunnableConfig|None=None",
    "**kwargs:Any",
    ")",
    "‚Üídict[str,Any]",
    "‚Üí",
    "dict[str,Any]",
    "prep_inputs(inputs:dict[str,Any]|Any,)‚Üídict[str,str]#",
    "prep_inputs",
    "(",
    "inputs:dict[str,Any]|Any",
    ")",
    "‚Üídict[str,str]",
    "‚Üí",
    "dict[str,str]",
    "prep_outputs(inputs:dict[str,str],outputs:dict[str,str],return_only_outputs:bool=False,)‚Üídict[str,str]#",
    "prep_outputs",
    "(",
    "inputs:dict[str,str]",
    "outputs:dict[str,str]",
    "return_only_outputs:bool=False",
    ")",
    "‚Üídict[str,str]",
    "‚Üí",
    "dict[str,str]",
    "run(*args:Any,callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None,tags:list[str]|None=None,metadata:dict[str,Any]|None=None,**kwargs:Any,)‚ÜíAny#",
    "run",
    "(",
    "*args:Any",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    ")",
    "‚ÜíAny",
    "‚Üí",
    "Any",
    "save(file_path:Path|str,)‚ÜíNone#",
    "save",
    "(",
    "file_path:Path|str",
    ")",
    "‚ÜíNone",
    "‚Üí",
    "None",
    "stream(input:Input,config:RunnableConfig|None=None,**kwargs:Any|None,)‚ÜíIterator[Output]#",
    "stream",
    "(",
    "input:Input",
    "config:RunnableConfig|None=None",
    "**kwargs:Any|None",
    ")",
    "‚ÜíIterator[Output]",
    "‚Üí",
    "Iterator[Output]",
    "with_alisteners(*,on_start:AsyncListener|None=None,on_end:AsyncListener|None=None,on_error:AsyncListener|None=None,)‚ÜíRunnable[Input,Output]#",
    "with_alisteners",
    "(",
    "*",
    "on_start:AsyncListener|None=None",
    "on_end:AsyncListener|None=None",
    "on_error:AsyncListener|None=None",
    ")",
    "‚ÜíRunnable[Input,Output]",
    "‚Üí",
    "Runnable[Input,Output]",
    "with_config(config:RunnableConfig|None=None,**kwargs:Any,)‚ÜíRunnable[Input,Output]#",
    "with_config",
    "(",
    "config:RunnableConfig|None=None",
    "**kwargs:Any",
    ")",
    "‚ÜíRunnable[Input,Output]",
    "‚Üí",
    "Runnable[Input,Output]",
    "with_fallbacks(fallbacks:Sequence[Runnable[Input,Output]],*,exceptions_to_handle:tuple[type[BaseException],...]=(<class'Exception'>,),exception_key:Optional[str]=None)‚ÜíRunnableWithFallbacksT[Input,Output]#",
    "with_fallbacks",
    "(",
    "fallbacks:Sequence[Runnable[Input,Output]],*,exceptions_to_handle:tuple[type[BaseException],...]=(<class'Exception'>,),exception_key:Optional[str]=None",
    ")",
    "‚ÜíRunnableWithFallbacksT[Input,Output]",
    "‚Üí",
    "RunnableWithFallbacksT[Input,Output]",
    "with_listeners(*,on_start:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None,on_end:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None,on_error:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None,)‚ÜíRunnable[Input,Output]#",
    "with_listeners",
    "(",
    "*",
    "on_start:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None",
    "on_end:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None",
    "on_error:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None",
    ")",
    "‚ÜíRunnable[Input,Output]",
    "‚Üí",
    "Runnable[Input,Output]",
    "with_retry(*,retry_if_exception_type:tuple[type[BaseException],...]=(<class'Exception'>,),wait_exponential_jitter:bool=True,exponential_jitter_params:Optional[ExponentialJitterParams]=None,stop_after_attempt:int=3)‚ÜíRunnable[Input,Output]#",
    "with_retry",
    "(",
    "*,retry_if_exception_type:tuple[type[BaseException],...]=(<class'Exception'>,),wait_exponential_jitter:bool=True,exponential_jitter_params:Optional[ExponentialJitterParams]=None,stop_after_attempt:int=3",
    ")",
    "‚ÜíRunnable[Input,Output]",
    "‚Üí",
    "Runnable[Input,Output]",
    "with_types(*,input_type:type[Input]|None=None,output_type:type[Output]|None=None,)‚ÜíRunnable[Input,Output]#",
    "with_types",
    "(",
    "*",
    "input_type:type[Input]|None=None",
    "output_type:type[Output]|None=None",
    ")",
    "‚ÜíRunnable[Input,Output]",
    "‚Üí",
    "Runnable[Input,Output]"
  ],
  "parameters": [
    "llm:BaseLanguageModel",
    "*",
    "qa_prompt:BasePromptTemplate=PromptTemplate(input_variables=['context','question'],input_types={},partial_variables={},template=\"Youareanassistantthathelpstoformniceandhumanunderstandableanswers.\\nTheinformationpartcontainstheprovidedinformationthatyoumustusetoconstructananswer.\\nTheprovidedinformationisauthoritative,youmustneverdoubtitortrytouseyourinternalknowledgetocorrectit.\\nMaketheanswersoundasaresponsetothequestion.Donotmentionthatyoubasedtheresultonthegiveninformation.\\nHereisanexample:\\n\\nQuestion:WhichmanagersownNeo4jstocks?\\nContext:[manager:CTLLLC,manager:JANESTREETGROUPLLC]\\nHelpfulAnswer:CTLLLC,JANESTREETGROUPLLCownsNeo4jstocks.\\n\\nFollowthisexamplewhengeneratinganswers.\\nIftheprovidedinformationisempty,saythatyoudon'tknowtheanswer.\\nInformation:\\n{context}\\n\\nQuestion:{question}\\nHelpfulAnswer:\")",
    "cypher_prompt:BasePromptTemplate|None=None",
    "extra_instructions:str|None=None",
    "**kwargs:Any",
    "inputs:dict[str,Any]|Any",
    "return_only_outputs:bool=False",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "*",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "run_name:str|None=None",
    "include_run_info:bool=False",
    "inputs:list[Input]",
    "config:RunnableConfig|list[RunnableConfig]|None=None",
    "*",
    "return_exceptions:bool=False",
    "**kwargs:Any|None",
    "inputs:Sequence[Input]",
    "config:RunnableConfig|Sequence[RunnableConfig]|None=None",
    "*",
    "return_exceptions:bool=False",
    "**kwargs:Any|None",
    "inputs:dict[str,Any]|Any",
    "return_only_outputs:bool=False",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "*",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "run_name:str|None=None",
    "include_run_info:bool=False",
    "input:dict[str,Any]",
    "config:RunnableConfig|None=None",
    "**kwargs:Any",
    "input_list:list[dict[str,Any]]",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "inputs:dict[str,Any]|Any",
    "inputs:dict[str,str]",
    "outputs:dict[str,str]",
    "return_only_outputs:bool=False",
    "*args:Any",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    "input:Input",
    "config:RunnableConfig|None=None",
    "**kwargs:Any|None",
    "input:Any",
    "config:RunnableConfig|None=None",
    "*",
    "version:Literal['v1','v2']='v2'",
    "include_names:Sequence[str]|None=None",
    "include_types:Sequence[str]|None=None",
    "include_tags:Sequence[str]|None=None",
    "exclude_names:Sequence[str]|None=None",
    "exclude_types:Sequence[str]|None=None",
    "exclude_tags:Sequence[str]|None=None",
    "**kwargs:Any",
    "inputs:list[Input]",
    "config:RunnableConfig|list[RunnableConfig]|None=None",
    "*",
    "return_exceptions:bool=False",
    "**kwargs:Any|None",
    "inputs:Sequence[Input]",
    "config:RunnableConfig|Sequence[RunnableConfig]|None=None",
    "*",
    "return_exceptions:bool=False",
    "**kwargs:Any|None",
    "**kwargs:Any",
    "which:ConfigurableField",
    "*",
    "default_key:str='default'",
    "prefix_keys:bool=False",
    "**kwargs:Runnable[Input,Output]|Callable[[],Runnable[Input,Output]]",
    "**kwargs:ConfigurableField|ConfigurableFieldSingleOption|ConfigurableFieldMultiOption",
    "input:dict[str,Any]",
    "config:RunnableConfig|None=None",
    "**kwargs:Any",
    "inputs:dict[str,Any]|Any",
    "inputs:dict[str,str]",
    "outputs:dict[str,str]",
    "return_only_outputs:bool=False",
    "*args:Any",
    "callbacks:list[BaseCallbackHandler]|BaseCallbackManager|None=None",
    "tags:list[str]|None=None",
    "metadata:dict[str,Any]|None=None",
    "**kwargs:Any",
    "file_path:Path|str",
    "input:Input",
    "config:RunnableConfig|None=None",
    "**kwargs:Any|None",
    "*",
    "on_start:AsyncListener|None=None",
    "on_end:AsyncListener|None=None",
    "on_error:AsyncListener|None=None",
    "config:RunnableConfig|None=None",
    "**kwargs:Any",
    "fallbacks:Sequence[Runnable[Input,Output]],*,exceptions_to_handle:tuple[type[BaseException],...]=(<class'Exception'>,),exception_key:Optional[str]=None",
    "*",
    "on_start:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None",
    "on_end:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None",
    "on_error:Callable[[Run],None]|Callable[[Run,RunnableConfig],None]|None=None",
    "*,retry_if_exception_type:tuple[type[BaseException],...]=(<class'Exception'>,),wait_exponential_jitter:bool=True,exponential_jitter_params:Optional[ExponentialJitterParams]=None,stop_after_attempt:int=3",
    "*",
    "input_type:type[Input]|None=None",
    "output_type:type[Output]|None=None"
  ]
}