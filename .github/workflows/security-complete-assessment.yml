name: Complete Security Assessment

on:
  push:
    branches: [main]
  schedule:
    # Run complete security assessment weekly on Sundays at 12 AM UTC
    - cron: "0 0 * * 0"
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Type of security scan to run"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - sast
          - dependency
          - container
          - infrastructure

env:
  SECURITY_SCAN_VERSION: "1.0.0"

jobs:
  security-orchestrator:
    name: Security Assessment Orchestrator
    runs-on: ubuntu-latest
    outputs:
      run-sast: ${{ steps.determine-scans.outputs.run-sast }}
      run-dependency: ${{ steps.determine-scans.outputs.run-dependency }}
      run-container: ${{ steps.determine-scans.outputs.run-container }}
      run-infrastructure: ${{ steps.determine-scans.outputs.run-infrastructure }}
    steps:
      - name: Determine scans to run
        id: determine-scans
        run: |
          SCAN_TYPE="${{ github.event.inputs.scan_type || 'all' }}"
          echo "Scan type: $SCAN_TYPE"

          if [[ "$SCAN_TYPE" == "all" ]]; then
            echo "run-sast=true" >> $GITHUB_OUTPUT
            echo "run-dependency=true" >> $GITHUB_OUTPUT
            echo "run-container=true" >> $GITHUB_OUTPUT
            echo "run-infrastructure=true" >> $GITHUB_OUTPUT
          elif [[ "$SCAN_TYPE" == "sast" ]]; then
            echo "run-sast=true" >> $GITHUB_OUTPUT
            echo "run-dependency=false" >> $GITHUB_OUTPUT
            echo "run-container=false" >> $GITHUB_OUTPUT
            echo "run-infrastructure=false" >> $GITHUB_OUTPUT
          elif [[ "$SCAN_TYPE" == "dependency" ]]; then
            echo "run-sast=false" >> $GITHUB_OUTPUT
            echo "run-dependency=true" >> $GITHUB_OUTPUT
            echo "run-container=false" >> $GITHUB_OUTPUT
            echo "run-infrastructure=false" >> $GITHUB_OUTPUT
          elif [[ "$SCAN_TYPE" == "container" ]]; then
            echo "run-sast=false" >> $GITHUB_OUTPUT
            echo "run-dependency=false" >> $GITHUB_OUTPUT
            echo "run-container=true" >> $GITHUB_OUTPUT
            echo "run-infrastructure=false" >> $GITHUB_OUTPUT
          elif [[ "$SCAN_TYPE" == "infrastructure" ]]; then
            echo "run-sast=false" >> $GITHUB_OUTPUT
            echo "run-dependency=false" >> $GITHUB_OUTPUT
            echo "run-container=false" >> $GITHUB_OUTPUT
            echo "run-infrastructure=true" >> $GITHUB_OUTPUT
          fi

  sast-security-scan:
    name: SAST Security Analysis
    needs: security-orchestrator
    if: needs.security-orchestrator.outputs.run-sast == 'true'
    uses: ./.github/workflows/security-sast.yml
    secrets: inherit

  dependency-security-scan:
    name: Dependency Security Analysis
    needs: security-orchestrator
    if: needs.security-orchestrator.outputs.run-dependency == 'true'
    uses: ./.github/workflows/security-dependency-scan.yml
    secrets: inherit

  container-security-scan:
    name: Container Security Analysis
    needs: security-orchestrator
    if: needs.security-orchestrator.outputs.run-container == 'true'
    uses: ./.github/workflows/security-container-scan.yml
    secrets: inherit

  infrastructure-security-scan:
    name: Infrastructure Security Analysis
    needs: security-orchestrator
    if: needs.security-orchestrator.outputs.run-infrastructure == 'true'
    uses: ./.github/workflows/security-infrastructure-scan.yml
    secrets: inherit

  security-consolidation:
    name: Security Assessment Consolidation
    runs-on: ubuntu-latest
    needs:
      [
        security-orchestrator,
        sast-security-scan,
        dependency-security-scan,
        container-security-scan,
        infrastructure-security-scan,
      ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Install security reporting tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3-pip
          pip3 install requests PyYAML

      - name: Consolidate security findings
        run: |
          mkdir -p consolidated-reports

          echo "# Comprehensive Security Assessment Report" > consolidated-reports/security-summary.md
          echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> consolidated-reports/security-summary.md
          echo "Assessment Version: ${{ env.SECURITY_SCAN_VERSION }}" >> consolidated-reports/security-summary.md
          echo "" >> consolidated-reports/security-summary.md

          # Job status summary
          echo "## Security Scan Status" >> consolidated-reports/security-summary.md
          echo "| Scan Type | Status | Executed |" >> consolidated-reports/security-summary.md
          echo "|-----------|--------|----------|" >> consolidated-reports/security-summary.md
          echo "| SAST Analysis | ${{ needs.sast-security-scan.result || 'skipped' }} | ${{ needs.security-orchestrator.outputs.run-sast }} |" >> consolidated-reports/security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-security-scan.result || 'skipped' }} | ${{ needs.security-orchestrator.outputs.run-dependency }} |" >> consolidated-reports/security-summary.md
          echo "| Container Scan | ${{ needs.container-security-scan.result || 'skipped' }} | ${{ needs.security-orchestrator.outputs.run-container }} |" >> consolidated-reports/security-summary.md
          echo "| Infrastructure Scan | ${{ needs.infrastructure-security-scan.result || 'skipped' }} | ${{ needs.security-orchestrator.outputs.run-infrastructure }} |" >> consolidated-reports/security-summary.md
          echo "" >> consolidated-reports/security-summary.md

          # Count security findings
          echo "## Security Findings Summary" >> consolidated-reports/security-summary.md

          # Count findings from various JSON reports
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          LOW_COUNT=0

          # Process JSON reports if they exist
          if find security-reports -name "*.json" -type f | head -1 > /dev/null 2>&1; then
            for report in security-reports/**/*.json; do
              if [[ -f "$report" && -s "$report" ]]; then
                # Try to extract severity counts (adapt based on actual report structures)
                CRITICAL_COUNT=$((CRITICAL_COUNT + $(jq '[.[] | select(.severity == "CRITICAL" or .severity == "critical")] | length' "$report" 2>/dev/null || echo 0)))
                HIGH_COUNT=$((HIGH_COUNT + $(jq '[.[] | select(.severity == "HIGH" or .severity == "high")] | length' "$report" 2>/dev/null || echo 0)))
                MEDIUM_COUNT=$((MEDIUM_COUNT + $(jq '[.[] | select(.severity == "MEDIUM" or .severity == "medium")] | length' "$report" 2>/dev/null || echo 0)))
                LOW_COUNT=$((LOW_COUNT + $(jq '[.[] | select(.severity == "LOW" or .severity == "low")] | length' "$report" 2>/dev/null || echo 0)))
              fi
            done
          fi

          echo "| Severity | Count |" >> consolidated-reports/security-summary.md
          echo "|----------|-------|" >> consolidated-reports/security-summary.md
          echo "| 🔴 Critical | $CRITICAL_COUNT |" >> consolidated-reports/security-summary.md
          echo "| 🟠 High | $HIGH_COUNT |" >> consolidated-reports/security-summary.md
          echo "| 🟡 Medium | $MEDIUM_COUNT |" >> consolidated-reports/security-summary.md
          echo "| 🟢 Low | $LOW_COUNT |" >> consolidated-reports/security-summary.md
          echo "" >> consolidated-reports/security-summary.md

          # Security framework compliance
          echo "## Security Framework Compliance" >> consolidated-reports/security-summary.md
          echo "### OWASP Top 10 Coverage" >> consolidated-reports/security-summary.md
          echo "- ✅ A01 - Broken Access Control (SAST + Container + K8s RBAC)" >> consolidated-reports/security-summary.md
          echo "- ✅ A02 - Cryptographic Failures (Bandit + Semgrep)" >> consolidated-reports/security-summary.md
          echo "- ✅ A03 - Injection (SAST + Input validation)" >> consolidated-reports/security-summary.md
          echo "- ✅ A04 - Insecure Design (Architecture review + IaC)" >> consolidated-reports/security-summary.md
          echo "- ✅ A05 - Security Misconfiguration (Container + K8s + Terraform)" >> consolidated-reports/security-summary.md
          echo "- ✅ A06 - Vulnerable Components (SCA + Dependency scanning)" >> consolidated-reports/security-summary.md
          echo "- ✅ A07 - Authentication Failures (SAST + API security)" >> consolidated-reports/security-summary.md
          echo "- ✅ A08 - Data Integrity Failures (Supply chain + SBOM)" >> consolidated-reports/security-summary.md
          echo "- ✅ A09 - Security Logging Failures (Infrastructure audit)" >> consolidated-reports/security-summary.md
          echo "- ✅ A10 - Server-Side Request Forgery (SAST + Network policies)" >> consolidated-reports/security-summary.md
          echo "" >> consolidated-reports/security-summary.md

          # AI/ML Security Coverage
          echo "### AI/ML Security Framework" >> consolidated-reports/security-summary.md
          echo "- 🔍 Model Security (Adversarial attack prevention)" >> consolidated-reports/security-summary.md
          echo "- 🔍 Prompt Injection Protection (Input validation)" >> consolidated-reports/security-summary.md
          echo "- 🔍 Data Privacy (GDPR compliance + Data minimization)" >> consolidated-reports/security-summary.md
          echo "- 🔍 Model Governance (Audit trails + Version control)" >> consolidated-reports/security-summary.md
          echo "" >> consolidated-reports/security-summary.md

          # Recommendations
          echo "## Priority Recommendations" >> consolidated-reports/security-summary.md
          echo "1. **Immediate Action Required:**" >> consolidated-reports/security-summary.md
          echo "   - Replace hardcoded API keys with secure secrets management" >> consolidated-reports/security-summary.md
          echo "   - Update Next.js dependencies to patch known CVEs" >> consolidated-reports/security-summary.md
          echo "   - Implement HTTPS enforcement across all services" >> consolidated-reports/security-summary.md
          echo "" >> consolidated-reports/security-summary.md
          echo "2. **Short-term Goals (1-2 weeks):**" >> consolidated-reports/security-summary.md
          echo "   - Strengthen CORS policies and CSP headers" >> consolidated-reports/security-summary.md
          echo "   - Address file access vulnerabilities" >> consolidated-reports/security-summary.md
          echo "   - Implement container security hardening" >> consolidated-reports/security-summary.md
          echo "" >> consolidated-reports/security-summary.md
          echo "3. **Medium-term Goals (1 month):**" >> consolidated-reports/security-summary.md
          echo "   - Deploy comprehensive monitoring and logging" >> consolidated-reports/security-summary.md
          echo "   - Implement Kubernetes security policies" >> consolidated-reports/security-summary.md
          echo "   - Establish incident response procedures" >> consolidated-reports/security-summary.md
          echo "" >> consolidated-reports/security-summary.md

          # Create JSON summary for automated processing
          cat > consolidated-reports/security-summary.json << EOF
          {
            "assessment_version": "${{ env.SECURITY_SCAN_VERSION }}",
            "generated_at": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
            "scan_results": {
              "sast": "${{ needs.sast-security-scan.result || 'skipped' }}",
              "dependency": "${{ needs.dependency-security-scan.result || 'skipped' }}",
              "container": "${{ needs.container-security-scan.result || 'skipped' }}",
              "infrastructure": "${{ needs.infrastructure-security-scan.result || 'skipped' }}"
            },
            "severity_counts": {
              "critical": $CRITICAL_COUNT,
              "high": $HIGH_COUNT,
              "medium": $MEDIUM_COUNT,
              "low": $LOW_COUNT
            },
            "total_findings": $((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT)),
            "risk_level": "$([ $CRITICAL_COUNT -gt 0 ] && echo 'CRITICAL' || [ $HIGH_COUNT -gt 3 ] && echo 'HIGH' || echo 'MEDIUM')"
          }
          EOF

          # Display summary
          cat consolidated-reports/security-summary.md

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-report
          path: consolidated-reports/
          retention-days: 90

      - name: Create security dashboard summary
        run: |
          echo "## 🛡️ Comprehensive Security Assessment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat consolidated-reports/security-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Security assessment notification
        if: always()
        run: |
          RISK_LEVEL=$(jq -r '.risk_level' consolidated-reports/security-summary.json)
          TOTAL_FINDINGS=$(jq -r '.total_findings' consolidated-reports/security-summary.json)

          echo "Security assessment completed with $TOTAL_FINDINGS total findings at $RISK_LEVEL risk level"

          if [[ "$RISK_LEVEL" == "CRITICAL" ]]; then
            echo "::warning::Critical security issues found - immediate action required"
            exit 1
          elif [[ "$RISK_LEVEL" == "HIGH" ]]; then
            echo "::warning::High-priority security issues found - review required"
          fi

  security-policy-enforcement:
    name: Security Policy Enforcement
    runs-on: ubuntu-latest
    needs: [security-consolidation]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download consolidated report
        uses: actions/download-artifact@v4
        with:
          name: consolidated-security-report
          path: security-reports

      - name: Enforce security policies
        run: |
          CRITICAL_COUNT=$(jq -r '.severity_counts.critical' security-reports/security-summary.json)
          HIGH_COUNT=$(jq -r '.severity_counts.high' security-reports/security-summary.json)

          echo "Security Policy Enforcement:"
          echo "- Critical findings: $CRITICAL_COUNT (Threshold: 0)"
          echo "- High findings: $HIGH_COUNT (Threshold: 5)"

          # Enforce critical findings policy
          if [[ $CRITICAL_COUNT -gt 0 ]]; then
            echo "::error::Security policy violation: $CRITICAL_COUNT critical findings exceed threshold of 0"
            echo "::error::Deployment blocked until critical security issues are resolved"
            exit 1
          fi

          # Warn on high findings
          if [[ $HIGH_COUNT -gt 5 ]]; then
            echo "::warning::Security policy warning: $HIGH_COUNT high-priority findings exceed recommended threshold of 5"
          fi

          echo "✅ Security policy enforcement passed"
