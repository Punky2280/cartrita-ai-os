name: codacy-analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '23 4 * * 1'

jobs:
  codacy:
    runs-on: ubuntu-latest
    outputs:
      regressions: ${{ steps.set-regression-output.outputs.regressions }}
    permissions:
      contents: read
      security-events: write
    env: {}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: '3.13'

      - name: Set up Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'

      - name: Install frontend dependencies (optional)
        working-directory: frontend
        run: |
          if [ -f package.json ]; then npm ci --ignore-scripts || true; fi

      - name: Resolve Codacy token (with fallback)
        id: token-resolution
        run: |
          if [ -n "$CODACY_TOKEN" ]; then echo "present=true" >> $GITHUB_OUTPUT; echo "[codacy] token env present"; else echo "present=false" >> $GITHUB_OUTPUT; echo "[codacy] token env missing"; fi

      # Run Codacy with token when available
      - name: Codacy Analysis CLI (with token)
        if: steps.token-resolution.outputs.present == 'true'
        uses: codacy/codacy-analysis-cli-action@5cc54a75f9ad88159bb54046196d920e40e367a5 # pinned v4.3.0
        with:
          directory: .
          format: sarif
          output: results.sarif
        env: {}

      # Fallback for forks/PRs without access to secrets
      - name: Codacy Analysis CLI (no token)
        if: steps.token-resolution.outputs.present == 'false'
        uses: codacy/codacy-analysis-cli-action@5cc54a75f9ad88159bb54046196d920e40e367a5 # pinned v4.3.0
        with:
          directory: .
          format: sarif
          output: results.sarif

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          sarif_file: results.sarif

      - name: Archive SARIF artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: codacy-sarif
          path: results.sarif
      - name: Compare SARIF against baseline
        run: |
          THRESHOLD="warning"
          REGRESS_REPORT="regressions.json"
          BASELINE_PATH="security/sarif/baseline.sarif"
          echo "[sarif-diff] threshold=$THRESHOLD baseline=$BASELINE_PATH current=results.sarif"
          if [ ! -f security/sarif/tooling/compare.py ]; then
            echo "ERROR: compare.py script missing" >&2
            exit 1
          fi
          python security/sarif/tooling/compare.py \
            --baseline "$BASELINE_PATH" \
            --current results.sarif \
            --threshold "$THRESHOLD" \
            --output "$REGRESS_REPORT" || STATUS=$?
          CODE=${STATUS:-0}
          if [ $CODE -eq 2 ]; then
            echo "regressions=true" >> $GITHUB_ENV
            echo "SARIF regressions detected (exit 2)." >&2
          elif [ $CODE -eq 0 ]; then
            echo "regressions=false" >> $GITHUB_ENV
            echo "No SARIF regressions above threshold."
          else
            echo "compare.py exited with code $CODE (treating as failure)" >&2
            exit $CODE
          fi
          if [ -f "$REGRESS_REPORT" ]; then
            echo "Archiving regression report"; mv "$REGRESS_REPORT" sarif-regressions.json
          fi
        shell: bash
      - name: Set regression output
        id: set-regression-output
        run: |
          echo "regressions=${regressions:-false}" >> $GITHUB_OUTPUT
      - name: Upload regression report
        if: steps.set-regression-output.outputs.regressions == 'true'
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: sarif-regressions
          path: sarif-regressions.json

  markdownlint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'
      - name: Install root dependencies
        run: |
          if [ -f package.json ]; then npm ci --ignore-scripts; fi
      - name: Run markdown lint
        run: npm run lint:md

  quality-gate:
    runs-on: ubuntu-latest
    needs: [codacy, markdownlint]
    if: ${{ always() }}
    steps:
      - name: Evaluate quality gate
        run: |
          if [ "${{ needs.codacy.result }}" != "success" ]; then
            echo "Codacy job failed or was skipped; failing quality gate." >&2
            exit 1
          fi
          if [ "${{ needs.markdownlint.result }}" != "success" ]; then
            echo "Markdown lint job failed; failing quality gate." >&2
            exit 1
          fi
          if [ "${{ needs.codacy.outputs.regressions }}" = "true" ]; then
            echo "SARIF regressions present; failing quality gate." >&2
            exit 1
          fi
          echo "Quality gate passed."
