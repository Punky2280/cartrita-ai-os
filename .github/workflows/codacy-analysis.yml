name: codacy-analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '23 4 * * 1'

jobs:
  codacy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    env:
      # Use primary secret only; runtime script applies fallback.
      CODACY_TOKEN: ${{ secrets.EXTERNAL_CODACY_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies (optional)
        working-directory: frontend
        run: |
          if [ -f package.json ]; then npm ci --ignore-scripts || true; fi

      - name: Resolve Codacy token (with fallback)
        run: |
          TOKEN="${{ env.CODACY_TOKEN }}"
          if [ -z "$TOKEN" ]; then
            TOKEN="${{ secrets.CARTRITA_AI_OS_2025 }}"
          fi
          if [ -n "$TOKEN" ]; then
            echo "[codacy] token: PRESENT"
            echo "CODACY_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          else
            echo "[codacy] token: MISSING"
          fi

      # Run Codacy with token when available
      - name: Codacy Analysis CLI (with token)
        if: ${{ env.CODACY_TOKEN != '' }}
        uses: codacy/codacy-analysis-cli-action@5cc54a75f9ad88159bb54046196d920e40e367a5 # pinned v4.3.0
        with:
          directory: .
          format: sarif
          output: results.sarif
        env:
          CODACY_API_TOKEN: ${{ env.CODACY_TOKEN }}

      # Fallback for forks/PRs without access to secrets
      - name: Codacy Analysis CLI (no token)
        if: ${{ env.CODACY_TOKEN == '' }}
        uses: codacy/codacy-analysis-cli-action@5cc54a75f9ad88159bb54046196d920e40e367a5 # pinned v4.3.0
        with:
          directory: .
          format: sarif
          output: results.sarif

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Archive SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: codacy-sarif
          path: results.sarif

  markdownlint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install root dependencies
        run: |
          if [ -f package.json ]; then npm ci --ignore-scripts; fi
      - name: Run markdown lint
        run: npm run lint:md

  quality-gate:
    runs-on: ubuntu-latest
    needs: [codacy, markdownlint]
    if: ${{ always() }}
    steps:
      - name: Evaluate quality gate
        run: |
          if [ "${{ needs.codacy.result }}" != "success" ]; then
            echo "Codacy job failed or was skipped; failing quality gate." >&2
            exit 1
          fi
          if [ "${{ needs.markdownlint.result }}" != "success" ]; then
            echo "Markdown lint job failed; failing quality gate." >&2
            exit 1
          fi
          echo "Quality gate passed."
