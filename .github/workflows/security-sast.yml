name: Security SAST Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_call:

jobs:
  bandit-python-security:
    name: Bandit Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit security scan
        run: |
          bandit -r services/ai-orchestrator/ -f json -o bandit-report.json
          bandit -r services/ai-orchestrator/ -f txt
        continue-on-error: true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  semgrep-security:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json .
          semgrep --config=auto .
        continue-on-error: true

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-security-report
          path: semgrep-report.json

  eslint-security:
    name: ESLint Security Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install security plugins
        run: |
          npm install --save-dev eslint-plugin-security
          npm install --save-dev @eslint/plugin-eslint-plugin

      - name: Run ESLint security analysis
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ../eslint-security-report.json
          npx eslint . --ext .js,.jsx,.ts,.tsx
        continue-on-error: true

      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-security-report
          path: eslint-security-report.json

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["javascript", "python"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  checkov-iac-security:
    name: Checkov IaC Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,dockerfile,kubernetes
          output_format: sarif
          output_file_path: checkov-report.sarif

      - name: Upload Checkov results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-report.sarif

  security-summary:
    name: Security Analysis Summary
    runs-on: ubuntu-latest
    needs:
      [
        bandit-python-security,
        semgrep-security,
        eslint-security,
        codeql-analysis,
        secrets-detection,
        checkov-iac-security,
      ]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create security summary
        run: |
          echo "## Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Bandit Python Security: ${{ needs.bandit-python-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep Security: ${{ needs.semgrep-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint Security: ${{ needs.eslint-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secrets Detection: ${{ needs.secrets-detection.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Checkov IaC Security: ${{ needs.checkov-iac-security.result }}" >> $GITHUB_STEP_SUMMARY
