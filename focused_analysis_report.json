{
  "timestamp": "2025-09-17T03:43:33.216887",
  "total_issues": 798,
  "severity_breakdown": {
    "low": 560,
    "medium": 225,
    "high": 12,
    "critical": 1
  },
  "type_breakdown": {
    "monitoring": 507,
    "error_handling": 223,
    "observability": 26,
    "code_quality": 29,
    "security": 13
  },
  "issues": [
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 35,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Fallback CORS configuration if shared module not available",
        "    cors_config = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 49,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Provide minimal fallbacks to avoid type annotation errors and keep endpoints functional",
        "    from enum import Enum"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 114,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Fallback auth function",
        "    async def verify_api_key(api_key: Optional[str] = None) -> str:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 135,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Fallback admin auth functions for development",
        "    class AdminUser:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 160,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    Settings = None",
        "try:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 166,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    setup_logging = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 280,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    DatabaseManager = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 285,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    CacheManager = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 293,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    get_fallback_provider_v2 = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 301,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    generate_fallback_response = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 213,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except json.JSONDecodeError:",
        "        return {\"raw_context\": context}",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 231,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:  # pragma: no cover - defensive",
        "        logger.warning(f\"Fallback provider health check failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 252,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.warning(\"Supervisor processing failed\", error=str(e))",
        "        return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 508,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(f\"Failed to initialize Sentry: {e}\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 588,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"\u274c Failed to start Cartrita AI Orchestrator\", error=str(e))",
        "        raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 675,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        # Record error metrics",
        "        if metrics_collector and metrics_collector.is_healthy():"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 827,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except HTTPException:",
        "        raise",
        "    except Exception as e:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 829,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        if metrics_collector:",
        "            duration = time.time() - start_time"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 886,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to retrieve metrics\", error=str(e), exc_info=True)",
        "        return JSONResponse("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 996,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(",
        "            \"Voice chat request failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1018,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to list agents\", error=str(e))",
        "        raise HTTPException(status_code=500, detail=\"Failed to retrieve agents\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1038,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except HTTPException:",
        "        raise",
        "    except Exception as e:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1040,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to get agent status\", error=str(e), agent_id=agent_id)",
        "        raise HTTPException("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1154,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"WebSocket error\", error=str(e))",
        "        try:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1222,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except HTTPException:",
        "        # Re-raise HTTP exceptions (from secure_file_manager)",
        "        raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1225,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"File upload failed\", error=str(e), filename=file.filename if file else \"unknown\")",
        "        raise HTTPException(status_code=500, detail=\"File upload failed\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1309,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except HTTPException:",
        "        # Re-raise HTTP exceptions",
        "        raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1312,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Multiple file upload failed\", error=str(e), batch_id=batch_id if 'batch_id' in locals() else \"unknown\")",
        "        raise HTTPException(status_code=500, detail=\"Multiple file upload failed\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1386,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except HTTPException:",
        "        # Re-raise HTTP exceptions",
        "        raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1389,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Audio transcription failed\", error=str(e), filename=audio.filename if audio else \"unknown\")",
        "        raise HTTPException(status_code=500, detail=\"Audio transcription failed\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1426,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Speech synthesis failed\", error=str(e), text=request.text[:50] if request.text else \"\")",
        "        raise HTTPException(status_code=500, detail=\"Speech synthesis failed\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1452,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(",
        "            \"Failed to reload agents\", "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1478,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to get system stats\", error=str(e))",
        "        raise HTTPException("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1510,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to get audit logs\", error=str(e))",
        "        raise HTTPException("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1549,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(",
        "            \"Failed to create admin token\", "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 266,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:  # pragma: no cover",
        "            logger.error(\"Fallback v1 failed\", error=str(e))",
        "    # Fallback to v2 adapter"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 273,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:  # pragma: no cover",
        "            logger.error(\"Fallback v2 failed\", error=str(e))",
        "    return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1099,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Streaming chat failed\", error=str(e))",
        "            yield f\"event: error\\ndata: {json.dumps({'message': 'internal error'})}\\n\\n\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1163,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            pass",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1366,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as save_error:",
        "            # Log warning but don't fail transcription if save fails",
        "            logger.warning("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 556,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as exc:",
        "                logger.error(\"Error stopping agent\", agent=getattr(agent.__class__, \"__name__\", \"unknown\"), error=str(exc))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 596,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as exc:",
        "                logger.error(\"Error stopping supervisor\", error=str(exc))",
        "        await _stop_specialized_agents()"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1158,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            pass",
        "    finally:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1289,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as file_error:",
        "                logger.error(",
        "                    \"Failed to upload file in batch\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 94,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except KeyboardInterrupt:",
        "        console.print(\"\\n[yellow]Gracefully shutting down Cartrita AI OS...[/yellow]\")",
        "    except Exception as e:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 96,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        console.print(f\"[red]Error starting service: {e}[/red]\")",
        "        sys.exit(1)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 180,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except KeyboardInterrupt:",
        "        console.print(\"\\n[yellow]Operation cancelled by user[/yellow]\")",
        "        sys.exit(130)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 183,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        console.print(f\"[red]Unexpected error: {e}[/red]\")",
        "        sys.exit(1)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 151,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            console.print(f\"\u274c [red]{name}[/red]: Not responding\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/admin_auth.py",
      "line_number": 153,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_admin_user\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_admin_user(",
        "    request: Request,",
        "    current_user: TokenData = Depends(get_current_user)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/admin_auth.py",
      "line_number": 297,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"verify_admin_api_key\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def verify_admin_api_key(request: Request) -> str:",
        "    \"\"\"",
        "    Verify admin API key (legacy method)."
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/admin_auth.py",
      "line_number": 348,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_admin_token\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_admin_token(user_id: str, admin_level: str = 'admin') -> str:"
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 72,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to initialize services\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 120,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                health_results[service_name] = {\"status\": \"error\", \"error\": str(e)}",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 139,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(\"Error shutting down service\", service=service_name, error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 103,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Web search failed\", query=query, error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 162,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Content extraction failed\", error=str(e))",
        "            return [{\"error\": str(e), \"success\": False}]"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 215,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Search and extract failed\", query=query, error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 229,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            return \"\"",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 255,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get search suggestions\", query=query, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 269,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {",
        "                \"status\": \"unhealthy\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 151,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as e:",
        "                    logger.warning(\"Failed to extract content from URL\", url=url, error=str(e))",
        "                    results.append({"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 43,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_access_token\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_access_token(self, user_id: str, permissions: list[str] = None) -> str:"
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 61,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_refresh_token\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_refresh_token(self, user_id: str) -> str:"
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 108,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except JWTError as e:",
        "            raise HTTPException(",
        "                status_code=status.HTTP_401_UNAUTHORIZED,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 211,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except HTTPException:",
        "            pass  # Fall back to API key check",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 225,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except HTTPException:",
        "            pass",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 85,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Model search failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 135,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Dataset search failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 173,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get model info\", model_id=model_id, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 213,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Paper search failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 242,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get space info\", space_id=space_id, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 255,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {",
        "                \"status\": \"unhealthy\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/rate_limiter.py",
      "line_number": 289,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"check_api_rate_limit\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def check_api_rate_limit(request: Request):",
        "    \"\"\"Standard rate limiting for API endpoints.\"\"\"",
        "    return await check_rate_limit(request)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/auth.py",
      "line_number": 17,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Fallback if shared module not available",
        "    def get_env_api_key():"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/auth.py",
      "line_number": 48,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ValueError:",
        "        expected_key = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/auth.py",
      "line_number": 74,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ValueError:",
        "        return \"dev-api-key-fallback\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 102,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Audio transcription failed\", error=str(e))",
        "            return {\"transcript\": \"\", \"confidence\": 0.0, \"words\": [], \"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 195,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Live transcription failed\", error=str(e))",
        "            yield {\"type\": \"error\", \"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 228,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Audio quality analysis failed\", error=str(e))",
        "            return {\"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 256,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get supported languages\", error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 271,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {",
        "                \"status\": \"unhealthy\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 190,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except asyncio.CancelledError:",
        "                logger.info(\"Live transcription session cancelled\")",
        "            finally:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 127,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Repository search failed\", query=query, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 190,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code search failed\", query=query, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 232,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get repository info\", owner=owner, repo=repo, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 287,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get repository contents\", owner=owner, repo=repo, path=path, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 332,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get file content\", owner=owner, repo=repo, path=path, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 393,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get repository issues\", owner=owner, repo=repo, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 437,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to create issue\", owner=owner, repo=repo, title=title, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 454,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {",
        "                \"status\": \"unhealthy\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 56,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except httpx.HTTPStatusError as e:",
        "                logger.error(\"GitHub API error\", status_code=e.response.status_code, response=e.response.text)",
        "                raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 59,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(\"GitHub request failed\", error=str(e))",
        "                raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 30,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:  # pragma: no cover - optional integration",
        "    convert_to_openai_tool = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 175,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"OpenAI API error\", error=str(e), error_type=type(e).__name__)",
        "            yield {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 296,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Chat request processing failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 435,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {\"status\": \"unhealthy\", \"error\": str(e)}",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 480,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Conversational chat failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 603,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Voice conversation processing failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 22,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    TRANSFORMERS_AVAILABLE = False",
        "    logging.warning(\"HuggingFace Transformers not available. Install with: pip install transformers torch\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 30,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    LANGCHAIN_AVAILABLE = False",
        "    logging.warning(\"LangChain not available. Install with: pip install langchain langchain-openai\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 203,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Error in finite state chatbot: {e}\")",
        "            return \"I'm here to help! Could you please rephrase your question or tell me what you'd like assistance with?\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 257,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(f\"Failed to initialize HuggingFace model: {e}\")",
        "            self.is_initialized = False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 306,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Error generating HuggingFace response: {e}\")",
        "            raise RuntimeError(f\"HuggingFace generation failed: {e}\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 458,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Rule-based system failed: {e}, using emergency response\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 336,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.warning(f\"Failed to initialize OpenAI client: {e}\")",
        "                self.openai_client = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 345,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.warning(f\"Failed to initialize HuggingFace provider: {e}\")",
        "                self.hf_provider = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 404,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.warning(f\"OpenAI API failed: {e}, falling back to local inference\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 433,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.warning(f\"HuggingFace local inference failed: {e}, falling back to rule-based\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 29,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    Redis = None",
        "    ConnectionPool = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 37,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    settings = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 26,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ImportError:",
        "        Pipeline = None",
        "        PubSub = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 89,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to connect to Redis\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 108,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Redis health check failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 123,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache get failed\", key=key, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 141,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache set failed\", key=key, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 152,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache delete failed\", keys=keys, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 163,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache exists check failed\", key=key, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 174,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache expire failed\", key=key, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 185,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache TTL check failed\", key=key, error=str(e))",
        "            return -2"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 215,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (TypeError, ValueError) as e:",
        "            logger.error(\"JSON encode failed\", key=key, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 230,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Hash get failed\", key=key, field=field, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 241,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Hash set failed\", key=key, field=field, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 252,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Hash getall failed\", key=key, error=str(e))",
        "            return {}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 263,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Hash delete failed\", key=key, fields=fields, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 278,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List lpush failed\", key=key, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 289,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List rpush failed\", key=key, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 300,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List lpop failed\", key=key, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 311,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List rpop failed\", key=key, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 322,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List lrange failed\", key=key, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 333,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List llen failed\", key=key, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 440,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Rate limit check failed\", key=key, error=str(e))",
        "            return True, limit  # Allow on error"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 455,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Publish failed\", channel=channel, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 471,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Subscribe failed\", channels=channels, error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 483,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Unsubscribe failed\", channels=channels, error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 494,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Get message failed\", error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 530,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Flushdb failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 542,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Info retrieval failed\", error=str(e))",
        "            return {}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 553,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Dbsize retrieval failed\", error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 199,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except json.JSONDecodeError as e:",
        "                logger.error(\"JSON decode failed\", key=key, error=str(e))",
        "        return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 232,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Chat request processing failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 329,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except ImportError as e:",
        "            logger.error(f\"Failed to import agents: {str(e)}\")",
        "            ResearchAgent = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 422,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                f\"Failed to get status for agent {agent_id}\", error=str(e)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 651,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Supervisor node failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 740,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Orchestration analysis failed: {e}\")",
        "            return self._determine_agent_by_keywords(user_message)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 1033,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as fallback_error:",
        "            logger.exception(\"Fallback provider failed in error handler\", error=str(fallback_error))",
        "            error_message = ("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 381,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    f\"Failed to initialize agent {agent_type}\", error=str(e)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 396,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    f\"Failed to get status for agent {agent_type}\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 508,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                # Last resort: create manually with defaults",
        "                logger.warning(f\"Failed to normalize state, creating new: {e}\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 730,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as parse_error:",
        "                logger.warning(",
        "                    \"Failed to parse orchestration decision, using intelligent fallback\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 870,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    f\"Agent {agent_type} execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 562,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as e:",
        "                    logger.error(\"Final fallback failed\", error=str(e))",
        "                    self._safe_append_message(state, {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 611,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                    except Exception as e:",
        "                        logger.error(\"Agent limit fallback failed\", error=str(e))",
        "                        self._safe_append_message(state, {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 26,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Clean fallback when OpenTelemetry is not available",
        "    metrics = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 39,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:",
        "    PROMETHEUS_READER_AVAILABLE = False",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 46,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:",
        "    _prom_client_spec = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 71,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:",
        "        PROMETHEUS_CLIENT_AVAILABLE = False",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 148,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to initialize metrics collector\", error=str(e))",
        "            # Don't raise - allow graceful degradation"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 169,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"OpenTelemetry setup failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 183,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Tracing setup failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 206,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Metrics setup failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 250,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Prometheus metrics setup failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 288,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to record request metrics\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 305,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to record error metrics\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 319,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to update connection metrics\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 332,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get metrics\", error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 352,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Error during metrics collector shutdown\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 126,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to connect to database\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 146,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Database health check failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 290,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(\"Migration failed\", error=str(e))",
        "                raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/middleware/https_security.py",
      "line_number": 164,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_https_middleware\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_https_middleware(force_https: bool = None) -> HTTPSSecurityMiddleware:"
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/middleware/https_security.py",
      "line_number": 14,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Fallback if shared config not available",
        "    csp_config = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/llm_factory.py",
      "line_number": 6,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:  # pragma: no cover - fallback lightweight logger",
        "    class _FallbackLogger:  # minimal interface",
        "        def error(self, *args, **kwargs):"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/llm_factory.py",
      "line_number": 53,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except TypeError as e:",
        "        logger.error(",
        "            \"ChatOpenAI initialization failed due to parameter mismatch\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/llm_factory.py",
      "line_number": 47,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as import_err:  # pragma: no cover",
        "            logger.error(\"Failed to import ChatOpenAI\", error=str(import_err))",
        "            raise RuntimeError(\"ChatOpenAI dependency unavailable; ensure langchain-openai installed\") from import_err"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_communication.py",
      "line_number": 94,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_secure_message\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_secure_message("
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_communication.py",
      "line_number": 140,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Message verification failed: {e}\")",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_communication.py",
      "line_number": 324,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except self.expected_exception as e:",
        "            self.failure_count += 1",
        "            self.last_failure_time = time.time()"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_communication.py",
      "line_number": 361,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Agent communication failed: {e}\")",
        "            # Fallback to basic response"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_communication.py",
      "line_number": 205,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except asyncio.TimeoutError as e:",
        "                logger.warning(f\"Request timeout (attempt {attempt + 1})\")",
        "                last_exception = e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_communication.py",
      "line_number": 211,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Request failed (attempt {attempt + 1}): {e}\")",
        "                last_exception = e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/sentry_config.py",
      "line_number": 80,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(f\"Failed to initialize Sentry: {e}\")",
        "        # Don't raise - we don't want Sentry issues to crash the app"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/sentry_config.py",
      "line_number": 210,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                capture_ai_error(",
        "                    error=e,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 18,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Fallback settings for when config is not available",
        "    from types import SimpleNamespace"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 110,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:",
        "        # Last resort: leave standard logging only",
        "        logging.getLogger(__name__).debug(\"Structlog configuration failed; continuing with stdlib logging only\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 42,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            level = \"INFO\"",
        "    if format_type is None:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 49,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            format_type = \"json\"",
        "    if log_file is None:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 56,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            log_file = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_file.py",
      "line_number": 153,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            raise HTTPException(",
        "                status_code=500,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_file.py",
      "line_number": 181,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            raise HTTPException(",
        "                status_code=500,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_file.py",
      "line_number": 206,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            raise HTTPException(",
        "                status_code=500,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/secure_file.py",
      "line_number": 231,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            return []",
        "    "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/config.py",
      "line_number": 381,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_directories\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_directories(cls, path: str) -> str:"
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/computer_use/computer_use_agent.py",
      "line_number": 286,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Computer use execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/computer_use/computer_use_agent.py",
      "line_number": 367,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Screenshot failed\", error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/computer_use/computer_use_agent.py",
      "line_number": 388,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"File operation failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/computer_use/computer_use_agent.py",
      "line_number": 415,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"System command failed\", command=command.command, error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/computer_use/computer_use_agent.py",
      "line_number": 458,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Task summary generation failed\", error=str(e))",
        "            return f\"Task completed with {len(file_results)} file operations and {len(command_results)} commands executed.\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/knowledge/knowledge_agent.py",
      "line_number": 110,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"Failed to initialize OpenAI client, will use fallback\", error=str(e))",
        "            self.knowledge_llm = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/knowledge/knowledge_agent.py",
      "line_number": 119,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to initialize fallback provider\", error=str(e))",
        "            self.fallback_provider = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/knowledge/knowledge_agent.py",
      "line_number": 215,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Knowledge execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/knowledge/knowledge_agent.py",
      "line_number": 279,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Document search failed\", error=str(e), query=query.query)",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/knowledge/knowledge_agent.py",
      "line_number": 300,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"db_manager search failed\", error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/knowledge/knowledge_agent.py",
      "line_number": 367,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"RAG answer generation failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/knowledge/knowledge_agent.py",
      "line_number": 320,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as conv_err:",
        "                logger.warning(\"Failed to convert search result\", error=str(conv_err))",
        "        return sources"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/knowledge/knowledge_agent.py",
      "line_number": 381,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as fallback_error:",
        "                    logger.error(\"Fallback provider also failed\", error=str(fallback_error))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/code/code_agent.py",
      "line_number": 18,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError as e:",
        "    # Defer logging until logger is configured below",
        "    _import_error = e  # store for later"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/code/code_agent.py",
      "line_number": 282,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Code execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/code/code_agent.py",
      "line_number": 368,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code generation failed\", error=str(e), language=language)",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/code/code_agent.py",
      "line_number": 432,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code analysis failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/code/code_agent.py",
      "line_number": 497,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code debugging failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/code/code_agent.py",
      "line_number": 562,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code optimization failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/code/code_agent.py",
      "line_number": 627,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code review failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/research/research_agent.py",
      "line_number": 132,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Research agent process_messages failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/research/research_agent.py",
      "line_number": 185,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Time query handling failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/research/research_agent.py",
      "line_number": 249,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Research execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/cartrita_agent.py",
      "line_number": 472,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Delegation failed\", error=str(e), agent_type=agent_type)",
        "            return f\"Ay, something went wrong with the delegation: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/cartrita_agent.py",
      "line_number": 488,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Key access request failed\", error=str(e), tool=tool_name)",
        "            return f\"Ay, Dios m\u00edo, something went wrong: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/cartrita_agent.py",
      "line_number": 517,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Status check failed\", error=str(e), agent_id=agent_id)",
        "            return f\"Status check failed: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/cartrita_agent.py",
      "line_number": 648,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_message = str(e)",
        "            logger.error("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/cartrita_agent.py",
      "line_number": 112,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Failed to initialize OpenAI client: {e}\")",
        "                self.mock_mode = True"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/cartrita_agent.py",
      "line_number": 602,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as fallback_error:",
        "                    logger.error(f\"Fallback provider failed: {fallback_error}\")",
        "                    # Ultimate fallback with personality"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 74,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to start Cartrita Orchestrator\", error=str(e))",
        "            self.is_running = False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 93,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Error stopping Cartrita Orchestrator\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 187,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            self.error_count += 1",
        "            processing_time = time.time() - request_start"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 277,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get agent statuses\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 313,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Agent routing failed for {agent_type}: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 363,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Personality overlay failed: {e}\")",
        "            # Return original response if overlay fails"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 380,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Research agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 398,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Knowledge agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 416,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Task agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 434,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Code agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 457,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Image agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 471,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get agent status\", agent_id=agent_id, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 498,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Health check failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 521,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to reload agents\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 545,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"MCP tool execution failed\", tool_name=tool_name, error=str(e))",
        "            return {\"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/orchestrator.py",
      "line_number": 616,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cleanup failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/api_key_manager.py",
      "line_number": 123,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to store API key\", key_id=key_id, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/api_key_manager.py",
      "line_number": 171,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to retrieve API key\", key_id=key_id, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/api_key_manager.py",
      "line_number": 288,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Failed to register tool\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/api_key_manager.py",
      "line_number": 398,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Key access request failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/api_key_manager.py",
      "line_number": 432,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Failed to return key access\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/api_key_manager.py",
      "line_number": 513,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    \"Error returning key access in context manager\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/mcp_protocol.py",
      "line_number": 159,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"LangSmith integration failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/mcp_protocol.py",
      "line_number": 297,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Tool registration failed\", tool_name=tool.name, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/mcp_protocol.py",
      "line_number": 341,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Message handling failed\", error=str(e), method=message.method)",
        "            return MCPMessage("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/mcp_protocol.py",
      "line_number": 449,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except asyncio.TimeoutError:",
        "            execution.status = ToolExecutionStatus.FAILED",
        "            execution.error = \"Tool execution timeout\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/mcp_protocol.py",
      "line_number": 467,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            execution.status = ToolExecutionStatus.FAILED",
        "            execution.error = str(e)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/cartrita_core/mcp_protocol.py",
      "line_number": 589,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"LangSmith logging failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/audio/audio_agent.py",
      "line_number": 154,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Audio processing failed\", error=str(e), task_type=request.task_type)",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/audio/audio_agent.py",
      "line_number": 180,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Transcription failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/audio/audio_agent.py",
      "line_number": 200,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Speech synthesis failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/audio/audio_agent.py",
      "line_number": 287,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Streaming conversation failed\", error=str(e))",
        "            yield f\"Error in streaming: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/task/task_agent.py",
      "line_number": 214,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Task execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/task/task_agent.py",
      "line_number": 327,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Task breakdown generation failed\", error=str(e))",
        "            # Return basic fallback task"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/task/task_agent.py",
      "line_number": 369,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Dependency analysis failed\", error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/task/task_agent.py",
      "line_number": 412,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Risk assessment failed\", error=str(e))",
        "            return ["
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/task/task_agent.py",
      "line_number": 491,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (json.JSONDecodeError, ValueError):",
        "            return []",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/image/image_agent.py",
      "line_number": 150,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image processing failed\", error=str(e), task_type=request.task_type)",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/image/image_agent.py",
      "line_number": 175,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image generation failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/image/image_agent.py",
      "line_number": 258,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image analysis failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/image/image_agent.py",
      "line_number": 292,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image editing failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/image/image_agent.py",
      "line_number": 335,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Batch generation failed for prompt {i}\", error=str(e))",
        "                results.append(None)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/image/image_agent.py",
      "line_number": 361,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Batch analysis failed for image {image_name}\", error=str(e))",
        "                results.append(None)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents_backup/reasoning/reasoning_agent.py",
      "line_number": 222,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Problem solving failed\", error=str(e), problem=request.problem[:100])",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 245,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            self.logger.warning(f\"Memory processing failed: {e}\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 299,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return MemoryResponse(",
        "                "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 351,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return MemoryResponse(",
        "                "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 397,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return MemoryResponse(",
        "                "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 448,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return MemoryResponse(",
        "                "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 503,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return MemoryResponse(",
        "                "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 536,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return MemoryResponse(",
        "                "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 586,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return MemoryResponse(",
        "                "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/memory/memory_agent.py",
      "line_number": 630,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                self.logger.error(f\"Memory request processing failed: {e}\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 259,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return self._build_error_response(e, start_time, metadata, locals())",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 447,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Screenshot failed\", error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 468,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"File operation failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 495,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"System command failed\", command=command.command, error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 538,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Task summary generation failed\", error=str(e))",
        "            return f\"Task completed with {len(file_results)} file operations and {len(command_results)} commands executed.\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 110,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"Failed to initialize OpenAI client, will use fallback\", error=str(e))",
        "            self.knowledge_llm = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 119,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to initialize fallback provider\", error=str(e))",
        "            self.fallback_provider = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 186,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return self._build_knowledge_error_response(e, start_time, metadata, locals())",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 310,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Document search failed\", error=str(e), query=query.query)",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 331,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"db_manager search failed\", error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 417,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (ValueError, TypeError):",
        "            return 0.0",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 474,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"RAG answer generation failed\", error=str(e))",
        "            # Fall back to alternative methods"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 343,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as conv_err:",
        "                logger.warning(\"Failed to convert search result\", error=str(conv_err))",
        "        return sources"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 503,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as fallback_error:",
        "                logger.error(\"Fallback provider also failed\", error=str(fallback_error))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 18,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError as e:",
        "    # Defer logging until logger is configured below",
        "    _import_error = e  # store for later"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 248,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return self._build_code_error_response(e, start_time, metadata, locals())",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 341,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return self._create_generation_error_response(e, generation_params[\"language\"])",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 454,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return self._create_analysis_error_response(e, language)",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 576,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code debugging failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 641,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code optimization failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 706,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code review failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/research/research_agent.py",
      "line_number": 132,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Research agent process_messages failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/research/research_agent.py",
      "line_number": 185,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Time query handling failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/research/research_agent.py",
      "line_number": 249,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Research execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 477,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Delegation failed\", error=str(e), agent_type=agent_type)",
        "            return f\"Ay, something went wrong with the delegation: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 493,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Key access request failed\", error=str(e), tool=tool_name)",
        "            return f\"Ay, Dios m\u00edo, something went wrong: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 522,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Status check failed\", error=str(e), agent_id=agent_id)",
        "            return f\"Status check failed: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 653,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_message = str(e)",
        "            logger.error("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 112,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Failed to initialize OpenAI client: {e}\")",
        "                self.mock_mode = True"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 607,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as fallback_error:",
        "                    logger.error(f\"Fallback provider failed: {fallback_error}\")",
        "                    # Ultimate fallback with personality"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 74,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to start Cartrita Orchestrator\", error=str(e))",
        "            self.is_running = False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 93,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Error stopping Cartrita Orchestrator\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 191,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            self.error_count += 1",
        "            processing_time = time.time() - request_start"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 281,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get agent statuses\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 319,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Agent routing failed for {agent_type}: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 369,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Personality overlay failed: {e}\")",
        "            # Return original response if overlay fails"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 386,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Research agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 404,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Knowledge agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 422,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Task agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 440,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Code agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 463,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Image agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 491,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Memory agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 505,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get agent status\", agent_id=agent_id, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 532,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Health check failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 555,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to reload agents\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 579,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"MCP tool execution failed\", tool_name=tool_name, error=str(e))",
        "            return {\"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 650,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cleanup failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 123,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to store API key\", key_id=key_id, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 171,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to retrieve API key\", key_id=key_id, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 288,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Failed to register tool\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 398,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Key access request failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 432,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Failed to return key access\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 513,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    \"Error returning key access in context manager\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 159,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"LangSmith integration failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 297,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Tool registration failed\", tool_name=tool.name, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 341,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Message handling failed\", error=str(e), method=message.method)",
        "            return MCPMessage("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 449,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except asyncio.TimeoutError:",
        "            execution.status = ToolExecutionStatus.FAILED",
        "            execution.error = \"Tool execution timeout\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 467,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            execution.status = ToolExecutionStatus.FAILED",
        "            execution.error = str(e)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 589,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"LangSmith logging failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/multi_provider_orchestrator.py",
      "line_number": 401,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (RuntimeError, ValueError, TimeoutError) as _:",
        "            return None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/multi_provider_orchestrator.py",
      "line_number": 466,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            # Record failure",
        "            execution_time = (datetime.now() - start_time).total_seconds()"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/multi_provider_orchestrator.py",
      "line_number": 540,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (LookupError, ValueError, ImportError, TypeError):",
        "            # Fallback estimation (4 characters per token average)",
        "            total_length = len(query)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/multi_provider_orchestrator.py",
      "line_number": 552,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (LookupError, ValueError, ImportError, TypeError):",
        "            return len(response) // 4",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/multi_provider_orchestrator.py",
      "line_number": 96,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except ImportError:",
        "                basic_llm = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/multi_provider_orchestrator.py",
      "line_number": 228,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"Failed to initialize model {model_id}: {e}\")",
        "                continue"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/advanced_tool_agent.py",
      "line_number": 22,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:  # pragma: no cover - optional dependency path",
        "    LANGCHAIN_AVAILABLE = False",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/advanced_tool_agent.py",
      "line_number": 215,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return f\"Tool execution failed: {str(e)}\"",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_math.py",
      "line_number": 51,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            raise ValueError(f\"Invalid mathematical expression: {e}\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/base_tool.py",
      "line_number": 12,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:  # pragma: no cover - optional dependency path",
        "    LANGCHAIN_AVAILABLE = False",
        "    try:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/base_tool.py",
      "line_number": 16,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:  # pragma: no cover",
        "        from pydantic import BaseModel  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/base_tool.py",
      "line_number": 95,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:  # pragma: no cover - runtime path",
        "            exec_time = time.time() - start_time",
        "            self._update_metrics(False, exec_time, str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/base_tool.py",
      "line_number": 121,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:  # pragma: no cover",
        "            exec_time = time.time() - start_time",
        "            self._update_metrics(False, exec_time, str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/reasoning_chain_agent.py",
      "line_number": 20,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:",
        "    LANGCHAIN_AVAILABLE = False",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/reasoning_chain_agent.py",
      "line_number": 60,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:",
        "    try:",
        "        from pydantic.v1 import BaseModel, Field  # type: ignore"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/reasoning_chain_agent.py",
      "line_number": 63,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:  # pragma: no cover",
        "        # Last-resort minimal shim",
        "        class BaseModel:  # type: ignore"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/reasoning_chain_agent.py",
      "line_number": 175,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            raise OutputParserException(f\"Failed to parse reasoning step: {e}\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/reasoning_chain_agent.py",
      "line_number": 389,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            result.final_answer = f\"Reasoning failed: {str(e)}\"",
        "            result.confidence_score = 0.0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/reasoning_chain_agent.py",
      "line_number": 493,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            return True  # Default to valid if validation fails",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/reasoning_chain_agent.py",
      "line_number": 471,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"Error in reasoning step {step_num}: {e}\")",
        "                break"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/reasoning_chain_agent.py",
      "line_number": 584,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except (IndexError, ValueError):",
        "                    pass",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_code.py",
      "line_number": 35,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return f\"Execution error: {e}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem_secure.py",
      "line_number": 41,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to read file: {str(e)}\"",
        "            logger.error(\"File read failed\", file_path=file_path, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem_secure.py",
      "line_number": 74,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to write file: {str(e)}\"",
        "            logger.error(\"File write failed\", file_path=file_path, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem_secure.py",
      "line_number": 123,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to list directory: {str(e)}\"",
        "            logger.error(\"Directory listing failed\", subdirectory=subdirectory, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem_secure.py",
      "line_number": 159,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to delete file: {str(e)}\"",
        "            logger.error(\"File deletion failed\", file_path=file_path, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem_secure.py",
      "line_number": 201,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to get file info: {str(e)}\"",
        "            logger.error(\"File info failed\", file_path=file_path, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem_secure.py",
      "line_number": 147,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as delete_error:",
        "                    logger.debug(",
        "                        \"File not found in directory\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem_secure.py",
      "line_number": 196,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception:",
        "                    continue",
        "            "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem_secure.py",
      "line_number": 103,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                    except Exception as stat_error:",
        "                        logger.warning(",
        "                            \"Failed to get file stats\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/safe_eval.py",
      "line_number": 25,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except SyntaxError as e:",
        "        raise ValueError(\"Only single-expression Python is allowed\") from e",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem.py",
      "line_number": 38,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to read file: {str(e)}\"",
        "            logger.error(\"File read failed\", file_path=file_path, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem.py",
      "line_number": 71,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to write file: {str(e)}\"",
        "            logger.error(\"File write failed\", file_path=file_path, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem.py",
      "line_number": 119,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to list directory: {str(e)}\"",
        "            logger.error(\"Directory listing failed\", directory=directory, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem.py",
      "line_number": 159,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to delete file: {str(e)}\"",
        "            logger.error(\"File deletion failed\", file_path=file_path, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem.py",
      "line_number": 201,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Failed to get file info: {str(e)}\"",
        "            logger.error(\"File info failed\", file_path=file_path, error=str(e))"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem.py",
      "line_number": 147,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as search_error:",
        "                    logger.debug(",
        "                        \"File not found in directory\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem.py",
      "line_number": 196,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception:",
        "                    continue",
        "            "
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_enhanced/tools_filesystem.py",
      "line_number": 99,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                    except Exception as stat_error:",
        "                        logger.warning(",
        "                            \"Failed to get file stats\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/audio/audio_agent.py",
      "line_number": 154,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Audio processing failed\", error=str(e), task_type=request.task_type)",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/audio/audio_agent.py",
      "line_number": 180,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Transcription failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/audio/audio_agent.py",
      "line_number": 200,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Speech synthesis failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/audio/audio_agent.py",
      "line_number": 287,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Streaming conversation failed\", error=str(e))",
        "            yield f\"Error in streaming: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_templates/tool_langchain.py",
      "line_number": 55,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Error in {self.name}: {str(e)}\"",
        "            if run_manager:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/langchain_templates/tool_langchain.py",
      "line_number": 89,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_msg = f\"Error in {self.name}: {str(e)}\"",
        "            if run_manager:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 214,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Task execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 327,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Task breakdown generation failed\", error=str(e))",
        "            # Return basic fallback task"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 369,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Dependency analysis failed\", error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 412,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Risk assessment failed\", error=str(e))",
        "            return ["
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 491,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (json.JSONDecodeError, ValueError):",
        "            return []",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 150,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image processing failed\", error=str(e), task_type=request.task_type)",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 175,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image generation failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 258,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image analysis failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 292,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image editing failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 335,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Batch generation failed for prompt {i}\", error=str(e))",
        "                results.append(None)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 361,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Batch analysis failed for image {image_name}\", error=str(e))",
        "                results.append(None)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/reasoning/reasoning_agent.py",
      "line_number": 222,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Problem solving failed\", error=str(e), problem=request.problem[:100])",
        "            raise"
      ]
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 108,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.optimizeBrowserPerformance();"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 111,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.prewarmConnections();"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 121,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Voice Service Layer initialized for sub-300ms latency\");"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 138,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await audioContext.resume();"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 200,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log("
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 241,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Optimizing for lower latency...\");"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 249,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Switched to faster think model\");"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 275,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Voice Service Layer disposed\");"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 298,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 76,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Attempting to stream from:\", url);"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 88,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetchPromise;"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 97,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const errorBody = await response.text();"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 125,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.processSSEStream(response.body, {"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 259,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetchPromise;"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 268,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const errorBody = await response.text();"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 291,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.processSSEStream(response.body, {"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 347,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetch(`${this.baseUrl}/api/chat`, {"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 360,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const data = await response.json();"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 396,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetch(`${this.baseUrl}/api/chat/voice`, {"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 469,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { done, value } = await reader.read();"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 484,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await new Promise((resolve) => setTimeout(resolve, delay));"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 516,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<User>(\"GET\", \"/auth/me\");"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 555,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<Conversation>("
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 609,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<Message[]>(\"GET\", endpoint);"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 642,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<ChatResponse>(\"POST\", \"/chat\", request);"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 695,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 869,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { eventSource, conversationId } = await this.streamChatSSE("
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 885,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { websocket, conversationId } = await this.streamChatWebSocket("
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 911,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { close } = await this.streamChat(message, {"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 926,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await new Promise((resolve) => setTimeout(resolve, 100));"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 937,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<Agent[]>(\"GET\", \"/agents\");"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 954,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<Agent>(\"GET\", `/agents/${id}`);"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1041,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<HealthStatus>(\"GET\", \"/health\");"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1148,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.get(\"/api/search\", { params });"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1159,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.get(\"/api/settings\");"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1164,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.put(\"/api/settings\", settings);"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1170,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.client.delete(`/api/files/${fileId}`);"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1177,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.get(\"/api/files\", { params });"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1187,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.post(endpoint, data, config);"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1196,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.put(endpoint, data, config);"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 1205,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.patch(endpoint, data, config);"
    },
    {
      "file_path": "frontend/src/services/voiceOutput.ts",
      "line_number": 97,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.voiceService.synthesizeSpeech(item.text, {"
    },
    {
      "file_path": "frontend/src/services/voiceOutput.ts",
      "line_number": 127,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.voiceService.synthesizeSpeech(text, {"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 222,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "this.audioStream = await navigator.mediaDevices.getUserMedia({"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 293,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Deepgram connection opened\");"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 306,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Deepgram connection closed\");"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 365,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const arrayBuffer = await audioBlob.arrayBuffer();"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 370,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 447,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.speak.request("
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 457,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const stream = await response.getStream();"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 458,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const audioBuffer = await this.streamToArrayBuffer(stream);"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 461,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.playAudioBuffer(audioBuffer);"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 480,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { done, value } = await reader.read();"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 503,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const decodedBuffer = await audioContext.decodeAudioData(audioBuffer);"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 212,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceServiceRef.current.startVoiceRecording();"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 216,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const stream = await navigator.mediaDevices.getUserMedia({"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 230,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceServiceRef.current.stopVoiceRecording();"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 265,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const voiceAgentWs = await voiceServiceRef.current.startVoiceAgent({"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 298,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const arrayBuffer = await audioBlob.arrayBuffer();"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 319,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await stopRecording();"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 321,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await startRecording();"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 340,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Voice config updated:\", config);"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 118,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 257,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await initializeService();"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 261,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await serviceRef.current.startVoiceRecording();"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 271,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await startAnalysis(stream);"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 286,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await serviceRef.current.stopVoiceRecording();"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 318,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await initializeService();"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 335,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await serviceRef.current.startVoiceAgent(agentConfig);"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 352,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await serviceRef.current.stopVoiceRecording();"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 109,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Function call:\", functionName, args);"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 114,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Tool result:\", toolName, result);"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 152,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Stream metrics:\", metrics);"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 304,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.postChat({"
    },
    {
      "file_path": "frontend/src/hooks/index.ts",
      "line_number": 432,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "//       for await (const chunk of apiClient.streamChat(conversationId, message)) {"
    },
    {
      "file_path": "frontend/src/hooks/index.ts",
      "line_number": 555,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.post(\"/api/files/upload\", formData, {"
    },
    {
      "file_path": "frontend/src/hooks/index.ts",
      "line_number": 574,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.post("
    },
    {
      "file_path": "frontend/src/hooks/index.ts",
      "line_number": 653,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await updatePreferences(updates);"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceOutput.ts",
      "line_number": 124,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceSpeak(text);"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceOutput.ts",
      "line_number": 194,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await speak(testText);"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 100,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Voice streaming connected\");"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 105,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Voice streaming disconnected\");"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 120,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Received agent response via stream:\", response);"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 194,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await deepgramVoice.startVoiceAgent(config);"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 198,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await startStreaming();"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 212,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await deepgramVoice.stopVoiceAgent();"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 216,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await stopStreaming();"
    },
    {
      "file_path": "frontend/src/__tests__/streaming-timeout-fix.test.ts",
      "line_number": 66,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await streamingService.streamChat(request, options);"
    },
    {
      "file_path": "frontend/src/__tests__/streaming-timeout-fix.test.ts",
      "line_number": 114,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await streamingService.streamChat(request, options);"
    },
    {
      "file_path": "frontend/src/__tests__/streaming-timeout-fix.test.ts",
      "line_number": 162,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await requestPromise;"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 14,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const hashBuffer = await crypto.subtle.digest(\"SHA-256\", dataBuffer);"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 38,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const computedChecksum = await generateChecksum(filePath + timestamp);"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 85,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const checksum = await generateChecksum(data);"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 118,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.rollback();"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 170,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const checksum = await generateChecksum(serialized);"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 200,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const computedChecksum = await generateChecksum(data);"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 25,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "return await this.refreshPromise;"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 32,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const token = await this.refreshPromise;"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 44,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetch('/api/security/csrf-token', {"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 56,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const data = await response.json();"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 66,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('CSRF token refreshed');"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 70,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: token",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 87,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const token = await this.getToken();"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 349,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const csrfToken = await this.csrfManager.getToken();"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 357,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: token",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 363,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetch(`${this.baseURL}${endpoint}`, {"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 376,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const retryToken = await this.csrfManager.getToken();"
    },
    {
      "file_path": "frontend/src/utils/enhanced-security.ts",
      "line_number": 383,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const retryResponse = await fetch(`${this.baseURL}${endpoint}`, {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 98,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 101,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(voiceService.initialize()).resolves.not.toThrow();"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 110,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceService.initialize();"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 111,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceService.optimizeForLatency();"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 155,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 156,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startVoiceAgent({"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 179,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 180,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startStreaming(\"test-session-123\");"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 219,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(result.current.startVoiceAgent()).rejects.toThrow();"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 231,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(result.current.startRecording()).rejects.toThrow("
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 243,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceService.initialize();"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 250,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await new Promise((resolve) =>"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 284,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 285,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startVoiceAgent();"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 290,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 291,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startRecording();"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 302,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 303,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.stopVoiceAgent();"
    },
    {
      "file_path": "frontend/src/pages/api/upload/multiple.ts",
      "line_number": 13,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const corsHandled = await handleCorsPreflightAsync(req, res, \"POST,OPTIONS\");"
    },
    {
      "file_path": "frontend/src/pages/api/upload/multiple.ts",
      "line_number": 18,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/upload/index.ts",
      "line_number": 13,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const corsHandled = await handleCorsPreflightAsync(req, res, \"POST,OPTIONS\");"
    },
    {
      "file_path": "frontend/src/pages/api/upload/index.ts",
      "line_number": 18,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/voice/speak.ts",
      "line_number": 13,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const corsHandled = await handleCorsPreflightAsync(req, res, \"POST,OPTIONS\");"
    },
    {
      "file_path": "frontend/src/pages/api/voice/speak.ts",
      "line_number": 18,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/voice/transcribe.ts",
      "line_number": 13,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const corsHandled = await handleCorsPreflightAsync(req, res, \"POST,OPTIONS\");"
    },
    {
      "file_path": "frontend/src/pages/api/voice/transcribe.ts",
      "line_number": 18,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/chat/index.ts",
      "line_number": 13,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const corsHandled = await handleCorsPreflightAsync(req, res, \"POST,OPTIONS\");"
    },
    {
      "file_path": "frontend/src/pages/api/chat/voice/stream.ts",
      "line_number": 13,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const corsHandled = await handleCorsPreflightAsync(req, res, \"GET,OPTIONS\");"
    },
    {
      "file_path": "frontend/src/pages/api/chat/voice/stream.ts",
      "line_number": 18,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/components/SearchInterface.tsx",
      "line_number": 438,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Navigate to:\", result);"
    },
    {
      "file_path": "frontend/src/components/SearchInterface.tsx",
      "line_number": 493,
      "issue_type": "code_quality",
      "severity": "medium",
      "description": "Direct DOM manipulation in React component",
      "suggested_fix": "Use React refs or state management instead",
      "code_snippet": "const searchInput = document.querySelector("
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 20,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Testing backend connection...\");"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 32,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const healthResponse = await fetch(`${baseUrl}/health`, {"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 46,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const healthJson = await healthResponse.json();"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 48,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Health check successful:\", healthJson);"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 59,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const chatResponse = await fetch(`${baseUrl}/api/chat`, {"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 77,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const chatJson = await chatResponse.json();"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 79,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Chat response received:\", chatJson);"
    },
    {
      "file_path": "frontend/src/components/FileUpload.tsx",
      "line_number": 394,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const result = await uploadFile.mutateAsync({"
    },
    {
      "file_path": "frontend/src/components/FileUpload.tsx",
      "line_number": 406,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const result = await uploadMultipleFiles.mutateAsync({"
    },
    {
      "file_path": "frontend/src/components/MessageBubble.tsx",
      "line_number": 222,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const success = await copyToClipboard(message.content);"
    },
    {
      "file_path": "frontend/src/components/VoiceInput.tsx",
      "line_number": 189,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const stream = await navigator.mediaDevices.getUserMedia({"
    },
    {
      "file_path": "frontend/src/components/VoiceInput.tsx",
      "line_number": 199,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await initializeAudioAnalysis(stream);"
    },
    {
      "file_path": "frontend/src/components/VoiceInput.tsx",
      "line_number": 229,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await processRecording(audioBlob);"
    },
    {
      "file_path": "frontend/src/components/VoiceInput.tsx",
      "line_number": 264,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const result = (await transcribeAudio.mutateAsync(file)) as {"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 244,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const health = await apiClient.getHealthStatus();"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 246,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"API is healthy, loading real data...\");"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 250,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const agentsResponse = await apiClient.getAgents();"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 260,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const conversationsResponse = await apiClient.getConversations();"
    },
    {
      "file_path": "frontend/src/components/VoiceOutput.tsx",
      "line_number": 167,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await speak(text);"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 325,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Stream complete:\", response.response);"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 373,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await abortable;"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 376,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.postChat(chatRequest);"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 425,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.editMessage("
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 460,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.deleteMessage("
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 495,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await handleSendMessage(toSend);"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 505,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.pinConversation(convId);"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 528,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "res = await apiClient.archiveConversation(convId);"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 531,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "res = await apiClient.updateConversation(convId, {"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 555,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.deleteConversation(convId);"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 581,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.createConversation({"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 629,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Files uploaded:\", files);"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 1113,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.uploadMultipleFiles("
    },
    {
      "file_path": "frontend/src/pages/about.tsx",
      "line_number": 148,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await fetch("
    },
    {
      "file_path": "frontend/src/pages/about.tsx",
      "line_number": 157,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const json = await res.json();"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 12,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Mock startVoiceRecording called\");"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 16,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Mock stopVoiceRecording called\");"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 20,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(\"Mock connect called\");"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 45,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 109,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 125,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 140,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 141,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startRecording();"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 151,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 152,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.stopRecording();"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 134,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 135,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessageNonStreaming(request);"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 168,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 212,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 213,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage(request);"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 241,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 242,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 281,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 282,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 332,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 333,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 377,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 378,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 410,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 412,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 434,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 452,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 453,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessageNonStreaming({ message: \"recover\" });"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 484,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 485,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await result.current.sendMessage(\"Hello\", \"research\");"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 503,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 537,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 538,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 572,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 590,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 591,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 617,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 96,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 97,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any);"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 115,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect("
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 124,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 125,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any);"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 144,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 145,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any);"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 186,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 187,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any);"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 191,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 227,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 228,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any);"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 231,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 243,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 244,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any);"
    },
    {
      "file_path": "frontend/src/components/ui/Dialog.tsx",
      "line_number": 30,
      "issue_type": "code_quality",
      "severity": "medium",
      "description": "Direct DOM manipulation in React component",
      "suggested_fix": "Use React refs or state management instead",
      "code_snippet": "const focusable = dialogRef.current?.querySelectorAll<HTMLElement>("
    },
    {
      "file_path": "frontend/src/components/__tests__/VoiceOutput.test.tsx",
      "line_number": 81,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/components/__tests__/MessageList.test.tsx",
      "line_number": 9,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "content: i % 5 === 0 ? \"```js\\nconsole.log(1)\\n```\" : `hello ${i}`,"
    },
    {
      "file_path": "tests/test_supervisor_smoke.py",
      "line_number": 7,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ModuleNotFoundError as e:",
        "        pytest.skip(f\"Supervisor module not found: {e}\")"
      ]
    },
    {
      "file_path": "tests/test_agents_bootstrap.py",
      "line_number": 20,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ModuleNotFoundError as e:",
        "        pytest.skip(f\"Module path not present: {e}\")",
        "    agent_symbols = ["
      ]
    },
    {
      "file_path": "tests/test_agents_bootstrap.py",
      "line_number": 31,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ModuleNotFoundError as e:",
        "        pytest.skip(f\"Orchestrator module not found: {e}\")"
      ]
    },
    {
      "file_path": "tests/test_memory_simple.py",
      "line_number": 61,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u274c Test failed: {e}\")",
        "        import traceback"
      ]
    },
    {
      "file_path": "tests/test_memory_simple.py",
      "line_number": 95,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u274c Command test failed: {e}\")",
        "        import traceback"
      ]
    },
    {
      "file_path": "tests/conftest.py",
      "line_number": 12,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:  # pragma: no cover - fallback stub",
        "        import types",
        ""
      ]
    },
    {
      "file_path": "tests/test_supervisor_single_iteration.py",
      "line_number": 29,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        pytest.skip(f\"Cannot import supervisor: {e}\")",
        ""
      ]
    },
    {
      "file_path": "tests/test_supervisor_single_iteration.py",
      "line_number": 34,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        pytest.skip(f\"Cannot import llm_factory: {e}\")",
        ""
      ]
    },
    {
      "file_path": "tests/test_supervisor_single_iteration.py",
      "line_number": 97,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as exc:  # pragma: no cover (unexpected path)",
        "            pytest.fail(f\"Supervisor invocation raised unexpectedly: {exc}\")",
        ""
      ]
    },
    {
      "file_path": "tests/test_supervisor_single_iteration.py",
      "line_number": 95,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except TypeError:",
        "                return run_method(\"Hello\")  # type: ignore",
        "        except Exception as exc:  # pragma: no cover (unexpected path)"
      ]
    },
    {
      "file_path": "tests/test_supervisor_single_iteration.py",
      "line_number": 90,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except TypeError:",
        "                    return await run_method(\"Hello\")  # type: ignore",
        "            # Sync fallback"
      ]
    },
    {
      "file_path": "tests/test_guard_no_direct_chatopenai.py",
      "line_number": 24,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            continue",
        "        if pattern.search(content):"
      ]
    },
    {
      "file_path": "tests/test_metrics_server.py",
      "line_number": 49,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u274c Failed to start server: {e}\")",
        "        raise"
      ]
    },
    {
      "file_path": "tests/test_metrics_server.py",
      "line_number": 117,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        return JSONResponse(",
        "            status_code=500,"
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 293,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as error:",
        "        return JSONResponse(",
        "            status_code=500,"
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 118,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as error:",
        "            import structlog",
        ""
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 147,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as error:",
        "            import structlog",
        ""
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 163,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as error:",
        "            import structlog",
        ""
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 179,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as error:",
        "            import structlog",
        ""
      ]
    },
    {
      "file_path": "tests/test_orm_mode_grep.py",
      "line_number": 18,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            continue",
        "        if PATTERN.search(text):"
      ]
    },
    {
      "file_path": "tests/test_langchain_enhanced_imports.py",
      "line_number": 21,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except NameError as e:",
        "        # Skip if the module has a known dataclass import gap to avoid failing unrelated CI",
        "        if \"dataclass\" in str(e):"
      ]
    },
    {
      "file_path": "tests/test_memory_agent.py",
      "line_number": 58,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u274c Test failed: {e}\")",
        "        import traceback"
      ]
    },
    {
      "file_path": "tests/test_memory_agent.py",
      "line_number": 93,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u274c Orchestrator test failed: {e}\")",
        "        import traceback"
      ]
    },
    {
      "file_path": "tests/test_metrics_endpoint.py",
      "line_number": 7,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:  # pragma: no cover",
        "    TestClient = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "tests/test_metrics_endpoint.py",
      "line_number": 29,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:  # pragma: no cover",
        "            import_errors.append(f\"{candidate}: {e}\")",
        ""
      ]
    },
    {
      "file_path": "tests/test_admin_authentication.py",
      "line_number": 33,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Mock imports for isolated testing",
        "    class AdminUser:"
      ]
    },
    {
      "file_path": "tests/test_supervisor_process_chat.py",
      "line_number": 38,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_status\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_status(self):  # pragma: no cover - simple accessor",
        "        return {\"id\": \"code\", \"name\": \"Code Agent\", \"type\": \"code\", \"status\": \"active\"}",
        ""
      ]
    },
    {
      "file_path": "tests/test_fallback_provider_smoke.py",
      "line_number": 7,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ModuleNotFoundError as e:",
        "        pytest.skip(f\"Fallback provider module not found: {e}\")",
        "    else:"
      ]
    },
    {
      "file_path": "tests/test_openai_service_streaming_tool.py",
      "line_number": 83,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"_create\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "        async def _create(self, **_):",
        "            return MockStreamingIterator([chunk1, chunk2, chunk3])",
        ""
      ]
    },
    {
      "file_path": "tests/test_stream_ordering.py",
      "line_number": 25,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:  # pragma: no cover",
        "    TestClient = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "tests/test_stream_ordering.py",
      "line_number": 48,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:",
        "        try:",
        "            from simple_main import app  # type: ignore"
      ]
    },
    {
      "file_path": "tests/test_stream_ordering.py",
      "line_number": 70,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            continue",
        "        if response is not None and getattr(response, \"status_code\", 0) < 500:"
      ]
    },
    {
      "file_path": "tests/test_stream_ordering.py",
      "line_number": 51,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:  # pragma: no cover",
        "            pytest.skip(f\"Cannot import FastAPI app: {e}\")",
        ""
      ]
    },
    {
      "file_path": "tests/test_openai_service.py",
      "line_number": 52,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"create\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def create(self, **kwargs):  # non-streaming path returns an object with choices",
        "        return self._responses[0]",
        ""
      ]
    },
    {
      "file_path": "tests/test_openai_service.py",
      "line_number": 78,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"_create\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def _create(self, **kwargs):",
        "        if self._raise_error:",
        "            raise RuntimeError(\"boom\")"
      ]
    },
    {
      "file_path": "tests/test_openai_service_tools.py",
      "line_number": 4,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ModuleNotFoundError:",
        "    # Allow running tests from repo root without installing the package",
        "    import os"
      ]
    },
    {
      "file_path": "tests/test_openai_service_package_import.py",
      "line_number": 45,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"_create\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def _create(self, **kwargs):",
        "        if kwargs.get(\"stream\"):",
        "            return MockStreamingIterator(self._streaming_chunks)"
      ]
    },
    {
      "file_path": "tests/test_supervisor_exception_path.py",
      "line_number": 20,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        pytest.skip(f\"Cannot import supervisor: {e}\")",
        ""
      ]
    },
    {
      "file_path": "tests/test_supervisor_exception_path.py",
      "line_number": 27,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:",
        "        pass",
        ""
      ]
    },
    {
      "file_path": "tests/test_supervisor_exception_path.py",
      "line_number": 53,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            return {}",
        ""
      ]
    },
    {
      "file_path": "tests/test_supervisor_exception_path.py",
      "line_number": 84,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except TypeError:",
        "            return run_method(\"Hi\")  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "tests/test_supervisor_exception_path.py",
      "line_number": 80,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except TypeError:",
        "                return await run_method(\"Hi\")  # type: ignore",
        "        try:"
      ]
    },
    {
      "file_path": "tests/test_task10_input_validation.py",
      "line_number": 28,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError as e:",
        "    VALIDATION_AVAILABLE = False",
        "    print(f\"Validation services not available: {e}\")"
      ]
    },
    {
      "file_path": "tests/test_task10_input_validation.py",
      "line_number": 244,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            # Expected if Pydantic validation is working but models need adjustment",
        "            assert \"validation\" in str(e).lower() or \"field\" in str(e).lower()"
      ]
    },
    {
      "file_path": "tests/test_task10_input_validation.py",
      "line_number": 266,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            # Expected if Pydantic validation is working but models need adjustment",
        "            assert \"validation\" in str(e).lower() or \"field\" in str(e).lower()"
      ]
    },
    {
      "file_path": "tests/test_task10_input_validation.py",
      "line_number": 289,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            # Expected if FastAPI dependencies are not fully available",
        "            assert \"fastapi\" in str(e).lower() or \"starlette\" in str(e).lower()"
      ]
    },
    {
      "file_path": "tests/test_agent_imports_smoke.py",
      "line_number": 21,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    _m_cartrita = None",
        "try:"
      ]
    },
    {
      "file_path": "tests/test_agent_imports_smoke.py",
      "line_number": 25,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    _m_task = None",
        "try:"
      ]
    },
    {
      "file_path": "tests/test_agent_imports_smoke.py",
      "line_number": 29,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    _m_knowledge = None",
        ""
      ]
    },
    {
      "file_path": "tests/test_metrics_standalone.py",
      "line_number": 45,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\\n\u274c Test suite failed: {e}\")",
        "        import traceback"
      ]
    },
    {
      "file_path": "tests/test_metrics_standalone.py",
      "line_number": 60,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ImportError as e:",
        "        print(f\"   \u274c Prometheus client import failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "tests/test_metrics_standalone.py",
      "line_number": 80,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"   \u274c Basic Prometheus test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "tests/test_metrics_standalone.py",
      "line_number": 123,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"   \u274c MetricsCollector test failed: {e}\")",
        "        import traceback"
      ]
    },
    {
      "file_path": "tests/smoke_test_server.py",
      "line_number": 130,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        raise HTTPException(status_code=500, detail=f\"Chat processing failed: {str(e)}\")",
        ""
      ]
    },
    {
      "file_path": "tests/demo_memory_agent.py",
      "line_number": 52,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u274c Error: {e}\")",
        ""
      ]
    },
    {
      "file_path": "tests/validate_cartrita_core.py",
      "line_number": 45,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        results[\"api_key_manager\"] = False",
        "        results[\"details\"].append(f\"\u274c Error: {str(e)}\")"
      ]
    },
    {
      "file_path": "tests/validate_cartrita_core.py",
      "line_number": 88,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        results[\"mcp_protocol\"] = False",
        "        results[\"details\"].append(f\"\u274c Error: {str(e)}\")"
      ]
    },
    {
      "file_path": "tests/validate_cartrita_core.py",
      "line_number": 128,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        results[\"integration\"] = False",
        "        results[\"details\"].append(f\"\u274c Error: {str(e)}\")"
      ]
    },
    {
      "file_path": "tests/test_fallback_on_llm_error.py",
      "line_number": 18,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:  # pragma: no cover",
        "        pytest.skip(f\"Cannot import fallback provider v2: {e}\")",
        ""
      ]
    },
    {
      "file_path": "tests/test_fallback_on_llm_error.py",
      "line_number": 23,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:  # pragma: no cover",
        "        pytest.skip(f\"Cannot import llm_factory: {e}\")",
        ""
      ]
    },
    {
      "file_path": "tests/security/quick_security_validation.py",
      "line_number": 195,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ImportError as e:",
        "        print(f\"   \u274c Failed to import security module: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "tests/security/quick_security_validation.py",
      "line_number": 198,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"   \u274c Error testing placeholder detection: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "tests/security/test_environment_security_validation.py",
      "line_number": 39,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError as e:",
        "    print(f\"\u274c Import error: {e}\")",
        "    print(\"Please ensure the secure_environment.py module is available\")"
      ]
    },
    {
      "file_path": "tests/security/test_environment_security_validation.py",
      "line_number": 142,
      "issue_type": "security",
      "severity": "critical",
      "description": "Hardcoded secret detected: valid_key",
      "suggested_fix": "Move to environment variables or secure configuration",
      "code_snippet": "valid_key = \"***REDACTED***\""
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 5,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 8,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(page).toHaveTitle(/Cartrita/i);"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 12,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 16,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(mainContent).toBeVisible();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 20,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 23,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.setViewportSize({ width: 375, height: 667 });"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 27,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.setViewportSize({ width: 1920, height: 1080 });"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 32,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 35,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.route('**/api/health', route => {"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 45,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(connectionStatus).toBeVisible({ timeout: 10000 });"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 51,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 55,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(voiceButton).toBeVisible();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 59,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 64,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceButton.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 65,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(voiceButton).toHaveAttribute('aria-pressed', 'true');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 68,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceButton.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 69,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(voiceButton).toHaveAttribute('aria-pressed', 'false');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 75,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 79,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await settingsButton.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 83,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(settingsPanel).toBeVisible();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 87,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 90,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.locator('[data-testid=\"settings-button\"]').click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 94,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await themeToggle.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 98,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await saveButton.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 101,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const theme = await page.evaluate(() => localStorage.getItem('theme'));"
    },
    {
      "file_path": "tests/voice-integration.test.js",
      "line_number": 43,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "tests/voice-integration.test.js",
      "line_number": 63,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "tests/voice-integration.test.js",
      "line_number": 83,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "scripts/analyze_langchain_docs.py",
      "line_number": 281,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"Error analyzing {file_path}: {e}\")",
        "            analysis.recommendations.append(f\"Error during analysis: {e}\")"
      ]
    },
    {
      "file_path": "scripts/analyze_langchain_docs.py",
      "line_number": 53,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                    except Exception as e:",
        "                        print(f\"Error loading {json_file}: {e}\")",
        "                all_docs[category_dir.name] = category_docs"
      ]
    },
    {
      "file_path": "scripts/fix_langchain_issues.py",
      "line_number": 179,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_simple_compatibility_agents\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_simple_compatibility_agents():"
    },
    {
      "file_path": "scripts/fix_langchain_issues.py",
      "line_number": 265,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except subprocess.CalledProcessError as e:",
        "            print(f\"\u26a0 Failed to install {dep}: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/fix_langchain_issues.py",
      "line_number": 286,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u2717 Failed to apply {fix_name}: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/extract_langchain_docs.py",
      "line_number": 211,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_summary\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_summary(self):"
    },
    {
      "file_path": "scripts/extract_langchain_docs.py",
      "line_number": 236,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_documentation_index\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_documentation_index(self):"
    },
    {
      "file_path": "scripts/extract_langchain_docs.py",
      "line_number": 38,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"Attempt {attempt + 1} failed for {url}: {e}\")",
        "                if attempt < max_retries - 1:"
      ]
    },
    {
      "file_path": "scripts/extract_langchain_docs.py",
      "line_number": 281,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                        except json.JSONDecodeError:",
        "                            print(f\"Error reading {json_file}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 43,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ImportError as e:",
        "        print(f\"\u2717 Import failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 90,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Multi-Provider Orchestrator test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 124,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Reasoning Chain Agent test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 159,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Advanced Tool Agent test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 190,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Supervisor Agent test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 216,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Existing agents compatibility test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 210,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u26a0 CartritaAgent instantiation warning: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 335,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u2717 {test_name} crashed: {e}\")",
        "            results.append({"
      ]
    },
    {
      "file_path": "scripts/test_langchain_system.py",
      "line_number": 82,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"\u26a0 Chat test skipped (API key issue): {e}\")",
        "        else:"
      ]
    },
    {
      "file_path": "scripts/test_cartrita_langchain_integration.py",
      "line_number": 73,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Hugging Face connection failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_cartrita_langchain_integration.py",
      "line_number": 94,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 LangChain import failed: {e}\")",
        "        print(\"  Try: pip install langchain langchain-community\")"
      ]
    },
    {
      "file_path": "scripts/test_cartrita_langchain_integration.py",
      "line_number": 126,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Multi-Provider Orchestrator test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_cartrita_langchain_integration.py",
      "line_number": 170,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Chat test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_cartrita_langchain_integration.py",
      "line_number": 201,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 System integration test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_cartrita_langchain_integration.py",
      "line_number": 227,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u2717 {test_name} crashed: {e}\")",
        "            results.append((test_name, False))"
      ]
    },
    {
      "file_path": "scripts/test_cartrita_langchain_integration.py",
      "line_number": 195,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"\u26a0 Cannot import {agent_module}: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 58,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 OpenAI integration failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 89,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Hugging Face integration failed: {e}\")",
        "        print(\"  Trying alternative approach...\")"
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 145,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 LangChain patterns test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 212,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Multi-provider test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 244,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 System integration test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 228,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u26a0 Orchestrator import issue: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 269,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u2717 {test_name} crashed: {e}\")",
        "            results.append((test_name, False))"
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 108,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e2:",
        "            print(f\"\u2717 Alternative approach also failed: {e2}\")",
        "            return False"
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 170,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"\u26a0 OpenAI provider failed: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/test_simple_langchain_integration.py",
      "line_number": 183,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"\u26a0 Hugging Face provider failed: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/configure_langchain_integration.py",
      "line_number": 29,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_langchain_config\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_langchain_config():"
    },
    {
      "file_path": "scripts/configure_langchain_integration.py",
      "line_number": 77,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_integration_test\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_integration_test():"
    },
    {
      "file_path": "scripts/configure_langchain_integration.py",
      "line_number": 338,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_environment_helper\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_environment_helper():"
    },
    {
      "file_path": "scripts/configure_langchain_integration.py",
      "line_number": 459,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"update_multi_provider_for_huggingface\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def update_multi_provider_for_huggingface():"
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 215,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_cartrita_integration_demo\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_cartrita_integration_demo():"
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 64,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 OpenAI failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 87,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Hugging Face failed: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 156,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Multi-provider test failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 199,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Agent pattern failed: {e}\")",
        "        # Try simpler approach"
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 119,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except:",
        "            print(\"\u26a0 OpenAI provider unavailable\")",
        ""
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 131,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except:",
        "            print(\"\u26a0 Hugging Face provider unavailable\")",
        ""
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 298,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u2717 {test_name} crashed: {e}\")",
        "            results.append((test_name, False))"
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 98,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e2:",
        "            print(f\"\u2717 Transformers also failed: {e2}\")",
        "            return False"
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 174,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except:",
        "                return \"Invalid expression\"",
        ""
      ]
    },
    {
      "file_path": "scripts/test_final_integration.py",
      "line_number": 211,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e2:",
        "            print(f\"\u2717 Basic chain also failed: {e2}\")",
        "            return False"
      ]
    },
    {
      "file_path": "scripts/create_deployment_summary.py",
      "line_number": 189,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_deployment_features_list\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_deployment_features_list():"
    },
    {
      "file_path": "scripts/create_deployment_summary.py",
      "line_number": 232,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_architecture_overview\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_architecture_overview():"
    },
    {
      "file_path": "scripts/create_deployment_summary.py",
      "line_number": 272,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_deployment_summary\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_deployment_summary():"
    },
    {
      "file_path": "scripts/create_deployment_summary.py",
      "line_number": 345,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_human_readable_summary\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "def create_human_readable_summary(summary: Dict[str, Any]):"
    },
    {
      "file_path": "scripts/create_deployment_summary.py",
      "line_number": 61,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"Error analyzing {py_file}: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/create_deployment_summary.py",
      "line_number": 113,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"Error analyzing template {template_file}: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/create_deployment_summary.py",
      "line_number": 151,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                print(f\"Error analyzing script {script_file}: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/create_deployment_summary.py",
      "line_number": 184,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except:",
        "                pass",
        ""
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 37,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError as e:",
        "    print(f\"\u26a0\ufe0f  Admin authentication modules not available: {e}\")",
        "    ADMIN_AUTH_AVAILABLE = False"
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 708,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except KeyboardInterrupt:",
        "        print(\"\\n\u23f9\ufe0f  Validation interrupted by user\")",
        "        sys.exit(130)"
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 711,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\\n\ud83d\udea8 Validation failed with error: {e}\")",
        "        sys.exit(1)"
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 238,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            self.log_result(",
        "                'admin_permissions_validation',"
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 288,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            self.log_result(",
        "                'jwt_integration_test',"
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 379,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            self.log_result(",
        "                'audit_logging_test',"
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 493,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            self.log_result(",
        "                'access_control_test',"
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 702,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"\u26a0\ufe0f  Could not save results file: {e}\")",
        "        "
      ]
    },
    {
      "file_path": "scripts/validate_admin_auth.py",
      "line_number": 644,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                self.log_result(",
        "                    f'validation_step_{step.__name__}',"
      ]
    },
    {
      "file_path": "scripts/env_helper_langchain.py",
      "line_number": 59,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u2717 Authentication failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "scripts/env_helper_langchain.py",
      "line_number": 32,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except ImportError:",
        "            print(f\"\u2717 {package} missing\")",
        "            missing.append(package)"
      ]
    },
    {
      "file_path": "scripts/env_helper_langchain.py",
      "line_number": 84,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except subprocess.CalledProcessError as e:",
        "            print(f\"\u2717 Failed to install {package}: {e}\")",
        ""
      ]
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 20,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_backup\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_backup(self):"
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 27,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_base_agent_template\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_base_agent_template(self) -> str:"
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 225,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_tool_template\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_tool_template(self) -> str:"
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 353,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_chain_template\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_chain_template(self) -> str:"
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 489,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_memory_template\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_memory_template(self) -> str:"
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 579,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_callbacks_template\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_callbacks_template(self) -> str:"
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 917,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_langchain_templates\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_langchain_templates(self):"
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 972,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_requirements_update\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_requirements_update(self):"
    },
    {
      "file_path": "scripts/refactor_agents_langchain.py",
      "line_number": 735,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"Error refactoring {agent_path}: {e}\")",
        "            return False"
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 50,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except FileNotFoundError:",
        "        cp = subprocess.CompletedProcess(cmd, returncode=127, stdout=\"\", stderr=\"not found\")",
        "        return cp"
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 68,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except json.JSONDecodeError:",
        "        return []",
        ""
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 87,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except json.JSONDecodeError:",
        "        return []",
        ""
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 146,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except json.JSONDecodeError:",
        "        return []",
        ""
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 109,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except json.JSONDecodeError:",
        "            issues = []",
        "        run = {"
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 165,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            # Swallow tool-specific errors to keep pipeline resilient",
        "            continue"
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 172,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            pass",
        ""
      ]
    },
    {
      "file_path": "scripts/sarif/compare_sarif.py",
      "line_number": 50,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:",
        "        return []",
        ""
      ]
    }
  ],
  "patches_generated": 8
}
