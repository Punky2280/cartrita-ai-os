{
  "timestamp": "2025-09-13T15:00:03.063860",
  "total_issues": 550,
  "severity_breakdown": {
    "medium": 245,
    "low": 289,
    "high": 16
  },
  "type_breakdown": {
    "error_handling": 243,
    "monitoring": 260,
    "observability": 3,
    "code_quality": 28,
    "security": 16
  },
  "issues": [
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 984,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_bio\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_bio(_api_key: str = Depends(verify_api_key)):",
        "    \"\"\"Public bio describing Cartrita's identity, values, capabilities, and agents.\"\"\"",
        "    return {\"success\": True, \"data\": BIO_PAYLOAD}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 40,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Provide minimal fallbacks to avoid type annotation errors and keep endpoints functional",
        "    from enum import Enum"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 105,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Fallback auth function",
        "    async def verify_api_key(api_key: Optional[str] = None) -> str:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 117,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    Settings = None",
        "try:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 123,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    setup_logging = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 219,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    DatabaseManager = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 224,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    CacheManager = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 232,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    get_fallback_provider_v2 = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 240,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    generate_fallback_response = None  # type: ignore",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 107,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"verify_api_key\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def verify_api_key(api_key: Optional[str] = None) -> str:",
        "        \"\"\"Fallback API key verification.\"\"\"",
        "        expected_key = os.getenv(\"CARTRITA_API_KEY\", \"dev-api-key-2025\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 152,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except json.JSONDecodeError:",
        "        return {\"raw_context\": context}",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 170,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:  # pragma: no cover - defensive",
        "        logger.warning(f\"Fallback provider health check failed: {e}\")",
        "        return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 191,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.warning(\"Supervisor processing failed\", error=str(e))",
        "        return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 447,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(f\"Failed to initialize Sentry: {e}\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 522,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"\u274c Failed to start Cartrita AI Orchestrator\", error=str(e))",
        "        raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 606,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        # Record error metrics",
        "        if metrics_collector and metrics_collector.is_healthy():"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 758,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except HTTPException:",
        "        raise",
        "    except Exception as e:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 760,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        if metrics_collector:",
        "            duration = time.time() - start_time"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 817,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to retrieve metrics\", error=str(e), exc_info=True)",
        "        return JSONResponse("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 927,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(",
        "            \"Voice chat request failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 949,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to list agents\", error=str(e))",
        "        raise HTTPException(status_code=500, detail=\"Failed to retrieve agents\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 969,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except HTTPException:",
        "        raise",
        "    except Exception as e:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 971,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to get agent status\", error=str(e), agent_id=agent_id)",
        "        raise HTTPException("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1085,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"WebSocket error\", error=str(e))",
        "        try:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1131,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"File upload failed\", error=str(e), filename=file.filename if file else \"unknown\")",
        "        raise HTTPException(status_code=500, detail=\"File upload failed\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1172,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Multiple file upload failed\", error=str(e))",
        "        raise HTTPException(status_code=500, detail=\"Multiple file upload failed\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1208,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Audio transcription failed\", error=str(e), filename=audio.filename if audio else \"unknown\")",
        "    raise HTTPException(status_code=500, detail=\"Audio transcription failed\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1245,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Speech synthesis failed\", error=str(e), text=request.text[:50] if request.text else \"\")",
        "        raise HTTPException(status_code=500, detail=\"Speech synthesis failed\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1267,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to reload agents\", error=str(e))",
        "        raise HTTPException(status_code=500, detail=\"Failed to reload agents\") from e"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1285,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(\"Failed to get system stats\", error=str(e))",
        "        raise HTTPException("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 205,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:  # pragma: no cover",
        "            logger.error(\"Fallback v1 failed\", error=str(e))",
        "    # Fallback to v2 adapter"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 212,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:  # pragma: no cover",
        "            logger.error(\"Fallback v2 failed\", error=str(e))",
        "    return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1030,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Streaming chat failed\", error=str(e))",
        "            yield f\"event: error\\ndata: {json.dumps({'message': 'internal error'})}\\n\\n\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1094,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            pass",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 490,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as exc:",
        "                logger.error(\"Error stopping agent\", agent=getattr(agent.__class__, \"__name__\", \"unknown\"), error=str(exc))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 530,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as exc:",
        "                logger.error(\"Error stopping supervisor\", error=str(exc))",
        "        await _stop_specialized_agents()"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/main.py",
      "line_number": 1089,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            pass",
        "    finally:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 211,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_status\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_status(self) -> dict[str, Any]:",
        "        \"\"\"Get agent status.\"\"\"",
        "        return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 305,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"_perform_computer_task\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def _perform_computer_task(",
        "        self, request: ComputerUseRequest",
        "    ) -> ComputerUseResponse:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 286,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Computer use execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 367,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Screenshot failed\", error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 388,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"File operation failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 415,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"System command failed\", command=command.command, error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/computer_use/computer_use_agent.py",
      "line_number": 458,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Task summary generation failed\", error=str(e))",
        "            return f\"Task completed with {len(file_results)} file operations and {len(command_results)} commands executed.\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 142,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_status\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_status(self) -> dict[str, Any]:",
        "        \"\"\"Get agent status.\"\"\"",
        "        return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 110,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"Failed to initialize OpenAI client, will use fallback\", error=str(e))",
        "            self.knowledge_llm = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 119,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to initialize fallback provider\", error=str(e))",
        "            self.fallback_provider = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 215,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Knowledge execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 279,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Document search failed\", error=str(e), query=query.query)",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 300,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"db_manager search failed\", error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 367,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"RAG answer generation failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 320,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as conv_err:",
        "                logger.warning(\"Failed to convert search result\", error=str(conv_err))",
        "        return sources"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/knowledge/knowledge_agent.py",
      "line_number": 381,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as fallback_error:",
        "                    logger.error(\"Fallback provider also failed\", error=str(fallback_error))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 18,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError as e:",
        "    # Defer logging until logger is configured below",
        "    _import_error = e  # store for later"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 201,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_status\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_status(self) -> dict[str, Any]:",
        "        \"\"\"Get agent status.\"\"\"",
        "        return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 282,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Code execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 368,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code generation failed\", error=str(e), language=language)",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 432,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code analysis failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 497,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code debugging failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 562,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code optimization failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/code/code_agent.py",
      "line_number": 627,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code review failed\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/research/research_agent.py",
      "line_number": 193,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_status\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_status(self) -> dict[str, Any]:",
        "        \"\"\"Get agent status.\"\"\"",
        "        return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/research/research_agent.py",
      "line_number": 132,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Research agent process_messages failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/research/research_agent.py",
      "line_number": 185,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Time query handling failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/research/research_agent.py",
      "line_number": 249,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Research execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 691,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_status\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_status(self) -> Dict[str, Any]:",
        "        \"\"\"Get Cartrita's current status and capabilities.\"\"\"",
        "        return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 463,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Delegation failed\", error=str(e), agent_type=agent_type)",
        "            return f\"Ay, something went wrong with the delegation: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 479,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Key access request failed\", error=str(e), tool=tool_name)",
        "            return f\"Ay, Dios m\u00edo, something went wrong: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 508,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Status check failed\", error=str(e), agent_id=agent_id)",
        "            return f\"Status check failed: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 639,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            error_message = str(e)",
        "            logger.error("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 103,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Failed to initialize OpenAI client: {e}\")",
        "                self.mock_mode = True"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/cartrita_agent.py",
      "line_number": 593,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as fallback_error:",
        "                    logger.error(f\"Fallback provider failed: {fallback_error}\")",
        "                    # Ultimate fallback with personality"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 74,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to start Cartrita Orchestrator\", error=str(e))",
        "            self.is_running = False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 93,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Error stopping Cartrita Orchestrator\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 187,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            self.error_count += 1",
        "            processing_time = time.time() - request_start"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 277,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get agent statuses\", error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 313,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Agent routing failed for {agent_type}: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 363,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Personality overlay failed: {e}\")",
        "            # Return original response if overlay fails"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 380,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Research agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 398,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Knowledge agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 416,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Task agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 434,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Code agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 457,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Image agent call failed: {e}\")",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 471,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get agent status\", agent_id=agent_id, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 498,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Health check failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 521,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to reload agents\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 545,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"MCP tool execution failed\", tool_name=tool_name, error=str(e))",
        "            return {\"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/orchestrator.py",
      "line_number": 616,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cleanup failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 521,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_agent_permissions\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_agent_permissions(self, agent_id: str) -> Dict[str, Any]:",
        "        \"\"\"Get current permissions for an agent.\"\"\"",
        "        permissions = {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 123,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to store API key\", key_id=key_id, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 171,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to retrieve API key\", key_id=key_id, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 288,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Failed to register tool\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 398,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Key access request failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 432,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Failed to return key access\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/api_key_manager.py",
      "line_number": 513,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    \"Error returning key access in context manager\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 159,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"LangSmith integration failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 297,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Tool registration failed\", tool_name=tool.name, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 341,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Message handling failed\", error=str(e), method=message.method)",
        "            return MCPMessage("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 449,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except asyncio.TimeoutError:",
        "            execution.status = ToolExecutionStatus.FAILED",
        "            execution.error = \"Tool execution timeout\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 467,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            execution.status = ToolExecutionStatus.FAILED",
        "            execution.error = str(e)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/cartrita_core/mcp_protocol.py",
      "line_number": 589,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(\"LangSmith logging failed\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/audio/audio_agent.py",
      "line_number": 154,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Audio processing failed\", error=str(e), task_type=request.task_type)",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/audio/audio_agent.py",
      "line_number": 180,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Transcription failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/audio/audio_agent.py",
      "line_number": 200,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Speech synthesis failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/audio/audio_agent.py",
      "line_number": 287,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Streaming conversation failed\", error=str(e))",
        "            yield f\"Error in streaming: {str(e)}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 149,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_status\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_status(self) -> dict[str, Any]:",
        "        \"\"\"Get agent status.\"\"\"",
        "        return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 233,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"_create_task_plan\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def _create_task_plan(",
        "        self, request: str, context: dict[str, Any]",
        "    ) -> TaskResponse:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 373,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"_create_timeline\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def _create_timeline(",
        "        self, tasks: list[Task], dependencies: list[dict[str, str]]",
        "    ) -> dict[str, Any]:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 214,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Task execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 327,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Task breakdown generation failed\", error=str(e))",
        "            # Return basic fallback task"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 369,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Dependency analysis failed\", error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 412,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Risk assessment failed\", error=str(e))",
        "            return ["
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/task/task_agent.py",
      "line_number": 491,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (json.JSONDecodeError, ValueError):",
        "            return []",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 150,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image processing failed\", error=str(e), task_type=request.task_type)",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 175,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image generation failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 258,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image analysis failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 292,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Image editing failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 335,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Batch generation failed for prompt {i}\", error=str(e))",
        "                results.append(None)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/image/image_agent.py",
      "line_number": 361,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(f\"Batch analysis failed for image {image_name}\", error=str(e))",
        "                results.append(None)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/agents/reasoning/reasoning_agent.py",
      "line_number": 222,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Problem solving failed\", error=str(e), problem=request.problem[:100])",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 163,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_service_manager\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_service_manager() -> ServiceManager:",
        "    \"\"\"Get the global service manager instance.\"\"\"",
        "    if not service_manager.initialized:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 170,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_openai_service\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_openai_service() -> OpenAIService:",
        "    \"\"\"Get OpenAI service instance.\"\"\"",
        "    return await service_manager.get_service(\"openai\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 175,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_huggingface_service\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_huggingface_service() -> HuggingFaceService:",
        "    \"\"\"Get HuggingFace service instance.\"\"\"",
        "    return await service_manager.get_service(\"huggingface\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 180,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_deepgram_service\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_deepgram_service() -> DeepgramService:",
        "    \"\"\"Get Deepgram service instance.\"\"\"",
        "    return await service_manager.get_service(\"deepgram\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 185,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_tavily_service\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_tavily_service() -> TavilyService:",
        "    \"\"\"Get Tavily service instance.\"\"\"",
        "    return await service_manager.get_service(\"tavily\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 190,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_github_service\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_github_service() -> GitHubService:",
        "    \"\"\"Get GitHub service instance.\"\"\"",
        "    return await service_manager.get_service(\"github\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 76,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_service\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_service(self, service_name: str) -> Any:",
        "        \"\"\"",
        "        Get a service instance by name."
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 72,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to initialize services\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 120,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                health_results[service_name] = {\"status\": \"error\", \"error\": str(e)}",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/service_manager.py",
      "line_number": 139,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(\"Error shutting down service\", service=service_name, error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 103,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Web search failed\", query=query, error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 162,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Content extraction failed\", error=str(e))",
        "            return [{\"error\": str(e), \"success\": False}]"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 215,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Search and extract failed\", query=query, error=str(e))",
        "            return {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 229,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            return \"\"",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 255,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get search suggestions\", query=query, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 269,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {",
        "                \"status\": \"unhealthy\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/tavily_service.py",
      "line_number": 151,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as e:",
        "                    logger.warning(\"Failed to extract content from URL\", url=url, error=str(e))",
        "                    results.append({"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 153,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_current_user\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_current_user(",
        "    request: Request,",
        "    credentials: HTTPAuthorizationCredentials = Depends(security)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 43,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_access_token\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_access_token(self, user_id: str, permissions: list[str] = None) -> str:"
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 61,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_refresh_token\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_refresh_token(self, user_id: str) -> str:"
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 108,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except JWTError as e:",
        "            raise HTTPException(",
        "                status_code=status.HTTP_401_UNAUTHORIZED,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 211,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except HTTPException:",
        "            pass  # Fall back to API key check",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/jwt_auth.py",
      "line_number": 225,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except HTTPException:",
        "            pass",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 85,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Model search failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 135,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Dataset search failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 173,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get model info\", model_id=model_id, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 213,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Paper search failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 242,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get space info\", space_id=space_id, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/huggingface_service.py",
      "line_number": 255,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {",
        "                \"status\": \"unhealthy\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/rate_limiter.py",
      "line_number": 290,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"check_api_rate_limit\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def check_api_rate_limit(request: Request):",
        "    \"\"\"Standard rate limiting for API endpoints.\"\"\"",
        "    return await check_rate_limit(request)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/auth.py",
      "line_number": 18,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"verify_api_key\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def verify_api_key(",
        "    api_key: str | None = Depends(api_key_header),",
        ") -> str:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 102,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Audio transcription failed\", error=str(e))",
        "            return {\"transcript\": \"\", \"confidence\": 0.0, \"words\": [], \"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 195,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Live transcription failed\", error=str(e))",
        "            yield {\"type\": \"error\", \"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 228,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Audio quality analysis failed\", error=str(e))",
        "            return {\"error\": str(e)}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 256,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get supported languages\", error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 271,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {",
        "                \"status\": \"unhealthy\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/deepgram_service.py",
      "line_number": 190,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except asyncio.CancelledError:",
        "                logger.info(\"Live transcription session cancelled\")",
        "            finally:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 127,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Repository search failed\", query=query, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 190,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Code search failed\", query=query, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 232,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get repository info\", owner=owner, repo=repo, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 287,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get repository contents\", owner=owner, repo=repo, path=path, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 332,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get file content\", owner=owner, repo=repo, path=path, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 393,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get repository issues\", owner=owner, repo=repo, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 437,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to create issue\", owner=owner, repo=repo, title=title, error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 454,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {",
        "                \"status\": \"unhealthy\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 56,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except httpx.HTTPStatusError as e:",
        "                logger.error(\"GitHub API error\", status_code=e.response.status_code, response=e.response.text)",
        "                raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/github_service.py",
      "line_number": 59,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(\"GitHub request failed\", error=str(e))",
        "                raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 158,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"OpenAI API error\", error=str(e), error_type=type(e).__name__)",
        "            yield {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 263,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Chat request processing failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 332,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            return {\"status\": \"unhealthy\", \"error\": str(e)}",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 377,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Conversational chat failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/services/openai_service.py",
      "line_number": 501,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Voice conversation processing failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 22,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    TRANSFORMERS_AVAILABLE = False",
        "    logging.warning(\"HuggingFace Transformers not available. Install with: pip install transformers torch\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 33,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    LANGCHAIN_AVAILABLE = False",
        "    logging.warning(\"LangChain not available. Install with: pip install langchain langchain-openai\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 206,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Error in finite state chatbot: {e}\")",
        "            return \"I'm here to help! Could you please rephrase your question or tell me what you'd like assistance with?\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 257,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.warning(f\"Failed to initialize HuggingFace model: {e}\")",
        "            self.is_initialized = False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 306,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Error generating HuggingFace response: {e}\")",
        "            raise RuntimeError(f\"HuggingFace generation failed: {e}\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 458,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Rule-based system failed: {e}, using emergency response\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 336,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.warning(f\"Failed to initialize OpenAI client: {e}\")",
        "                self.openai_client = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 345,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.warning(f\"Failed to initialize HuggingFace provider: {e}\")",
        "                self.hf_provider = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 404,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.warning(f\"OpenAI API failed: {e}, falling back to local inference\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/providers/fallback_provider.py",
      "line_number": 433,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.warning(f\"HuggingFace local inference failed: {e}, falling back to rule-based\")",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 29,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    Redis = None",
        "    ConnectionPool = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 37,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    settings = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 341,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_semantic_cache\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_semantic_cache(self, query_hash: str) -> dict[str, Any] | None:",
        "        \"\"\"Get semantic cache entry.\"\"\"",
        "        cache_key = f\"semantic:{query_hash}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 367,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_session\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_session(self, session_id: str) -> dict[str, Any] | None:",
        "        \"\"\"Get user session.\"\"\"",
        "        session_key = f\"session:{session_id}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 384,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"delete_session\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def delete_session(self, session_id: str) -> bool:",
        "        \"\"\"Delete user session.\"\"\"",
        "        session_key = f\"session:{session_id}\""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 26,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ImportError:",
        "        Pipeline = None",
        "        PubSub = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 89,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to connect to Redis\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 108,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Redis health check failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 123,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache get failed\", key=key, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 141,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache set failed\", key=key, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 152,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache delete failed\", keys=keys, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 163,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache exists check failed\", key=key, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 174,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache expire failed\", key=key, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 185,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Cache TTL check failed\", key=key, error=str(e))",
        "            return -2"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 215,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except (TypeError, ValueError) as e:",
        "            logger.error(\"JSON encode failed\", key=key, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 230,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Hash get failed\", key=key, field=field, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 241,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Hash set failed\", key=key, field=field, error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 252,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Hash getall failed\", key=key, error=str(e))",
        "            return {}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 263,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Hash delete failed\", key=key, fields=fields, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 278,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List lpush failed\", key=key, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 289,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List rpush failed\", key=key, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 300,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List lpop failed\", key=key, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 311,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List rpop failed\", key=key, error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 322,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List lrange failed\", key=key, error=str(e))",
        "            return []"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 333,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"List llen failed\", key=key, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 440,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Rate limit check failed\", key=key, error=str(e))",
        "            return True, limit  # Allow on error"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 455,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Publish failed\", channel=channel, error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 471,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Subscribe failed\", channels=channels, error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 483,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Unsubscribe failed\", channels=channels, error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 494,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Get message failed\", error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 530,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Flushdb failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 542,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Info retrieval failed\", error=str(e))",
        "            return {}"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 553,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Dbsize retrieval failed\", error=str(e))",
        "            return 0"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/cache.py",
      "line_number": 199,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except json.JSONDecodeError as e:",
        "                logger.error(\"JSON decode failed\", key=key, error=str(e))",
        "        return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 257,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"_create_response\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def _create_response(",
        "        self, state: OrchestratorState, start_time: float",
        "    ) -> ChatResponse:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 235,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Chat request processing failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 332,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except ImportError as e:",
        "            logger.error(f\"Failed to import agents: {str(e)}\")",
        "            ResearchAgent = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 425,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                f\"Failed to get status for agent {agent_id}\", error=str(e)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 654,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(",
        "                \"Supervisor node failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 743,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(f\"Orchestration analysis failed: {e}\")",
        "            return self._determine_agent_by_keywords(user_message)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 1036,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as fallback_error:",
        "            logger.exception(\"Fallback provider failed in error handler\", error=str(fallback_error))",
        "            error_message = ("
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 384,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    f\"Failed to initialize agent {agent_type}\", error=str(e)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 399,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    f\"Failed to get status for agent {agent_type}\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 511,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                # Last resort: create manually with defaults",
        "                logger.warning(f\"Failed to normalize state, creating new: {e}\")"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 733,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as parse_error:",
        "                logger.warning(",
        "                    \"Failed to parse orchestration decision, using intelligent fallback\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 873,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(",
        "                    f\"Agent {agent_type} execution failed\","
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 565,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                except Exception as e:",
        "                    logger.error(\"Final fallback failed\", error=str(e))",
        "                    self._safe_append_message(state, {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/supervisor.py",
      "line_number": 614,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "                    except Exception as e:",
        "                        logger.error(\"Agent limit fallback failed\", error=str(e))",
        "                        self._safe_append_message(state, {"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 391,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_metrics_collector\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_metrics_collector() -> MetricsCollector:",
        "    \"\"\"Dependency injection function for metrics collector.\"\"\"",
        "    global _metrics_collector"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 26,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Clean fallback when OpenTelemetry is not available",
        "    metrics = None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 39,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:",
        "    PROMETHEUS_READER_AVAILABLE = False",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 46,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except Exception:",
        "    _prom_client_spec = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 71,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:",
        "        PROMETHEUS_CLIENT_AVAILABLE = False",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 148,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to initialize metrics collector\", error=str(e))",
        "            # Don't raise - allow graceful degradation"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 169,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"OpenTelemetry setup failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 183,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Tracing setup failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 206,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Metrics setup failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 250,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Prometheus metrics setup failed\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 288,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to record request metrics\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 305,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to record error metrics\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 319,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to update connection metrics\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 332,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to get metrics\", error=str(e))",
        "            return None"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/metrics.py",
      "line_number": 352,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Error during metrics collector shutdown\", error=str(e))",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 302,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"create_user\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def create_user(",
        "        self, email: str, hashed_password: str, **kwargs",
        "    ) -> User:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 320,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_user_by_email\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_user_by_email(self, email: str) -> User | None:",
        "        \"\"\"Get user by email.\"\"\"",
        "        async with self.pool.acquire() as conn:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 333,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_user_by_id\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_user_by_id(self, user_id: str) -> User | None:",
        "        \"\"\"Get user by ID.\"\"\"",
        "        async with self.pool.acquire() as conn:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 350,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"create_conversation\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def create_conversation(",
        "        self, user_id: str | None = None, title: str = \"\"",
        "    ) -> Conversation:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 369,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_conversation\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_conversation(",
        "        self, conversation_id: str",
        "    ) -> Conversation | None:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 384,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"update_conversation\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def update_conversation(",
        "        self,",
        "        conversation_id: str,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 426,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_user_conversations\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_user_conversations(",
        "        self, user_id: str, limit: int = 50, offset: int = 0",
        "    ) -> list[Conversation]:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 450,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"create_knowledge_document\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def create_knowledge_document(",
        "        self,",
        "        title: str,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 507,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_knowledge_document\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_knowledge_document(",
        "        self, document_id: str",
        "    ) -> KnowledgeDocument | None:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 526,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"create_agent_execution\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def create_agent_execution(",
        "        self,",
        "        conversation_id: str,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 561,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_agent_executions\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def get_agent_executions(",
        "        self,",
        "        conversation_id: str | None = None,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 612,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"execute_query\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def execute_query(self, query: str, *params) -> list[asyncpg.Record]:",
        "        \"\"\"Execute a raw SQL query.\"\"\"",
        "        async with self.pool.acquire() as conn:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 617,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"execute_query_single\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "    async def execute_query_single(",
        "        self, query: str, *params",
        "    ) -> asyncpg.Record | None:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 126,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Failed to connect to database\", error=str(e))",
        "            raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 146,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            logger.error(\"Database health check failed\", error=str(e))",
        "            return False"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/core/database.py",
      "line_number": 290,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                logger.error(\"Migration failed\", error=str(e))",
        "                raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/llm_factory.py",
      "line_number": 34,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except TypeError as e:",
        "        logger.error(\"ChatOpenAI initialization failed due to parameter mismatch\", error=str(e), params=list(kwargs.keys()))",
        "        raise"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/sentry_config.py",
      "line_number": 80,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        logger.error(f\"Failed to initialize Sentry: {e}\")",
        "        # Don't raise - we don't want Sentry issues to crash the app"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/sentry_config.py",
      "line_number": 210,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "            except Exception as e:",
        "                capture_ai_error(",
        "                    error=e,"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 17,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "except ImportError:",
        "    # Fallback settings for when config is not available",
        "    from types import SimpleNamespace"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 41,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            level = \"INFO\"",
        "    if format_type is None:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 48,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            format_type = \"json\"",
        "    if log_file is None:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/logger.py",
      "line_number": 55,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            log_file = None",
        ""
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/orchestrator/utils/config.py",
      "line_number": 393,
      "issue_type": "observability",
      "severity": "low",
      "description": "Critical function \"create_directories\" missing logging",
      "suggested_fix": "Add appropriate logging statements",
      "code_snippet": "    def create_directories(cls, path: str) -> str:"
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 94,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except KeyboardInterrupt:",
        "        console.print(\"\\n[yellow]Gracefully shutting down Cartrita AI OS...[/yellow]\")",
        "    except Exception as e:"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 96,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        console.print(f\"[red]Error starting service: {e}[/red]\")",
        "        sys.exit(1)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 180,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except KeyboardInterrupt:",
        "        console.print(\"\\n[yellow]Operation cancelled by user[/yellow]\")",
        "        sys.exit(130)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 183,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        console.print(f\"[red]Unexpected error: {e}[/red]\")",
        "        sys.exit(1)"
      ]
    },
    {
      "file_path": "services/ai-orchestrator/cartrita/cli/main.py",
      "line_number": 151,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            console.print(f\"\u274c [red]{name}[/red]: Not responding\")",
        ""
      ]
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 107,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.optimizeBrowserPerformance()"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 110,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.prewarmConnections()"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 116,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Voice Service Layer initialized for sub-300ms latency')"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 133,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await audioContext.resume()"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 195,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log(`Starting voice session ${sessionId} with sub-300ms configuration`)"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 228,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Optimizing for lower latency...')"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 236,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Switched to faster think model')"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 259,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Voice Service Layer disposed')"
    },
    {
      "file_path": "frontend/src/services/voiceServiceLayer.ts",
      "line_number": 279,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 62,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Attempting to stream from:', url)"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 74,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetchPromise"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 83,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const errorBody = await response.text()"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 108,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.processSSEStream(response.body, {"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 230,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetchPromise"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 239,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const errorBody = await response.text()"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 260,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.processSSEStream(response.body, {"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 312,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetch(`${this.baseUrl}/api/chat`, {"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 325,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const data = await response.json()"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 357,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await fetch(`${this.baseUrl}/api/chat/voice`, {"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 375,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const data = await response.json()"
    },
    {
      "file_path": "frontend/src/services/streaming.ts",
      "line_number": 424,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { done, value } = await reader.read()"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 379,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await new Promise(resolve => setTimeout(resolve, delay))"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 408,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<User>('GET', '/auth/me')"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 437,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<Conversation>('GET', `/conversations/${id}`)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 481,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<Message[]>('GET', endpoint)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 510,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<ChatResponse>('POST', '/chat', request)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 553,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 702,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { eventSource, conversationId } = await this.streamChatSSE(request, callbacks)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 715,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { websocket, conversationId } = await this.streamChatWebSocket(request, callbacks)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 738,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { close } = await this.streamChat(message, {"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 753,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await new Promise(resolve => setTimeout(resolve, 100))"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 764,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<Agent[]>('GET', '/agents')"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 781,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<Agent>('GET', `/agents/${id}`)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 855,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.request<HealthStatus>('GET', '/health')"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 945,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.get('/api/search', { params })"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 956,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.get('/api/settings')"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 961,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.put('/api/settings', settings)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 967,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.client.delete(`/api/files/${fileId}`)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 971,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.get('/api/files', { params })"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 977,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.post(endpoint, data, config)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 982,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.put(endpoint, data, config)"
    },
    {
      "file_path": "frontend/src/services/api.ts",
      "line_number": 987,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.patch(endpoint, data, config)"
    },
    {
      "file_path": "frontend/src/services/voiceOutput.ts",
      "line_number": 95,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.voiceService.synthesizeSpeech(item.text, {"
    },
    {
      "file_path": "frontend/src/services/voiceOutput.ts",
      "line_number": 125,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.voiceService.synthesizeSpeech(text, {"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 183,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "this.audioStream = await navigator.mediaDevices.getUserMedia({"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 245,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Deepgram connection opened')"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 255,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Deepgram connection closed')"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 311,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const arrayBuffer = await audioBlob.arrayBuffer()"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 316,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const audioBuffer = await audioContext.decodeAudioData(arrayBuffer)"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 384,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await this.client.speak.request("
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 394,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const stream = await response.getStream()"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 395,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const audioBuffer = await this.streamToArrayBuffer(stream)"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 398,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.playAudioBuffer(audioBuffer)"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 415,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const { done, value } = await reader.read()"
    },
    {
      "file_path": "frontend/src/services/deepgram.ts",
      "line_number": 438,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const decodedBuffer = await audioContext.decodeAudioData(audioBuffer)"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 76,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 192,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceServiceRef.current.startVoiceRecording()"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 196,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const stream = await navigator.mediaDevices.getUserMedia({ audio: true })"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 208,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceServiceRef.current.stopVoiceRecording()"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 243,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const voiceAgentWs = await voiceServiceRef.current.startVoiceAgent({"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 274,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const arrayBuffer = await audioBlob.arrayBuffer()"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 291,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await stopRecording()"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 293,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await startRecording()"
    },
    {
      "file_path": "frontend/src/hooks/useVoice.ts",
      "line_number": 312,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Voice config updated:', config)"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 110,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 240,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await initializeService()"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 244,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await serviceRef.current.startVoiceRecording()"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 254,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await startAnalysis(stream)"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 268,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await serviceRef.current.stopVoiceRecording()"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 298,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await initializeService()"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 314,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await serviceRef.current.startVoiceAgent(agentConfig)"
    },
    {
      "file_path": "frontend/src/hooks/useDeepgramVoice.ts",
      "line_number": 328,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await serviceRef.current.stopVoiceRecording()"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 103,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Function call:', functionName, args)"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 108,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Tool result:', toolName, result)"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 134,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Stream metrics:', metrics)"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 215,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const stream = await apiClient.streamChat(request, callbacks)"
    },
    {
      "file_path": "frontend/src/hooks/useSSEChat.ts",
      "line_number": 255,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.postChat({"
    },
    {
      "file_path": "frontend/src/hooks/index.ts",
      "line_number": 401,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "//       for await (const chunk of apiClient.streamChat(conversationId, message)) {"
    },
    {
      "file_path": "frontend/src/hooks/index.ts",
      "line_number": 524,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.post('/api/files/upload', formData, {"
    },
    {
      "file_path": "frontend/src/hooks/index.ts",
      "line_number": 543,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.post('/api/files/upload-multiple', formData, {"
    },
    {
      "file_path": "frontend/src/hooks/index.ts",
      "line_number": 618,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await updatePreferences(updates)"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceOutput.ts",
      "line_number": 112,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceSpeak(text)"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceOutput.ts",
      "line_number": 180,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await speak(testText)"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 78,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Voice streaming connected')"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 83,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Voice streaming disconnected')"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 98,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Received agent response via stream:', response)"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 163,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await deepgramVoice.startVoiceAgent(config)"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 167,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await startStreaming()"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 174,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await deepgramVoice.stopVoiceAgent()"
    },
    {
      "file_path": "frontend/src/hooks/useVoiceStreaming.ts",
      "line_number": 178,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await stopStreaming()"
    },
    {
      "file_path": "frontend/src/pages/api/conversations.ts",
      "line_number": 10,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/upload/multiple.ts",
      "line_number": 11,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/upload/index.ts",
      "line_number": 11,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/voice/speak.ts",
      "line_number": 11,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/voice/transcribe.ts",
      "line_number": 11,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/chat/stream.ts",
      "line_number": 13,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/chat/index.ts",
      "line_number": 12,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/api/chat/voice/stream.ts",
      "line_number": 11,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/__tests__/streaming-timeout-fix.test.ts",
      "line_number": 47,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await streamingService.streamChat(request, options)"
    },
    {
      "file_path": "frontend/src/__tests__/streaming-timeout-fix.test.ts",
      "line_number": 83,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await streamingService.streamChat(request, options)"
    },
    {
      "file_path": "frontend/src/__tests__/streaming-timeout-fix.test.ts",
      "line_number": 118,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await requestPromise"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 86,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 89,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(voiceService.initialize()).resolves.not.toThrow()"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 98,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceService.initialize()"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 99,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceService.optimizeForLatency()"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 139,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 140,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startVoiceAgent({"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 160,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 161,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startStreaming('test-session-123')"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 198,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(result.current.startVoiceAgent()).rejects.toThrow()"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 210,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(result.current.startRecording()).rejects.toThrow('Permission denied')"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 220,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceService.initialize()"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 227,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await new Promise(resolve => setTimeout(resolve, Math.random() * 250))"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 256,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 257,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startVoiceAgent()"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 262,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 263,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startRecording()"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 274,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/integration/voiceIntegration.test.ts",
      "line_number": 275,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.stopVoiceAgent()"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 12,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer)"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 31,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const computedChecksum = await generateChecksum(filePath + timestamp)"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 78,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const checksum = await generateChecksum(data)"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 113,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await this.rollback()"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 166,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const checksum = await generateChecksum(serialized)"
    },
    {
      "file_path": "frontend/src/utils/security.ts",
      "line_number": 197,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const computedChecksum = await generateChecksum(data)"
    },
    {
      "file_path": "frontend/src/components/SearchInterface.tsx",
      "line_number": 389,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Navigate to:', result)"
    },
    {
      "file_path": "frontend/src/components/SearchInterface.tsx",
      "line_number": 443,
      "issue_type": "code_quality",
      "severity": "medium",
      "description": "Direct DOM manipulation in React component",
      "suggested_fix": "Use React refs or state management instead",
      "code_snippet": "const searchInput = document.querySelector('input[type=\"text\"]') as HTMLInputElement"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 15,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Testing backend connection...')"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 21,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const healthResponse = await fetch('http://localhost:8000/health', {"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 35,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const healthJson = await healthResponse.json()"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 37,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Health check successful:', healthJson)"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 40,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const chatResponse = await fetch('http://localhost:8000/api/chat', {"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 58,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const chatJson = await chatResponse.json()"
    },
    {
      "file_path": "frontend/src/components/ConnectionTest.tsx",
      "line_number": 60,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Chat response received:', chatJson)"
    },
    {
      "file_path": "frontend/src/components/FileUpload.tsx",
      "line_number": 354,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const result = await uploadFile.mutateAsync({"
    },
    {
      "file_path": "frontend/src/components/FileUpload.tsx",
      "line_number": 363,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const result = await uploadMultipleFiles.mutateAsync({"
    },
    {
      "file_path": "frontend/src/components/MessageBubble.tsx",
      "line_number": 195,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const success = await copyToClipboard(message.content)"
    },
    {
      "file_path": "frontend/src/components/VoiceInput.tsx",
      "line_number": 178,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const stream = await navigator.mediaDevices.getUserMedia({"
    },
    {
      "file_path": "frontend/src/components/VoiceInput.tsx",
      "line_number": 188,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await initializeAudioAnalysis(stream)"
    },
    {
      "file_path": "frontend/src/components/VoiceInput.tsx",
      "line_number": 218,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await processRecording(audioBlob)"
    },
    {
      "file_path": "frontend/src/components/VoiceInput.tsx",
      "line_number": 250,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const result = await transcribeAudio.mutateAsync(file) as {"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 194,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: token",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 205,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const health = await apiClient.getHealthStatus()"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 207,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('API is healthy, loading real data...')"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 211,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const agentsResponse = await apiClient.getAgents()"
    },
    {
      "file_path": "frontend/src/components/AppInitializer.tsx",
      "line_number": 221,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const conversationsResponse = await apiClient.getConversations()"
    },
    {
      "file_path": "frontend/src/components/VoiceOutput.tsx",
      "line_number": 135,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await speak(text)"
    },
    {
      "file_path": "frontend/src/components/ui/Dialog.tsx",
      "line_number": 24,
      "issue_type": "code_quality",
      "severity": "medium",
      "description": "Direct DOM manipulation in React component",
      "suggested_fix": "Use React refs or state management instead",
      "code_snippet": "const focusable = dialogRef.current?.querySelectorAll<HTMLElement>("
    },
    {
      "file_path": "frontend/src/components/__tests__/VoiceOutput.test.tsx",
      "line_number": 81,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/components/__tests__/MessageList.test.tsx",
      "line_number": 9,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "content: i % 5 === 0 ? '```js\\nconsole.log(1)\\n```' : `hello ${i}`"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 94,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 95,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any)"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 113,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(result.current.startAnalysis(mockMediaStream as any)).rejects.toThrow('Audio context failed')"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 121,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 122,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any)"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 141,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 142,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any)"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 179,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 180,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any)"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 184,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 212,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 213,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any)"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 216,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 228,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/hooks/__tests__/useAudioAnalysis.test.tsx",
      "line_number": 229,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startAnalysis(mockMediaStream as any)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 293,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Stream complete:', response.response)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 337,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await abortable"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 340,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.postChat(chatRequest)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 376,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.editMessage(currentConversation.id, editingMessageId, editingContent)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 395,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.deleteMessage(currentConversation.id, msgId)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 421,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await handleSendMessage(toSend)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 428,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.pinConversation(convId)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 444,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "res = await apiClient.archiveConversation(convId)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 447,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "res = await apiClient.updateConversation(convId, { isArchived: false })"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 462,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.deleteConversation(convId)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 481,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await apiClient.createConversation({"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 529,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Files uploaded:', files)"
    },
    {
      "file_path": "frontend/src/pages/ChatInterface.tsx",
      "line_number": 917,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await apiClient.uploadMultipleFiles(files, currentConversation?.id, (p) => setUploadProgress(p))"
    },
    {
      "file_path": "frontend/src/pages/about.tsx",
      "line_number": 114,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/pages/about.tsx",
      "line_number": 117,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const res = await fetch(`${base}/api/bio?api_key=${encodeURIComponent(apiKey)}`, {"
    },
    {
      "file_path": "frontend/src/pages/about.tsx",
      "line_number": 123,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const json = await res.json()"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 12,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Mock startVoiceRecording called')"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 16,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Mock stopVoiceRecording called')"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 20,
      "issue_type": "code_quality",
      "severity": "low",
      "description": "console.log statement found - should be removed for production",
      "suggested_fix": "Use proper logging or remove debug statements",
      "code_snippet": "console.log('Mock connect called')"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 45,
      "issue_type": "security",
      "severity": "high",
      "description": "Potential hardcoded secret detected: apikey",
      "suggested_fix": "Move to environment variables",
      "code_snippet": "// REDACTED - potential secret"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 109,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 125,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 140,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 141,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.startRecording()"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 151,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useDeepgramVoice.test.tsx",
      "line_number": 152,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.stopRecording()"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 115,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 116,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessageNonStreaming(request)"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 148,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 191,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 192,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage(request)"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 214,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 215,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 253,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 254,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 303,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 304,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 331,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 332,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 363,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 365,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 397,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 398,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessageNonStreaming({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 431,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 432,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const response = await result.current.sendMessage('Hello', 'research')"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 450,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 484,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 485,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 503,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 521,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await act(async () => {"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 522,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await result.current.sendMessage({"
    },
    {
      "file_path": "frontend/src/__tests__/hooks/useSSEChat.test.tsx",
      "line_number": 546,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "tests/test_supervisor_smoke.py",
      "line_number": 7,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ModuleNotFoundError as e:",
        "        pytest.skip(f\"Supervisor module not found: {e}\")"
      ]
    },
    {
      "file_path": "tests/test_agents_bootstrap.py",
      "line_number": 20,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ModuleNotFoundError as e:",
        "        pytest.skip(f\"Module path not present: {e}\")",
        "    agent_symbols = ["
      ]
    },
    {
      "file_path": "tests/test_agents_bootstrap.py",
      "line_number": 31,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ModuleNotFoundError as e:",
        "        pytest.skip(f\"Orchestrator module not found: {e}\")"
      ]
    },
    {
      "file_path": "tests/test_guard_no_direct_chatopenai.py",
      "line_number": 24,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            continue",
        "        if pattern.search(content):"
      ]
    },
    {
      "file_path": "tests/test_metrics_server.py",
      "line_number": 49,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\u274c Failed to start server: {e}\")",
        "        raise"
      ]
    },
    {
      "file_path": "tests/test_metrics_server.py",
      "line_number": 117,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        return JSONResponse(",
        "            status_code=500,"
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 296,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as error:",
        "        return JSONResponse(",
        "            status_code=500,"
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 118,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as error:",
        "            import structlog",
        ""
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 147,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as error:",
        "            import structlog",
        ""
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 163,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as error:",
        "            import structlog",
        ""
      ]
    },
    {
      "file_path": "tests/isolated_metrics_test.py",
      "line_number": 179,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as error:",
        "            import structlog",
        ""
      ]
    },
    {
      "file_path": "tests/test_orm_mode_grep.py",
      "line_number": 18,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            continue",
        "        if PATTERN.search(text):"
      ]
    },
    {
      "file_path": "tests/test_fallback_provider_smoke.py",
      "line_number": 7,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except ModuleNotFoundError as e:",
        "        pytest.skip(f\"Fallback provider module not found: {e}\")",
        "    else:"
      ]
    },
    {
      "file_path": "tests/test_metrics_standalone.py",
      "line_number": 104,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        print(f\"\\n\u274c Test suite failed: {e}\")",
        "        import traceback"
      ]
    },
    {
      "file_path": "tests/test_metrics_standalone.py",
      "line_number": 37,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except ImportError as e:",
        "            print(f\"   \u274c Prometheus client import failed: {e}\")",
        "            return False"
      ]
    },
    {
      "file_path": "tests/test_metrics_standalone.py",
      "line_number": 55,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"   \u274c Basic Prometheus test failed: {e}\")",
        "            return False"
      ]
    },
    {
      "file_path": "tests/test_metrics_standalone.py",
      "line_number": 98,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception as e:",
        "            print(f\"   \u274c MetricsCollector test failed: {e}\")",
        "            import traceback"
      ]
    },
    {
      "file_path": "tests/smoke_test_server.py",
      "line_number": 194,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_conversations\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_conversations():",
        "    \"\"\"Get all conversations for testing.\"\"\"",
        "    return {"
      ]
    },
    {
      "file_path": "tests/smoke_test_server.py",
      "line_number": 203,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async function \"get_conversation\" missing error handling",
      "suggested_fix": "Add try-except block for proper error handling",
      "code_snippet": [
        "async def get_conversation(conversation_id: str):",
        "    \"\"\"Get specific conversation.\"\"\"",
        "    if conversation_id not in conversations:"
      ]
    },
    {
      "file_path": "tests/smoke_test_server.py",
      "line_number": 130,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        raise HTTPException(status_code=500, detail=f\"Chat processing failed: {str(e)}\")",
        ""
      ]
    },
    {
      "file_path": "tests/validate_cartrita_core.py",
      "line_number": 45,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        results[\"api_key_manager\"] = False",
        "        results[\"details\"].append(f\"\u274c Error: {str(e)}\")"
      ]
    },
    {
      "file_path": "tests/validate_cartrita_core.py",
      "line_number": 88,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        results[\"mcp_protocol\"] = False",
        "        results[\"details\"].append(f\"\u274c Error: {str(e)}\")"
      ]
    },
    {
      "file_path": "tests/validate_cartrita_core.py",
      "line_number": 128,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception as e:",
        "        results[\"integration\"] = False",
        "        results[\"details\"].append(f\"\u274c Error: {str(e)}\")"
      ]
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 5,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 8,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(page).toHaveTitle(/Cartrita/i);"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 12,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 16,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(mainContent).toBeVisible();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 20,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 23,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.setViewportSize({ width: 375, height: 667 });"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 27,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.setViewportSize({ width: 1920, height: 1080 });"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 32,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 35,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.route('**/api/health', route => {"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 45,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(connectionStatus).toBeVisible({ timeout: 10000 });"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 51,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 55,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(voiceButton).toBeVisible();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 59,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 64,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceButton.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 65,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(voiceButton).toHaveAttribute('aria-pressed', 'true');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 68,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await voiceButton.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 69,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(voiceButton).toHaveAttribute('aria-pressed', 'false');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 75,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 79,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await settingsButton.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 83,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await expect(settingsPanel).toBeVisible();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 87,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.goto('/');"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 90,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await page.locator('[data-testid=\"settings-button\"]').click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 94,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await themeToggle.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 98,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await saveButton.click();"
    },
    {
      "file_path": "tests/e2e/example.spec.ts",
      "line_number": 101,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "const theme = await page.evaluate(() => localStorage.getItem('theme'));"
    },
    {
      "file_path": "tests/voice-integration.test.js",
      "line_number": 43,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "tests/voice-integration.test.js",
      "line_number": 63,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "tests/voice-integration.test.js",
      "line_number": 83,
      "issue_type": "error_handling",
      "severity": "medium",
      "description": "Async operation without error handling",
      "suggested_fix": "Wrap in try-catch block",
      "code_snippet": "await waitFor(() => {"
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 50,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except FileNotFoundError:",
        "        cp = subprocess.CompletedProcess(cmd, returncode=127, stdout=\"\", stderr=\"not found\")",
        "        return cp"
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 68,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except json.JSONDecodeError:",
        "        return []",
        ""
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 87,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except json.JSONDecodeError:",
        "        return []",
        ""
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 146,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except json.JSONDecodeError:",
        "        return []",
        ""
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 109,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except json.JSONDecodeError:",
        "            issues = []",
        "        run = {"
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 165,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            # Swallow tool-specific errors to keep pipeline resilient",
        "            continue"
      ]
    },
    {
      "file_path": "scripts/sarif/generate_sarif.py",
      "line_number": 172,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "        except Exception:",
        "            pass",
        ""
      ]
    },
    {
      "file_path": "scripts/sarif/compare_sarif.py",
      "line_number": 50,
      "issue_type": "monitoring",
      "severity": "low",
      "description": "Exception handler missing Sentry error capture",
      "suggested_fix": "Add sentry_sdk.capture_exception() or use @track_ai_errors decorator",
      "code_snippet": [
        "    except Exception:",
        "        return []",
        ""
      ]
    }
  ],
  "patches_generated": 13
}